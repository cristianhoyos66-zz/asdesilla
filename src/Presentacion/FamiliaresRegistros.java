/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AccesoDatos.OpFamiliares;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Esta clase permite pintar la ventana para la búsqueda de los Familiares
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class FamiliaresRegistros extends javax.swing.JFrame {
    DefaultTableModel dtm;
    Map<String, String> p;
    Map<String, String> t;
    TreeMap<Integer, String> gf;

    public FamiliaresRegistros() {
        initComponents();
        setIconImage (new ImageIcon(getClass().getResource("/Imagenes/family-icon.png")).getImage());
        /*gf = OpFamiliares.obtenerGrupoFamiliar();
        Iterator t = gf.keySet().iterator();
        while(t.hasNext()){
            jcGrFamiliar.addItem(gf.get(t.next()));
        }*/
        dtm = (DefaultTableModel) Registros.getModel();
        if(dtm.getRowCount()!=0){
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
                i-=1;
            }
        }
        try{
            ArrayList <Object[]> l = OpFamiliares.obtenerRegistros();
            for (int i = 0; i < l.size(); i++) {
                dtm.addRow(l.get(i));
            }
        }catch(Exception e){
            System.out.println("Error: "+e);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        Registros = new javax.swing.JTable();
        labelDoc = new javax.swing.JLabel();
        jcFamiliares = new javax.swing.JComboBox();
        btnDetalles = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnBusqueda = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtDocFam = new java.awt.TextField();
        labelGrFamiliar1 = new javax.swing.JLabel();
        txtGrFamiliar = new java.awt.TextField();
        btnBusqueda1 = new javax.swing.JButton();
        jcGrFamiliar = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(958, 570));
        setResizable(false);
        getContentPane().setLayout(null);

        Registros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificación", "Nombre", "Primer Apellido", "Segundo Apellido", "Grupo Familiar", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Registros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RegistrosMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(Registros);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 250, 930, 280);

        labelDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDoc.setText("Documento Familiar:");
        getContentPane().add(labelDoc);
        labelDoc.setBounds(160, 70, 115, 15);

        jcFamiliares.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcFamiliares);
        jcFamiliares.setBounds(560, 70, 200, 27);

        btnDetalles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/more-details-icon.png"))); // NOI18N
        btnDetalles.setText("Ver detalles");
        btnDetalles.setEnabled(false);
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });
        getContentPane().add(btnDetalles);
        btnDetalles.setBounds(230, 190, 140, 34);

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(560, 190, 137, 34);

        btnBusqueda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusqueda.setToolTipText("La búsqueda se  puede generar a partir de los primeros números del documento");
        btnBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaActionPerformed(evt);
            }
        });
        getContentPane().add(btnBusqueda);
        btnBusqueda.setBounds(500, 60, 50, 30);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir);
        btnSalir.setBounds(720, 190, 137, 34);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(90, 190, 125, 34);

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disable-icon.png"))); // NOI18N
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar);
        btnEliminar.setBounds(390, 190, 140, 34);
        getContentPane().add(txtDocFam);
        txtDocFam.setBounds(300, 70, 190, 19);

        labelGrFamiliar1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelGrFamiliar1.setText("Grupo Familiar:");
        getContentPane().add(labelGrFamiliar1);
        labelGrFamiliar1.setBounds(160, 130, 100, 15);
        getContentPane().add(txtGrFamiliar);
        txtGrFamiliar.setBounds(300, 130, 190, 19);

        btnBusqueda1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusqueda1.setToolTipText("La búsqueda se  puede generar a partir de los primeros números del documento");
        btnBusqueda1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusqueda1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnBusqueda1);
        btnBusqueda1.setBounds(500, 120, 50, 30);

        jcGrFamiliar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcGrFamiliar);
        jcGrFamiliar.setBounds(560, 130, 200, 20);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 970, 550);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Obtiene la información del familiar de acuerdo a los datos de la tabla
     * y los asigna al formulario, además deshabilita el botón Crear
     * y habilita el botón modificar.
     * @param evt 
     */
    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed
          try{  
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String identificacion = Registros.getValueAt(Registros.getSelectedRow(), 0).toString();
            String grupoFamiliar = Registros.getValueAt(Registros.getSelectedRow(), 4).toString();
            OpFamiliares.buscar(identificacion);
            Familiares.txtIdFamiliar.enable(false);
            Familiares.txtIdFamiliar.setText(OpFamiliares.getIdFamiliar());
            if (InicioSesion.r.equals("2")) {
                
                TreeMap<Integer, String> t = OpFamiliares.obtenerParentesco();
                for (Map.Entry<Integer, String> parentesco : t.entrySet()){
                    if (Integer.parseInt(OpFamiliares.getParentesco()) == parentesco.getKey()) {
                        Familiares.jcParentesco.setEnabled(false);
                        Familiares.jcParentesco.setSelectedItem(parentesco.getValue());
                    }
                }
                try {
                    Familiares.txtNombre.setEnabled(false);
                    Familiares.txtNombre.setText(OpFamiliares.getNombre());
                    Familiares.txtApellido1.setEnabled(false);
                    Familiares.txtApellido1.setText(OpFamiliares.getApellido1());
                    Familiares.txtApellido2.setEnabled(false);
                    Familiares.txtApellido2.setText(OpFamiliares.getApellido2());
                    Familiares.FechaN.setEnabled(false);
                    Familiares.FechaN.setDate(formatoFecha.parse(OpFamiliares.getFechaNacimiento()));
                } catch (ParseException ex) {
                    Logger.getLogger(FamiliaresRegistros.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                TreeMap<Integer, String> e = OpFamiliares.obtenerEps();
                for (Map.Entry<Integer, String> eps : e.entrySet()){
                    if (Integer.parseInt(OpFamiliares.getEps()) == eps.getKey()) {
                        Familiares.jcEPS.setEnabled(false);
                        Familiares.jcEPS.setSelectedItem(eps.getValue());
                    }
                }
                Familiares.txtTelefono.setEnabled(false);
                Familiares.txtTelefono.setText(OpFamiliares.getTelefono());
                Familiares.txtCelular.setEnabled(false);
                Familiares.txtCelular.setText(OpFamiliares.getCelular());
                
                TreeMap<Integer, String> d = OpFamiliares.obtenerDepartamentos();
                for (Map.Entry<Integer, String> dep : d.entrySet()){
                    if (Integer.parseInt(OpFamiliares.getDepartamento()) == dep.getKey()) {
                        Familiares.jcDepartamento.setEnabled(false);
                        Familiares.jcDepartamento.setSelectedItem(dep.getValue());
                    }
                }
                
                TreeMap<Integer, String> m = OpFamiliares.obtenerMunicipios(OpFamiliares.getDepartamento());
                
                for (Map.Entry<Integer, String> mun : m.entrySet()){
                    if (Integer.parseInt(OpFamiliares.getMunicipio()) == mun.getKey()) {
                        Familiares.jcMunicipio.setEnabled(false);
                        Familiares.jcMunicipio.setSelectedItem(mun.getValue());
                    }
                }
                Familiares.txtBarrio.setEnabled(false);
                Familiares.txtBarrio.setText(OpFamiliares.getBarrio());
                Familiares.txtDireccion.setEnabled(false);
                Familiares.txtDireccion.setText(OpFamiliares.getDireccion());
                Familiares.btnGrFamiliar.setEnabled(false);
                Familiares.txtGrFamiliar.setText(grupoFamiliar);
                Familiares.btnModificar.setEnabled(false);
                Familiares.btnEliminar.setEnabled(false);
                Familiares.btnEliminar.setText("Deshabilitar");
                Familiares.btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
            }else{
                
                if (OpFamiliares.getEstado().equals("Activo")) {
                    TreeMap<Integer, String> t = OpFamiliares.obtenerParentesco();
                    for (Map.Entry<Integer, String> parentesco : t.entrySet()){
                        if (Integer.parseInt(OpFamiliares.getParentesco()) == parentesco.getKey()) {
                            Familiares.jcParentesco.setEnabled(true);
                            Familiares.jcParentesco.setSelectedItem(parentesco.getValue());
                        }
                    }
                    try {
                        Familiares.txtNombre.setEnabled(true);
                        Familiares.txtNombre.setText(OpFamiliares.getNombre());
                        Familiares.txtApellido1.setEnabled(true);
                        Familiares.txtApellido1.setText(OpFamiliares.getApellido1());
                        Familiares.txtApellido2.setEnabled(true);
                        Familiares.txtApellido2.setText(OpFamiliares.getApellido2());
                        Familiares.FechaN.setEnabled(true);
                        Familiares.FechaN.setDate(formatoFecha.parse(OpFamiliares.getFechaNacimiento()));
                    } catch (ParseException ex) {
                        Logger.getLogger(FamiliaresRegistros.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    TreeMap<Integer, String> e = OpFamiliares.obtenerEps();
                    for (Map.Entry<Integer, String> eps : e.entrySet()){
                        if (Integer.parseInt(OpFamiliares.getEps()) == eps.getKey()) {
                            Familiares.jcEPS.setEnabled(true);
                            Familiares.jcEPS.setSelectedItem(eps.getValue());
                        }
                    }
                    Familiares.txtTelefono.setEnabled(true);
                    Familiares.txtTelefono.setText(OpFamiliares.getTelefono());
                    Familiares.txtCelular.setEnabled(true);
                    Familiares.txtCelular.setText(OpFamiliares.getCelular());
                    
                    TreeMap<Integer, String> d = OpFamiliares.obtenerDepartamentos();
                    for (Map.Entry<Integer, String> dep : d.entrySet()){
                        if (Integer.parseInt(OpFamiliares.getDepartamento()) == dep.getKey()) {
                            Familiares.jcDepartamento.setEnabled(true);
                            Familiares.jcDepartamento.setSelectedItem(dep.getValue());
                        }
                    }
                    
                    TreeMap<Integer, String> m = OpFamiliares.obtenerMunicipios(OpFamiliares.getDepartamento());
                    
                    for (Map.Entry<Integer, String> mun : m.entrySet()){
                        if (Integer.parseInt(OpFamiliares.getMunicipio()) == mun.getKey()) {
                            Familiares.jcMunicipio.setEnabled(true);
                            Familiares.jcMunicipio.setSelectedItem(mun.getValue());
                        }
                    }
                    Familiares.txtBarrio.setEnabled(true);
                    Familiares.txtBarrio.setText(OpFamiliares.getBarrio());
                    Familiares.txtDireccion.setEnabled(true);
                    Familiares.txtDireccion.setText(OpFamiliares.getDireccion());
                    Familiares.btnGrFamiliar.setEnabled(false);
                    Familiares.txtGrFamiliar.setText(grupoFamiliar);
                    Familiares.btnModificar.setEnabled(true);
                    Familiares.btnEliminar.setEnabled(true);
                    Familiares.btnEliminar.setText("Deshabilitar");
                    Familiares.btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                }else{
                    TreeMap<Integer, String> t = OpFamiliares.obtenerParentesco();
                    for (Map.Entry<Integer, String> parentesco : t.entrySet()){
                        if (Integer.parseInt(OpFamiliares.getParentesco()) == parentesco.getKey()) {
                            Familiares.jcParentesco.setEnabled(false);
                            Familiares.jcParentesco.setSelectedItem(parentesco.getValue());
                        }
                    }
                    try {
                        Familiares.txtNombre.setEnabled(false);
                        Familiares.txtNombre.setText(OpFamiliares.getNombre());
                        Familiares.txtApellido1.setEnabled(false);
                        Familiares.txtApellido1.setText(OpFamiliares.getApellido1());
                        Familiares.txtApellido2.setEnabled(false);
                        Familiares.txtApellido2.setText(OpFamiliares.getApellido2());
                        Familiares.FechaN.setEnabled(false);
                        Familiares.FechaN.setDate(formatoFecha.parse(OpFamiliares.getFechaNacimiento()));
                    } catch (ParseException ex) {
                        Logger.getLogger(FamiliaresRegistros.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    TreeMap<Integer, String> e = OpFamiliares.obtenerEps();
                    for (Map.Entry<Integer, String> eps : e.entrySet()){
                        if (Integer.parseInt(OpFamiliares.getEps()) == eps.getKey()) {
                            Familiares.jcEPS.setEnabled(false);
                            Familiares.jcEPS.setSelectedItem(eps.getValue());
                        }
                    }
                    Familiares.txtTelefono.setEnabled(false);
                    Familiares.txtTelefono.setText(OpFamiliares.getTelefono());
                    Familiares.txtCelular.setEnabled(false);
                    Familiares.txtCelular.setText(OpFamiliares.getCelular());
                    
                    TreeMap<Integer, String> d = OpFamiliares.obtenerDepartamentos();
                    for (Map.Entry<Integer, String> dep : d.entrySet()){
                        if (Integer.parseInt(OpFamiliares.getDepartamento()) == dep.getKey()) {
                            Familiares.jcDepartamento.setEnabled(false);
                            Familiares.jcDepartamento.setSelectedItem(dep.getValue());
                        }
                    }
                    
                    TreeMap<Integer, String> m = OpFamiliares.obtenerMunicipios(OpFamiliares.getDepartamento());
                    
                    for (Map.Entry<Integer, String> mun : m.entrySet()){
                        if (Integer.parseInt(OpFamiliares.getMunicipio()) == mun.getKey()) {
                            Familiares.jcMunicipio.setEnabled(false);
                            Familiares.jcMunicipio.setSelectedItem(mun.getValue());
                        }
                    }
                    Familiares.txtBarrio.setEnabled(false);
                    Familiares.txtBarrio.setText(OpFamiliares.getBarrio());
                    Familiares.txtDireccion.setEnabled(false);
                    Familiares.txtDireccion.setText(OpFamiliares.getDireccion());
                    Familiares.btnGrFamiliar.setEnabled(false);
                    Familiares.txtGrFamiliar.setText(grupoFamiliar);
                    Familiares.btnModificar.setEnabled(false);
                    Familiares.btnEliminar.setEnabled(true);
                    Familiares.btnEliminar.setText("Habilitar");
                    Familiares.btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/enable-icon.png")));
                }
            }
            OpFamiliares.setIdFamiliar("");
            OpFamiliares.setParentesco("");
            OpFamiliares.setNombre("");
            OpFamiliares.setApellido1("");
            OpFamiliares.setApellido2("");
            OpFamiliares.setFechaNacimiento("");
            OpFamiliares.setEps("");
            OpFamiliares.setTelefono("");
            OpFamiliares.setCelular("");
            OpFamiliares.setDepartamento("");
            OpFamiliares.setMunicipio("");
            OpFamiliares.setBarrio("");
            OpFamiliares.setDireccion("");
            OpFamiliares.setGrupoFamiliar("");
            OpFamiliares.setEstado("");

            Familiares.btnCrear.setEnabled(false);
            
            this.setVisible(false);
        
        } catch (SQLException ex) {
            Logger.getLogger(FamiliaresRegistros.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDetallesActionPerformed

    /**
     * Limpia todos los campos y restaura los datos de la tabla en caso de haberse hecho una consulta.
     * @param evt 
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        jcFamiliares.removeAllItems();
        jcFamiliares.addItem("Seleccione");
        txtDocFam.setText("");
        txtGrFamiliar.setText("");
        jcGrFamiliar.setSelectedIndex(0);
        btnDetalles.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
        if(dtm.getRowCount()!=0){
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
                i-=1;
            }
        }
        try{
            ArrayList <Object[]> l = OpFamiliares.obtenerRegistros();
            for (int i = 0; i < l.size(); i++) {
                dtm.addRow(l.get(i));
            }
        }catch(Exception e){
            System.out.println("Error: "+e);
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * Habilita el botón Ver detalles en caso de que se seleccione algún registro en la tabla.
     * @param evt 
     */
    private void RegistrosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegistrosMousePressed
        btnDetalles.setEnabled(true);
        if (InicioSesion.r.equals("2")) {
            btnEliminar.setEnabled(false);
            btnEliminar.setText("Deshabilitar");
            btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
        }else{
            String estado = Registros.getValueAt(Registros.getSelectedRow(), 5).toString();
            if (estado.equals("Activo")) {
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
            }else{
                btnEliminar.setText("Habilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/enable-icon.png")));
            }
            btnEliminar.setEnabled(true);
        }
    }//GEN-LAST:event_RegistrosMousePressed

    /**
     * Búsqueda de los familiares coincidentes según un carácter ingresado
     * @param evt 
     */
    private void btnBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaActionPerformed
        if(txtDocFam.getText() == null || txtDocFam.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de identificación del familiar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcFamiliares.removeAllItems();
                p = OpFamiliares.obtenerFamiliares(txtDocFam.getText());
                Iterator it = p.keySet().iterator();
                if (p.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcFamiliares.addItem("Seleccione");
                while(it.hasNext()){
                    jcFamiliares.addItem(p.get(it.next()));
                }
                //txtDocFam.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(FamiliaresRegistros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaActionPerformed

    /**
     * Cierra la ventana de registros.
     * @param evt 
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.hide();
    }//GEN-LAST:event_btnSalirActionPerformed
    /**
     * Llama al método buscar
     * @param evt 
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscar();
    }//GEN-LAST:event_btnBuscarActionPerformed
    /**
     * Llama al método cambiar estado
     * @param evt 
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        cambiarEstado();
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * Búsqueda de los grupos familiares coincidentes según un carácter ingresado
     * @param evt 
     */
    private void btnBusqueda1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusqueda1ActionPerformed
        if(txtGrFamiliar.getText() == null || txtGrFamiliar.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del nombre del grupo familiar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcGrFamiliar.removeAllItems();
                gf = OpFamiliares.obtenerGruposFamiliares(txtGrFamiliar.getText());
                Iterator it = gf.keySet().iterator();
                if (gf.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcGrFamiliar.addItem("Seleccione");
                while(it.hasNext()){
                    jcGrFamiliar.addItem(gf.get(it.next()));
                }
                //txtGrFamiliar.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(UsuariosRegistros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusqueda1ActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FamiliaresRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FamiliaresRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FamiliaresRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FamiliaresRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FamiliaresRegistros().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Registros;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBusqueda;
    private javax.swing.JButton btnBusqueda1;
    private javax.swing.JButton btnDetalles;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox jcFamiliares;
    private javax.swing.JComboBox jcGrFamiliar;
    private javax.swing.JLabel labelDoc;
    private javax.swing.JLabel labelGrFamiliar1;
    private java.awt.TextField txtDocFam;
    private java.awt.TextField txtGrFamiliar;
    // End of variables declaration//GEN-END:variables
    /**
     * Método que permite buscar un registro de un familiar de acuerdo al número de identificación digitado
     * y muestra la información obtenida en la tabla de registros.
     */
    public void buscar() {
        String id;
        String grupoFamiliar;
        ArrayList <Object[]> l;
        id = null;
        grupoFamiliar = null;
        
        if (!"Seleccione".equals(jcGrFamiliar.getSelectedItem().toString())) {
            for (Map.Entry<Integer, String> familiar : gf.entrySet()){
                int grupfam = familiar.getKey();
                if (jcGrFamiliar.getSelectedItem().equals(familiar.getValue())) {
                    grupoFamiliar = String.valueOf(grupfam);
                }
            }
        }
        
        if (!"Seleccione".equals(jcFamiliares.getSelectedItem().toString())) {
            for (Map.Entry<String, String> usuarios : p.entrySet()){
                String u = usuarios.getKey();
                if (jcFamiliares.getSelectedItem().toString().equals(usuarios.getValue())) {
                    id = u;
                }
            }
        }
        
        if(id == null && grupoFamiliar == null){
            JOptionPane.showMessageDialog(null, "Debe seleccionar un familiar o un grupo familiar a buscar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            l = OpFamiliares.buscarRegistros(id, grupoFamiliar);
            if(l.size()>0){
                btnDetalles.setEnabled(false);
                btnEliminar.setEnabled(false);
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                if(dtm.getRowCount()!=0){
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        dtm.removeRow(i);
                        i-=1;
                    }
                }
                try{
                    for (int i = 0; i < l.size(); i++) {
                        dtm.addRow(l.get(i));
                    }
                }catch(Exception e){
                    System.out.println("Error: "+e);
                }
            }
        }
    }
    
    /**
    * Método que permite cambiar el estado de la información de un familiar registrado 
    * de acuerdo a la identificación digitada.
    */
    public void cambiarEstado(){
        String identificacion = Registros.getValueAt(Registros.getSelectedRow(), 0).toString();
        if(identificacion == null || identificacion.trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe seleccionar el registro a cambiar el estado", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }

        if(!identificacion.trim().isEmpty()){
            JOptionPane x = new JOptionPane();
            if(x.showConfirmDialog(null,"Está seguro que desea cambiar el estado de este registro?")==0){
                OpFamiliares.cambiarEstado(identificacion);
                jcFamiliares.removeAllItems();
                jcFamiliares.addItem("Seleccione");
                jcGrFamiliar.setSelectedIndex(0);
                btnDetalles.setEnabled(false);
                btnEliminar.setEnabled(false);
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                if(dtm.getRowCount()!=0){
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        dtm.removeRow(i);
                        i-=1;
                    }
                }
                try{
                    ArrayList <Object[]> l = OpFamiliares.obtenerRegistros();
                    for (int i = 0; i < l.size(); i++) {
                        dtm.addRow(l.get(i));
                    }
                }catch(Exception e){
                    System.out.println("Error: "+e);
                }
            }
        }
    }
}
