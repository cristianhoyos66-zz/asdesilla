/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AccesoDatos.OpEvaluaciones;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Esta clase permite pintar la ventana Evaluaciones, con sus respectivos componentes, para el manejo de la información del diagnóstico del paciente
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class Evaluaciones extends javax.swing.JFrame {
    Map<Integer, String> p;
    Map<String, String> pr;
    Map<String, String> t;
    
    public Evaluaciones() {
        //Se inicializan todos los campos con la información obtenida de la base de datos.
        initComponents();
        setIconImage (new ImageIcon(getClass().getResource("/Imagenes/evaluation-icon.png")).getImage());
        FechaEvaluacion.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel21 = new javax.swing.JLabel();
        FechaN = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        labelDocEv = new javax.swing.JLabel();
        labelMotivoConsultaEv = new javax.swing.JLabel();
        labelDiagMedicoEv = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        txtMotivoConsulta = new javax.swing.JTextArea();
        labelTratMedActualEv = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtTratMedActual = new javax.swing.JTextArea();
        labelPesoEv = new javax.swing.JLabel();
        txtPeso = new java.awt.TextField();
        labelFCEv = new javax.swing.JLabel();
        txtFC = new java.awt.TextField();
        labelFREv = new javax.swing.JLabel();
        txtFR = new java.awt.TextField();
        labelPAEv = new javax.swing.JLabel();
        txtPA = new java.awt.TextField();
        labelTallaEv = new javax.swing.JLabel();
        txtTalla = new java.awt.TextField();
        labelImcEv = new javax.swing.JLabel();
        txtIMC = new java.awt.TextField();
        labelProfesionalEv = new javax.swing.JLabel();
        jcProfesional = new javax.swing.JComboBox();
        btnCrearEva = new javax.swing.JButton();
        btnBuscarEva = new javax.swing.JButton();
        btnLimpiarEva = new javax.swing.JButton();
        btnSalirEva = new javax.swing.JButton();
        labelFechaEv = new javax.swing.JLabel();
        FechaEvaluacion = new com.toedter.calendar.JDateChooser();
        jScrollPane11 = new javax.swing.JScrollPane();
        txtDiagMed = new javax.swing.JTextArea();
        txtDocPac = new java.awt.TextField();
        btnBusquedaPac = new javax.swing.JButton();
        jcPaciente = new javax.swing.JComboBox();
        txtDocProf = new java.awt.TextField();
        btnBusquedaProf = new javax.swing.JButton();
        labelTituloEv = new javax.swing.JLabel();
        labelObligatoriosEv = new javax.swing.JLabel();
        labelNHistoriaClinicaEv = new javax.swing.JLabel();
        txtNHC = new java.awt.TextField();
        btnCalcular = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        labelTituloEstCompl = new javax.swing.JLabel();
        labelTituloTerapiasEstCompl = new javax.swing.JLabel();
        jcheckFisioterapia = new javax.swing.JCheckBox();
        jcheckFonoaudiologia = new javax.swing.JCheckBox();
        jcheckPsicologia = new javax.swing.JCheckBox();
        jcheckEquinoterapia = new javax.swing.JCheckBox();
        jcheckEduEspecial = new javax.swing.JCheckBox();
        labelDocEstCompl = new javax.swing.JLabel();
        txtDocPacEstCompl = new java.awt.TextField();
        btnBusquedaEstCompl = new javax.swing.JButton();
        jcPacienteEstCompl = new javax.swing.JComboBox();
        btnCrearEstCompl = new javax.swing.JButton();
        btnBuscarEstCompl = new javax.swing.JButton();
        btnLimpiarEstCompl = new javax.swing.JButton();
        btnSalirEstCompl = new javax.swing.JButton();
        labelNHistoriaClinicaEstCompl = new javax.swing.JLabel();
        txtNHCEstCompl = new java.awt.TextField();
        jLabel2 = new javax.swing.JLabel();

        jLabel21.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel21.setText("Fecha de nacimiento*");

        FechaN.setName("FechaN"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Postura Trote*");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Muy bien", "Bien", "Deficiente", "Muy deficiente" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Evaluaciones");
        setMinimumSize(new java.awt.Dimension(1256, 616));
        setResizable(false);

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(100, 650));

        jPanel6.setAutoscrolls(true);
        jPanel6.setPreferredSize(new java.awt.Dimension(745, 1165));
        jPanel6.setLayout(null);

        labelDocEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDocEv.setText("*Documento Paciente:");
        jPanel6.add(labelDocEv);
        labelDocEv.setBounds(30, 150, 141, 15);

        labelMotivoConsultaEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelMotivoConsultaEv.setText("*Motivo de la Consulta:");
        jPanel6.add(labelMotivoConsultaEv);
        labelMotivoConsultaEv.setBounds(30, 190, 130, 15);

        labelDiagMedicoEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDiagMedicoEv.setText("*Diagnostico médico:");
        jPanel6.add(labelDiagMedicoEv);
        labelDiagMedicoEv.setBounds(780, 190, 120, 15);

        txtMotivoConsulta.setColumns(20);
        txtMotivoConsulta.setRows(5);
        jScrollPane10.setViewportView(txtMotivoConsulta);

        jPanel6.add(jScrollPane10);
        jScrollPane10.setBounds(210, 190, 250, 70);

        labelTratMedActualEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTratMedActualEv.setText("*Tratamiento médico actual:");
        jPanel6.add(labelTratMedActualEv);
        labelTratMedActualEv.setBounds(20, 280, 160, 15);

        txtTratMedActual.setColumns(20);
        txtTratMedActual.setRows(5);
        jScrollPane4.setViewportView(txtTratMedActual);

        jPanel6.add(jScrollPane4);
        jScrollPane4.setBounds(210, 280, 250, 70);

        labelPesoEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelPesoEv.setText("*Peso:");
        jPanel6.add(labelPesoEv);
        labelPesoEv.setBounds(30, 370, 60, 15);

        txtPeso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesoKeyTyped(evt);
            }
        });
        jPanel6.add(txtPeso);
        txtPeso.setBounds(210, 370, 120, 19);

        labelFCEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelFCEv.setText("*Frecuencia Cardiaca (FC):");
        jPanel6.add(labelFCEv);
        labelFCEv.setBounds(780, 370, 150, 15);

        txtFC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFCKeyTyped(evt);
            }
        });
        jPanel6.add(txtFC);
        txtFC.setBounds(960, 370, 120, 19);

        labelFREv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelFREv.setText("*Frecuencia Respiratoria (FR):");
        jPanel6.add(labelFREv);
        labelFREv.setBounds(30, 410, 170, 15);

        txtFR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFRKeyTyped(evt);
            }
        });
        jPanel6.add(txtFR);
        txtFR.setBounds(210, 410, 120, 19);

        labelPAEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelPAEv.setText("*Presión Arterial (PA):");
        jPanel6.add(labelPAEv);
        labelPAEv.setBounds(780, 410, 120, 15);

        txtPA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPAKeyTyped(evt);
            }
        });
        jPanel6.add(txtPA);
        txtPA.setBounds(960, 410, 120, 19);

        labelTallaEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTallaEv.setText("*Talla:");
        jPanel6.add(labelTallaEv);
        labelTallaEv.setBounds(30, 450, 60, 15);

        txtTalla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTallaKeyTyped(evt);
            }
        });
        jPanel6.add(txtTalla);
        txtTalla.setBounds(210, 450, 120, 19);

        labelImcEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelImcEv.setText("*Índice Masa Corporal (IMC):");
        jPanel6.add(labelImcEv);
        labelImcEv.setBounds(780, 450, 160, 15);

        txtIMC.setEnabled(false);
        txtIMC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIMCKeyTyped(evt);
            }
        });
        jPanel6.add(txtIMC);
        txtIMC.setBounds(960, 450, 120, 19);

        labelProfesionalEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelProfesionalEv.setText("*Registro del Profesional:");
        jPanel6.add(labelProfesionalEv);
        labelProfesionalEv.setBounds(30, 490, 140, 13);

        jcProfesional.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jPanel6.add(jcProfesional);
        jcProfesional.setBounds(410, 490, 240, 20);

        btnCrearEva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnCrearEva.setText("Crear");
        btnCrearEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearEvaActionPerformed(evt);
            }
        });
        jPanel6.add(btnCrearEva);
        btnCrearEva.setBounds(170, 540, 130, 34);

        btnBuscarEva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscarEva.setText("Buscar");
        btnBuscarEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEvaActionPerformed(evt);
            }
        });
        jPanel6.add(btnBuscarEva);
        btnBuscarEva.setBounds(420, 540, 125, 34);

        btnLimpiarEva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiarEva.setText("Limpiar");
        btnLimpiarEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarEvaActionPerformed(evt);
            }
        });
        jPanel6.add(btnLimpiarEva);
        btnLimpiarEva.setBounds(640, 540, 137, 34);

        btnSalirEva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalirEva.setText("Salir");
        btnSalirEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirEvaActionPerformed(evt);
            }
        });
        jPanel6.add(btnSalirEva);
        btnSalirEva.setBounds(890, 540, 137, 34);

        labelFechaEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelFechaEv.setText("*Fecha:");
        jPanel6.add(labelFechaEv);
        labelFechaEv.setBounds(30, 110, 120, 15);

        FechaEvaluacion.setDateFormatString("dd-MM-yyyy");
        FechaEvaluacion.setEnabled(false);
        FechaEvaluacion.setName("FechaN"); // NOI18N
        jPanel6.add(FechaEvaluacion);
        FechaEvaluacion.setBounds(210, 110, 181, 22);

        txtDiagMed.setColumns(20);
        txtDiagMed.setRows(5);
        jScrollPane11.setViewportView(txtDiagMed);

        jPanel6.add(jScrollPane11);
        jScrollPane11.setBounds(960, 190, 250, 70);

        txtDocPac.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.add(txtDocPac);
        txtDocPac.setBounds(210, 150, 130, 19);

        btnBusquedaPac.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusquedaPac.setToolTipText("La búsqueda se  puede generar a partir de los primeros números del documento");
        btnBusquedaPac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaPacActionPerformed(evt);
            }
        });
        jPanel6.add(btnBusquedaPac);
        btnBusquedaPac.setBounds(350, 140, 50, 30);

        jcPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jcPaciente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcPacienteItemStateChanged(evt);
            }
        });
        jPanel6.add(jcPaciente);
        jcPaciente.setBounds(410, 150, 230, 27);

        txtDocProf.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.add(txtDocProf);
        txtDocProf.setBounds(210, 490, 120, 19);

        btnBusquedaProf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusquedaProf.setToolTipText("La búsqueda se  puede generar a partir de los primeros dígitos del registro profesional");
        btnBusquedaProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaProfActionPerformed(evt);
            }
        });
        jPanel6.add(btnBusquedaProf);
        btnBusquedaProf.setBounds(350, 480, 50, 30);

        labelTituloEv.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelTituloEv.setText("INFORMACIÓN DE LA EVALUACIÓN");
        jPanel6.add(labelTituloEv);
        labelTituloEv.setBounds(540, 20, 231, 15);

        labelObligatoriosEv.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelObligatoriosEv.setText("Los campos con * son obligatorios");
        jPanel6.add(labelObligatoriosEv);
        labelObligatoriosEv.setBounds(540, 60, 210, 15);

        labelNHistoriaClinicaEv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNHistoriaClinicaEv.setText("Número Historia Clínica*");
        jPanel6.add(labelNHistoriaClinicaEv);
        labelNHistoriaClinicaEv.setBounds(780, 110, 140, 15);

        txtNHC.setEnabled(false);
        jPanel6.add(txtNHC);
        txtNHC.setBounds(960, 110, 130, 19);

        btnCalcular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/calcular-imc-icon.png"))); // NOI18N
        btnCalcular.setToolTipText("Calcular teniendo en cuenta los datos ingresados anteriormente");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });
        jPanel6.add(btnCalcular);
        btnCalcular.setBounds(1100, 440, 50, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel6.add(jLabel1);
        jLabel1.setBounds(0, 0, 1260, 600);

        jTabbedPane1.addTab("Evaluación", jPanel6);

        jPanel2.setAutoscrolls(true);
        jPanel2.setPreferredSize(new java.awt.Dimension(745, 1195));
        jPanel2.setLayout(null);

        labelTituloEstCompl.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelTituloEstCompl.setText("INFORMACIÓN DE LOS ESTUDIOS COMPLEMENTARIOS");
        jPanel2.add(labelTituloEstCompl);
        labelTituloEstCompl.setBounds(480, 30, 310, 15);

        labelTituloTerapiasEstCompl.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelTituloTerapiasEstCompl.setText("Seleccione las terapias a realizar al paciente");
        jPanel2.add(labelTituloTerapiasEstCompl);
        labelTituloTerapiasEstCompl.setBounds(510, 210, 260, 15);

        jcheckFisioterapia.setSelected(true);
        jcheckFisioterapia.setText("Fisioterapia");
        jcheckFisioterapia.setEnabled(false);
        jPanel2.add(jcheckFisioterapia);
        jcheckFisioterapia.setBounds(120, 300, 100, 21);

        jcheckFonoaudiologia.setText("Fonoaudiología");
        jPanel2.add(jcheckFonoaudiologia);
        jcheckFonoaudiologia.setBounds(350, 300, 110, 21);

        jcheckPsicologia.setSelected(true);
        jcheckPsicologia.setText("Psicología");
        jcheckPsicologia.setEnabled(false);
        jPanel2.add(jcheckPsicologia);
        jcheckPsicologia.setBounds(590, 300, 81, 21);

        jcheckEquinoterapia.setText("Equinoterapia");
        jPanel2.add(jcheckEquinoterapia);
        jcheckEquinoterapia.setBounds(790, 300, 110, 21);

        jcheckEduEspecial.setText("Educación Especial");
        jPanel2.add(jcheckEduEspecial);
        jcheckEduEspecial.setBounds(1000, 300, 140, 21);

        labelDocEstCompl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDocEstCompl.setText("Documento Paciente*");
        jPanel2.add(labelDocEstCompl);
        labelDocEstCompl.setBounds(40, 130, 120, 15);

        txtDocPacEstCompl.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(txtDocPacEstCompl);
        txtDocPacEstCompl.setBounds(180, 130, 170, 19);

        btnBusquedaEstCompl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusquedaEstCompl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaEstComplActionPerformed(evt);
            }
        });
        jPanel2.add(btnBusquedaEstCompl);
        btnBusquedaEstCompl.setBounds(370, 120, 50, 30);

        jcPacienteEstCompl.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jcPacienteEstCompl.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcPacienteEstComplItemStateChanged(evt);
            }
        });
        jPanel2.add(jcPacienteEstCompl);
        jcPacienteEstCompl.setBounds(430, 130, 220, 27);

        btnCrearEstCompl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnCrearEstCompl.setText("Crear");
        btnCrearEstCompl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearEstComplActionPerformed(evt);
            }
        });
        jPanel2.add(btnCrearEstCompl);
        btnCrearEstCompl.setBounds(140, 490, 130, 34);

        btnBuscarEstCompl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscarEstCompl.setText("Buscar");
        btnBuscarEstCompl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEstComplActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscarEstCompl);
        btnBuscarEstCompl.setBounds(400, 490, 125, 34);

        btnLimpiarEstCompl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiarEstCompl.setText("Limpiar");
        btnLimpiarEstCompl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarEstComplActionPerformed(evt);
            }
        });
        jPanel2.add(btnLimpiarEstCompl);
        btnLimpiarEstCompl.setBounds(630, 490, 137, 34);

        btnSalirEstCompl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalirEstCompl.setText("Salir");
        btnSalirEstCompl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirEstComplActionPerformed(evt);
            }
        });
        jPanel2.add(btnSalirEstCompl);
        btnSalirEstCompl.setBounds(900, 490, 137, 34);

        labelNHistoriaClinicaEstCompl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNHistoriaClinicaEstCompl.setText("Número Historia Clínica*");
        jPanel2.add(labelNHistoriaClinicaEstCompl);
        labelNHistoriaClinicaEstCompl.setBounds(870, 130, 140, 15);

        txtNHCEstCompl.setEnabled(false);
        jPanel2.add(txtNHCEstCompl);
        txtNHCEstCompl.setBounds(1030, 130, 130, 19);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(0, 0, 1260, 590);

        jTabbedPane1.addTab("Estudios Complementarios", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cierra la interfaz y regresa al menú principal.
     * @param evt 
     */
    private void btnSalirEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirEvaActionPerformed
        new Menu().setVisible(true);
        this.hide();
    }//GEN-LAST:event_btnSalirEvaActionPerformed

    /**
     * Limpia todos los campos, asignandoles el valor por defecto.
     * @param evt 
     */
    private void btnLimpiarEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarEvaActionPerformed
        FechaEvaluacion.setDate(new Date());
        txtNHC.setText("");
        jcPaciente.setEnabled(true);
        jcPaciente.removeAllItems();
        jcPaciente.addItem("Seleccione");
        txtMotivoConsulta.setEnabled(true);
        txtMotivoConsulta.setText("");
        txtDiagMed.setEnabled(true);
        txtDiagMed.setText("");
        txtTratMedActual.setEnabled(true);
        txtTratMedActual.setText("");
        txtPeso.setEnabled(true);
        txtPeso.setText("");
        txtFC.setEnabled(true);
        txtFC.setText("");
        txtFR.setEnabled(true);
        txtFR.setText("");
        txtPA.setEnabled(true);
        txtPA.setText("");
        txtTalla.setEnabled(true);
        txtTalla.setText("");
        txtIMC.setText("");
        btnCalcular.setEnabled(true);
        jcProfesional.setEnabled(true);
        jcProfesional.removeAllItems();
        jcProfesional.addItem("Seleccione");
        txtDocPac.setEnabled(true);
        btnBusquedaPac.setEnabled(true);
        txtDocProf.setEnabled(true);
        btnBusquedaProf.setEnabled(true);
        btnCrearEva.setEnabled(true);
        txtDocPac.setText("");
        txtDocProf.setText("");
    }//GEN-LAST:event_btnLimpiarEvaActionPerformed

    /**
     * Llama a la interfaz EvaluacionesRegistros.
     * @param evt 
     */
    private void btnBuscarEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEvaActionPerformed
        new EvaluacionesRegistros().setVisible(true);
    }//GEN-LAST:event_btnBuscarEvaActionPerformed

    /**
     * Llama al método guardar evaluación.
     * @param evt 
     */
    private void btnCrearEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearEvaActionPerformed
        guardarEvaluacion();
    }//GEN-LAST:event_btnCrearEvaActionPerformed

    private void txtTallaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTallaKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
        && (c != '.')) {
        evt.consume();
        }
        if (c == '.' && txtTalla.getText().contains(".")) {
        evt.consume();
        }
    }//GEN-LAST:event_txtTallaKeyTyped

    private void txtPesoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesoKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
        && (c != '.')) {
        evt.consume();
        }
        if (c == '.' && txtPeso.getText().contains(".")) {
        evt.consume();
        }
    }//GEN-LAST:event_txtPesoKeyTyped

    /**
     * Búsqueda de los pacientes coincidentes según un carácter ingresado, en la ventana evaluación
     * @param evt 
     */
    private void btnBusquedaPacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaPacActionPerformed
        if(txtDocPac.getText() == null || txtDocPac.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de identificación del paciente", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcPaciente.removeAllItems();
                p = OpEvaluaciones.obtenerPacientes(txtDocPac.getText());
                Iterator it = p.keySet().iterator();
                if (p.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcPaciente.addItem("Seleccione");
                while(it.hasNext()){
                    jcPaciente.addItem(p.get(it.next()));
                }
                //txtDocPac.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(Evaluaciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaPacActionPerformed

    /**
     * Búsqueda de los profesionales coincidentes según un carácter ingresado, en la ventana evaluación
     * @param evt 
     */
    private void btnBusquedaProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaProfActionPerformed
        if(txtDocProf.getText() == null || txtDocProf.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de registro del profesional", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcProfesional.removeAllItems();
                pr = OpEvaluaciones.obtenerProfesionales(txtDocProf.getText());
                Iterator it = pr.keySet().iterator();
                if (pr.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcProfesional.addItem("Seleccione");
                while(it.hasNext()){
                    jcProfesional.addItem(pr.get(it.next()));
                }
                //txtDocProf.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(Evaluaciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaProfActionPerformed

    /**
     * Búsqueda de los pacientes coincidentes según un carácter ingresado, en la ventana estudio complementario
     * @param evt 
     */
    private void btnBusquedaEstComplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaEstComplActionPerformed
        if(txtDocPacEstCompl.getText() == null || txtDocPacEstCompl.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de identificación del paciente", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcPacienteEstCompl.removeAllItems();
                p = OpEvaluaciones.obtenerPacientes(txtDocPacEstCompl.getText());
                Iterator it = p.keySet().iterator();
                if (p.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcPacienteEstCompl.addItem("Seleccione");
                while(it.hasNext()){
                    jcPacienteEstCompl.addItem(p.get(it.next()));
                }
                //txtDocPacEstCompl.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(Evaluaciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaEstComplActionPerformed
    /**
     * Método que permite guardar el estudio complementario de un paciente
     * @param evt 
     */
    private void btnCrearEstComplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearEstComplActionPerformed
        try{
            String hc = txtNHCEstCompl.getText();
            ArrayList terapias = new ArrayList();
            
            if ((hc == null || hc.trim().isEmpty())) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un paciente a aplicar las terapias", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
            }else{
                t = OpEvaluaciones.obtenerTerapias();
                for (Map.Entry<String, String> ter : t.entrySet()){
                    if (jcheckFisioterapia.isSelected() == true) {
                        if (jcheckFisioterapia.getText().equals(ter.getValue())) {
                            terapias.add(ter.getKey());
                        }
                    }
                    if (jcheckFonoaudiologia.isSelected() == true) {
                        if (jcheckFonoaudiologia.getText().equals(ter.getValue())) {
                            terapias.add(ter.getKey());
                        }
                    }
                    if (jcheckPsicologia.isSelected() == true) {
                        if (jcheckPsicologia.getText().equals(ter.getValue())) {
                            terapias.add(ter.getKey());
                        }
                    }
                    if (jcheckEquinoterapia.isSelected() == true) {
                        if (jcheckEquinoterapia.getText().equals(ter.getValue())) {
                            terapias.add(ter.getKey());
                        }
                    }
                    if (jcheckEduEspecial.isSelected() == true) {
                        if (jcheckEduEspecial.getText().equals(ter.getValue())) {
                            terapias.add(ter.getKey());
                        }
                    }
                }
                if (terapias.size()>0) {
                    int a = OpEvaluaciones.guardarEstCompl(hc, terapias);
                    if(a == 0){
                        jcPacienteEstCompl.enable(true);
                        jcPacienteEstCompl.removeAllItems();
                        jcPacienteEstCompl.addItem("Seleccione");
                        txtDocPacEstCompl.enable(true);
                        txtDocPacEstCompl.setText("");
                        txtNHCEstCompl.setText("");
                        jcheckFonoaudiologia.enable(true);
                        jcheckFonoaudiologia.setSelected(false);
                        jcheckEquinoterapia.enable(true);
                        jcheckEquinoterapia.setSelected(false);
                        jcheckEduEspecial.enable(true);
                        jcheckEduEspecial.setSelected(false);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Debe seleccionar por lo menos una terapia", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }
            }
        }catch(SQLException ex){}
    }//GEN-LAST:event_btnCrearEstComplActionPerformed
    /**
     * Método que permite buscar el estudio complementario de un paciente especifico
     * @param evt 
     */
    private void btnBuscarEstComplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEstComplActionPerformed
        try{
            String hc = txtNHCEstCompl.getText();
            ArrayList terapias = new ArrayList();
            jcheckFonoaudiologia.setSelected(false);
            jcheckEquinoterapia.setSelected(false);
            jcheckEduEspecial.setSelected(false);
            
            if ((hc == null || hc.trim().isEmpty())) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un paciente a buscar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
            }else{
                terapias = OpEvaluaciones.obtenerTerapiasRegistros(hc);
                t = OpEvaluaciones.obtenerTerapias();
                if(!terapias.isEmpty()){
                    for (Map.Entry<String, String> ter : t.entrySet()){
                        for (int i = 0; i < terapias.size(); i++) {
                            jcheckFonoaudiologia.setEnabled(false);
                            if (terapias.get(i).equals(ter.getKey()) && jcheckFonoaudiologia.getText().equals(ter.getValue())) {
                                jcheckFonoaudiologia.setSelected(true);
                            }
                            jcheckEquinoterapia.setEnabled(false);
                            if (terapias.get(i).equals(ter.getKey()) && jcheckEquinoterapia.getText().equals(ter.getValue())) {
                                jcheckEquinoterapia.setSelected(true);
                            }
                            jcheckEduEspecial.setEnabled(false);
                            if (terapias.get(i).equals(ter.getKey()) && jcheckEduEspecial.getText().equals(ter.getValue())) {
                                jcheckEduEspecial.setSelected(true);
                            }
                        }
                    }
                    btnCrearEstCompl.setEnabled(false);
                }else{
                   JOptionPane.showMessageDialog(null, "El paciente solicitado no tiene asignado un estudio complementario", "Gestión Asdesilla", JOptionPane.WARNING_MESSAGE); 
                }
            }
        }catch(SQLException ex){}
    }//GEN-LAST:event_btnBuscarEstComplActionPerformed
    /**
     * Método que permite limpiar los campos del formulario estudio complementario
     * @param evt 
     */
    private void btnLimpiarEstComplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarEstComplActionPerformed
        jcPacienteEstCompl.setEnabled(true);
        jcPacienteEstCompl.removeAllItems();
        jcPacienteEstCompl.addItem("Seleccione");
        txtDocPacEstCompl.setEnabled(true);
        txtDocPacEstCompl.setText("");
        txtNHCEstCompl.setText("");
        jcheckFonoaudiologia.setEnabled(true);
        jcheckFonoaudiologia.setSelected(false);
        jcheckEquinoterapia.setEnabled(true);
        jcheckEquinoterapia.setSelected(false);
        jcheckEduEspecial.setEnabled(true);
        jcheckEduEspecial.setSelected(false);
        btnCrearEstCompl.setEnabled(true);
    }//GEN-LAST:event_btnLimpiarEstComplActionPerformed
    /**
     * Método que permite regresar al menú principal
     * @param evt 
     */
    private void btnSalirEstComplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirEstComplActionPerformed
        new Menu().setVisible(true);
        this.hide();
    }//GEN-LAST:event_btnSalirEstComplActionPerformed

    /**
     * Carga el código de la historia clinica asociada, según el paciente seleccionado, en la ventana evaluación
     * @param evt 
     */
    private void jcPacienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcPacienteItemStateChanged
        if(jcPaciente.getItemCount() > 0){
            if (!jcPaciente.getSelectedItem().equals("Seleccione")) {
                try {
                    p = OpEvaluaciones.consultarPacientes();
                    for (Map.Entry<Integer, String> historiaClinica : p.entrySet()){
                        if (jcPaciente.getSelectedItem().toString().equals(historiaClinica.getValue())) {
                            txtNHC.setText(String.valueOf(historiaClinica.getKey()));
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Evaluaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                txtNHC.setText("");
            }
        }
    }//GEN-LAST:event_jcPacienteItemStateChanged

    /**
     * Carga el código de la historia clinica asociada, según el paciente seleccionado, en la ventana estudio complementario
     * @param evt 
     */
    private void jcPacienteEstComplItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcPacienteEstComplItemStateChanged
        if(jcPacienteEstCompl.getItemCount() > 0){
            if (!jcPacienteEstCompl.getSelectedItem().equals("Seleccione")) {
                try {
                    p = OpEvaluaciones.consultarPacientes();
                    for (Map.Entry<Integer, String> historiaClinica : p.entrySet()){
                        if (jcPacienteEstCompl.getSelectedItem().toString().equals(historiaClinica.getValue())) {
                            txtNHCEstCompl.setText(String.valueOf(historiaClinica.getKey()));
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Evaluaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                txtNHCEstCompl.setText("");
            }
        }
    }//GEN-LAST:event_jcPacienteEstComplItemStateChanged

    private void txtFCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFCKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
        && (c != '.')) {
        evt.consume();
        }
        if (c == '.' && txtFC.getText().contains(".")) {
        evt.consume();
        }
    }//GEN-LAST:event_txtFCKeyTyped

    private void txtFRKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFRKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
        && (c != '.')) {
        evt.consume();
        }
        if (c == '.' && txtFR.getText().contains(".")) {
        evt.consume();
        }
    }//GEN-LAST:event_txtFRKeyTyped

    private void txtPAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPAKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
        && (c != '.')) {
        evt.consume();
        }
        if (c == '.' && txtPA.getText().contains(".")) {
        evt.consume();
        }
    }//GEN-LAST:event_txtPAKeyTyped

    private void txtIMCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIMCKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
        && (c != '.')) {
        evt.consume();
        }
        if (c == '.' && txtIMC.getText().contains(".")) {
        evt.consume();
        }
    }//GEN-LAST:event_txtIMCKeyTyped
    /**
     * Método que permite calcular el indice de masa corporal del paciente de acuerdo al peso y estatura ingresados
     * @param evt 
     */
    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        if ((txtPeso.getText() == null || txtPeso.getText().trim().isEmpty()) || (txtTalla.getText() == null || txtTalla.getText().trim().isEmpty())) {
            JOptionPane.showMessageDialog(null, "No se puede calcular el índice de masa corporal sin un peso y una talla", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            double peso = Double.parseDouble(txtPeso.getText());
            double alturaMetros = Double.parseDouble(txtTalla.getText())/100;
            double altura = Math.pow(alturaMetros, 2);
            double resultado = peso/altura;
            DecimalFormat df = new DecimalFormat("#.##");
            String imc = df.format(resultado);
            txtIMC.setText(imc);
        }
    }//GEN-LAST:event_btnCalcularActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Evaluaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Evaluaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Evaluaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Evaluaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Evaluaciones().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JDateChooser FechaEvaluacion;
    private com.toedter.calendar.JDateChooser FechaN;
    private javax.swing.JButton btnBuscarEstCompl;
    private javax.swing.JButton btnBuscarEva;
    private javax.swing.JButton btnBusquedaEstCompl;
    public static javax.swing.JButton btnBusquedaPac;
    public static javax.swing.JButton btnBusquedaProf;
    public static javax.swing.JButton btnCalcular;
    public static javax.swing.JButton btnCrearEstCompl;
    public static javax.swing.JButton btnCrearEva;
    private javax.swing.JButton btnLimpiarEstCompl;
    private javax.swing.JButton btnLimpiarEva;
    private javax.swing.JButton btnSalirEstCompl;
    private javax.swing.JButton btnSalirEva;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JComboBox jcPaciente;
    public static javax.swing.JComboBox jcPacienteEstCompl;
    public static javax.swing.JComboBox jcProfesional;
    private javax.swing.JCheckBox jcheckEduEspecial;
    private javax.swing.JCheckBox jcheckEquinoterapia;
    private javax.swing.JCheckBox jcheckFisioterapia;
    private javax.swing.JCheckBox jcheckFonoaudiologia;
    private javax.swing.JCheckBox jcheckPsicologia;
    private javax.swing.JLabel labelDiagMedicoEv;
    private javax.swing.JLabel labelDocEstCompl;
    private javax.swing.JLabel labelDocEv;
    private javax.swing.JLabel labelFCEv;
    private javax.swing.JLabel labelFREv;
    private javax.swing.JLabel labelFechaEv;
    private javax.swing.JLabel labelImcEv;
    private javax.swing.JLabel labelMotivoConsultaEv;
    private javax.swing.JLabel labelNHistoriaClinicaEstCompl;
    private javax.swing.JLabel labelNHistoriaClinicaEv;
    private javax.swing.JLabel labelObligatoriosEv;
    private javax.swing.JLabel labelPAEv;
    private javax.swing.JLabel labelPesoEv;
    private javax.swing.JLabel labelProfesionalEv;
    private javax.swing.JLabel labelTallaEv;
    private javax.swing.JLabel labelTituloEstCompl;
    private javax.swing.JLabel labelTituloEv;
    private javax.swing.JLabel labelTituloTerapiasEstCompl;
    private javax.swing.JLabel labelTratMedActualEv;
    public static javax.swing.JTextArea txtDiagMed;
    public static java.awt.TextField txtDocPac;
    public static java.awt.TextField txtDocPacEstCompl;
    public static java.awt.TextField txtDocProf;
    public static java.awt.TextField txtFC;
    public static java.awt.TextField txtFR;
    public static java.awt.TextField txtIMC;
    public static javax.swing.JTextArea txtMotivoConsulta;
    public static java.awt.TextField txtNHC;
    public static java.awt.TextField txtNHCEstCompl;
    public static java.awt.TextField txtPA;
    public static java.awt.TextField txtPeso;
    public static java.awt.TextField txtTalla;
    public static javax.swing.JTextArea txtTratMedActual;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que permite guardar la información de la evaluación de un paciente
     * con base en los datos ingresados.
     */
    public void guardarEvaluacion(){
        String diaFecha, mesFecha, annoFecha, fecha, hc, mc, diagnMed, tratMedActual, peso, fc, fr, pa, talla, imc, profesional;
        profesional = "Seleccione";
        
        diaFecha = String.valueOf(FechaEvaluacion.getCalendar().get(Calendar.DAY_OF_MONTH));
        mesFecha = String.valueOf(FechaEvaluacion.getCalendar().get(Calendar.MONTH) + 1);
        annoFecha = String.valueOf(FechaEvaluacion.getCalendar().get(Calendar.YEAR));
        fecha = diaFecha + "/" + mesFecha + "/" + annoFecha;
        hc = txtNHC.getText();
        
        mc = txtMotivoConsulta.getText();
        diagnMed = txtDiagMed.getText();
        tratMedActual = txtTratMedActual.getText();
        peso = txtPeso.getText();
        fc = txtFC.getText();
        fr = txtFR.getText();
        pa = txtPA.getText();
        talla = txtTalla.getText();
        imc = txtIMC.getText();
        if (!"Seleccione".equals(jcProfesional.getSelectedItem().toString())) {
            for (Map.Entry<String, String> profesionales : pr.entrySet()){
                String u = profesionales.getKey();
                if (jcProfesional.getSelectedItem().toString().equals(profesionales.getValue())) {
                    profesional = u;
                }
            }
        }

        if((hc == null || hc.trim().isEmpty()) || (mc == null || mc.trim().isEmpty()) || (diagnMed == null || diagnMed.trim().isEmpty()) || (tratMedActual == null || tratMedActual.trim().isEmpty()) || (peso == null || peso.trim().isEmpty()) || (fc == null || fc.trim().isEmpty()) || (fr == null || fr.trim().isEmpty()) || (pa == null || pa.trim().isEmpty()) || (talla == null || talla.trim().isEmpty()) ||(imc == null || imc.trim().isEmpty()) || (profesional.equals("Seleccione"))){
            JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(Double.parseDouble(peso) > 220 || Double.parseDouble(peso) < 12){
            peso = null;
            JOptionPane.showMessageDialog(null, "El peso máximo permitido es de 220 kilogramos y el mínimo permitido es de 12 kilogramos", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(Double.parseDouble(fc) > 210 || Double.parseDouble(fc) < 50){
            fc = null;
            JOptionPane.showMessageDialog(null, "La frecuencia cardiaca máxima permitida es de 210 y el mínimo permitido es de 50", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(Double.parseDouble(fr) > 70 || Double.parseDouble(fr) < 10){
            fr = null;
            JOptionPane.showMessageDialog(null, "La frecuencia respiratoria máxima permitida es de 70 y el mínimo permitido es de 10", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(Double.parseDouble(pa) > 230 || Double.parseDouble(pa) < 35){
            pa = null;
            JOptionPane.showMessageDialog(null, "La presión arterial máxima permitida es de 230 y el mínimo permitido es de 35", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(Double.parseDouble(talla) > 210 || Double.parseDouble(talla) < 60){
            talla = null;
            JOptionPane.showMessageDialog(null, "La talla máxima permitida es de 210 cm y el mínimo permitido es de 60 cm", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            int a = OpEvaluaciones.guardar(fecha, hc, mc, diagnMed, tratMedActual, peso, fc, fr, pa, talla, imc, profesional);
            if (a == 0) {
                FechaEvaluacion.setDate(new Date());
                jcPaciente.removeAllItems();
                jcPaciente.addItem("Seleccione");
                txtNHC.setText("");
                txtMotivoConsulta.setText("");
                txtDiagMed.setText("");
                txtTratMedActual.setText("");
                txtPeso.setText("");
                txtFC.setText("");
                txtFR.setText("");
                txtPA.setText("");
                txtTalla.setText("");
                txtIMC.setText("");
                jcProfesional.removeAllItems();
                jcProfesional.addItem("Seleccione");
                txtDocPac.setText("");
                txtDocProf.setText("");
            }
        }
    }
}
