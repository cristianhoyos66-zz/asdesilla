/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AccesoDatos.OpPacientes;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Esta clase permite pintar la ventana para la búsqueda de los registros de Pacientes
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class PacientesRegistros extends javax.swing.JFrame {
    DefaultTableModel dtm;
    Map<String, String> p;
    TreeMap<Integer, String> gf;

    public PacientesRegistros() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/Imagenes/Patients-icon.png")).getImage());
        dtm = (DefaultTableModel) Registros.getModel();
        if(dtm.getRowCount()!=0){
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
                i-=1;
            }
        }
        try{
            ArrayList <Object[]> l = OpPacientes.obtenerRegistros();
            for (int i = 0; i < l.size(); i++) {
                dtm.addRow(l.get(i));
            }
        }catch(Exception e){
            System.out.println("Error: "+e);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        Registros = new javax.swing.JTable();
        jcPaciente = new javax.swing.JComboBox();
        labelDoc = new javax.swing.JLabel();
        btnBusqueda = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnDetalles = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        txtDocPac = new java.awt.TextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(952, 570));
        setResizable(false);
        getContentPane().setLayout(null);

        Registros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificación", "Nombre", "Primer Apellido", "Segundo Apellido", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Registros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RegistrosMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(Registros);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 250, 930, 280);

        jcPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcPaciente);
        jcPaciente.setBounds(580, 90, 200, 27);

        labelDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDoc.setText("Documento Paciente:");
        getContentPane().add(labelDoc);
        labelDoc.setBounds(190, 90, 115, 15);

        btnBusqueda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusqueda.setToolTipText("La búsqueda se  puede generar a partir de los primeros números del documento");
        btnBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaActionPerformed(evt);
            }
        });
        getContentPane().add(btnBusqueda);
        btnBusqueda.setBounds(510, 80, 50, 30);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(100, 170, 125, 34);

        btnDetalles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/more-details-icon.png"))); // NOI18N
        btnDetalles.setText("Ver detalles");
        btnDetalles.setEnabled(false);
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });
        getContentPane().add(btnDetalles);
        btnDetalles.setBounds(240, 170, 140, 34);

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disable-icon.png"))); // NOI18N
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar);
        btnEliminar.setBounds(400, 170, 140, 34);

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(560, 170, 137, 34);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir);
        btnSalir.setBounds(720, 170, 137, 34);
        getContentPane().add(txtDocPac);
        txtDocPac.setBounds(320, 90, 180, 19);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 960, 550);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Habilita el botón Ver detalles en caso de que se seleccione algún registro en la tabla.
     * @param evt 
     */
    private void RegistrosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegistrosMousePressed
        btnDetalles.setEnabled(true);
        if (InicioSesion.r.equals("2")) {
            btnEliminar.setEnabled(false);
            btnEliminar.setText("Deshabilitar");
            btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
        }else{
            String estado = Registros.getValueAt(Registros.getSelectedRow(), 4).toString();
            if (estado.equals("Activo")) {
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
            }else{
                btnEliminar.setText("Habilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/enable-icon.png")));
            }
            btnEliminar.setEnabled(true);
        }
    }//GEN-LAST:event_RegistrosMousePressed

    /**
     * Búsqueda de los pacientes coincidentes según un carácter ingresado
     * @param evt 
     */
    private void btnBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaActionPerformed
        if(txtDocPac.getText() == null || txtDocPac.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de identificación del paciente", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcPaciente.removeAllItems();
                p = OpPacientes.obtenerPacientes(txtDocPac.getText());
                Iterator it = p.keySet().iterator();
                if (p.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcPaciente.addItem("Seleccione");
                while(it.hasNext()){
                    jcPaciente.addItem(p.get(it.next()));
                }
                //txtDocPac.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(PacientesRegistros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaActionPerformed
    /**
     * Llama al método buscar
     * @param evt 
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscar();
    }//GEN-LAST:event_btnBuscarActionPerformed
    /**
     * Obtiene la información del paciente de acuerdo a los datos de la tabla
     * y los asigna al formulario, además deshabilita el botón Crear
     * y habilita el botón modificar
     * @param evt 
     */
    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed
        try {
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String identificacion = Registros.getValueAt(Registros.getSelectedRow(), 0).toString();
            
            OpPacientes.buscar(identificacion);
            Pacientes.txtNdoc.enable(false);
            Pacientes.txtNdoc.setText(OpPacientes.getid());
            if (InicioSesion.r.equals("2")) {
                TreeMap<Integer, String> t = OpPacientes.obtenerTipoDoc();
                for (Map.Entry<Integer, String> tipoDocs : t.entrySet()){
                    if (Integer.parseInt(OpPacientes.gettipoId()) == tipoDocs.getKey()) {
                        Pacientes.jcTipoDoc.setEnabled(false);
                        Pacientes.jcTipoDoc.setSelectedItem(tipoDocs.getValue());
                    }
                }
                Pacientes.txtLExp.setEnabled(false);
                Pacientes.txtLExp.setText(OpPacientes.getlugarExpedicion());
                Pacientes.txtNombre.setEnabled(false);
                Pacientes.txtNombre.setText(OpPacientes.getnombre());
                Pacientes.txtApellido1.setEnabled(false);
                Pacientes.txtApellido1.setText(OpPacientes.getApellido1());
                Pacientes.txtApellido2.setEnabled(false);
                Pacientes.txtApellido2.setText(OpPacientes.getApellido2());
                Pacientes.FechaN.setEnabled(false);
                Pacientes.FechaN.setDate(formatoFecha.parse(OpPacientes.getfechaNacimiento()));
                
                TreeMap<Integer, String> g = OpPacientes.obtenerGeneros();
                for (Map.Entry<Integer, String> generos : g.entrySet()){
                    if (Integer.parseInt(OpPacientes.getgenero()) == generos.getKey()) {
                        Pacientes.jcGenero.setEnabled(false);
                        Pacientes.jcGenero.setSelectedItem(generos.getValue());
                    }
                }
                
                TreeMap<Integer, String> ec = OpPacientes.obtenerEstadoCivil();
                for (Map.Entry<Integer, String> estCivil : ec.entrySet()){
                    if (Integer.parseInt(OpPacientes.getestadoCivil()) == estCivil.getKey()) {
                        Pacientes.jcestadoCivil.setEnabled(false);
                        Pacientes.jcestadoCivil.setSelectedItem(estCivil.getValue());
                    }
                }
                
                TreeMap<Integer, String> d = OpPacientes.obtenerDepartamentos();
                for (Map.Entry<Integer, String> dep : d.entrySet()){
                    if (Integer.parseInt(OpPacientes.getDepartamento()) == dep.getKey()) {
                        Pacientes.jcDepartamento.setEnabled(false);
                        Pacientes.jcDepartamento.setSelectedItem(dep.getValue());
                    }
                }
                
                TreeMap<Integer, String> m = OpPacientes.obtenerMunicipios(OpPacientes.getDepartamento());
                
                for (Map.Entry<Integer, String> mun : m.entrySet()){
                    if (Integer.parseInt(OpPacientes.getmunicipio()) == mun.getKey()) {
                        Pacientes.jcMunicipio.setEnabled(false);
                        Pacientes.jcMunicipio.setSelectedItem(mun.getValue());
                    }
                }
                
                Pacientes.txtBarrio.setEnabled(false);
                Pacientes.txtBarrio.setText(OpPacientes.getbarrio());
                Pacientes.txtDRes.setEnabled(false);
                Pacientes.txtDRes.setText(OpPacientes.getdireccion());
                Pacientes.txtTelefono.setEnabled(false);
                Pacientes.txtTelefono.setText(OpPacientes.gettelefono());
                Pacientes.txtCelular.setEnabled(false);
                Pacientes.txtCelular.setText(OpPacientes.getcelular());
                Pacientes.txtOcupacion.setEnabled(false);
                Pacientes.txtOcupacion.setText(OpPacientes.getocupacion());
                
                TreeMap<Integer, String> e = OpPacientes.obtenerEps();
                for (Map.Entry<Integer, String> eps : e.entrySet()){
                    if (Integer.parseInt(OpPacientes.getEps()) == eps.getKey()) {
                        Pacientes.jcEPS.setEnabled(false);
                        Pacientes.jcEPS.setSelectedItem(eps.getValue());
                    }
                }
                TreeMap<Integer, String> tr = OpPacientes.obtenerTipoRemision();
                for (Map.Entry<Integer, String> tipoRemision : tr.entrySet()){
                    if (Integer.parseInt(OpPacientes.getTipoRemision()) == tipoRemision.getKey()) {
                        Pacientes.jcTipoRemision.setEnabled(false);
                        Pacientes.jcTipoRemision.setSelectedItem(tipoRemision.getValue());
                    }
                }
                Pacientes.txtRemitidoPor.setEnabled(false);
                Pacientes.txtRemitidoPor.setText(OpPacientes.getRemitidoPor());
                Pacientes.txtDocFam.setEnabled(false);
                Pacientes.btnBusqueda.setEnabled(false);
                Pacientes.jcFamiliar.setEnabled(false);
                
                Map<Integer, String> gf = OpPacientes.obtenerGrupoFamiliar(identificacion);
                for (Map.Entry<Integer, String> grupF : gf.entrySet()){
                    Pacientes.jcFamiliar.addItem(grupF.getValue());
                    Pacientes.jcFamiliar.setSelectedItem(grupF.getValue());
                }
                
                Pacientes.txtAntPNatales.setEnabled(false);
                Pacientes.txtAntPNatales.setText(OpPacientes.getAntPNatales());
                Pacientes.txtAntMedicos.setEnabled(false);
                Pacientes.txtAntMedicos.setText(OpPacientes.getAntMedicos());
                Pacientes.txtAntFamiliares.setEnabled(false);
                Pacientes.txtAntFamiliares.setText(OpPacientes.getAntFamiliares());
                Pacientes.txtAntQuirurgicos.setEnabled(false);
                Pacientes.txtAntQuirurgicos.setText(OpPacientes.getAntQuirurgicos());
                Pacientes.txtOtrosAnt.setEnabled(false);
                Pacientes.txtOtrosAnt.setText(OpPacientes.getOtrosAnt());
                Pacientes.jcDiscapacidad.setEnabled(false);
                Pacientes.jcDiscapacidad.setSelectedItem(OpPacientes.getReqAcomp());
                Pacientes.btnModificar.setEnabled(false);
                Pacientes.btnEliminar.setEnabled(false);
                Pacientes.btnEliminar.setText("Deshabilitar");
                Pacientes.btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
        }else{
                if (OpPacientes.getEstado().equals("Activo")) {
                    TreeMap<Integer, String> t = OpPacientes.obtenerTipoDoc();
                    for (Map.Entry<Integer, String> tipoDocs : t.entrySet()){
                        if (Integer.parseInt(OpPacientes.gettipoId()) == tipoDocs.getKey()) {
                            Pacientes.jcTipoDoc.setEnabled(true);
                            Pacientes.jcTipoDoc.setSelectedItem(tipoDocs.getValue());
                        }
                    }
                    Pacientes.txtLExp.setEnabled(true);
                    Pacientes.txtLExp.setText(OpPacientes.getlugarExpedicion());
                    Pacientes.txtNombre.setEnabled(true);
                    Pacientes.txtNombre.setText(OpPacientes.getnombre());
                    Pacientes.txtApellido1.setEnabled(true);
                    Pacientes.txtApellido1.setText(OpPacientes.getApellido1());
                    Pacientes.txtApellido2.setEnabled(true);
                    Pacientes.txtApellido2.setText(OpPacientes.getApellido2());
                    Pacientes.FechaN.setEnabled(true);
                    Pacientes.FechaN.getDateEditor().setEnabled(false);
                    Pacientes.FechaN.setDate(formatoFecha.parse(OpPacientes.getfechaNacimiento()));
                    
                    TreeMap<Integer, String> g = OpPacientes.obtenerGeneros();
                    for (Map.Entry<Integer, String> generos : g.entrySet()){
                        if (Integer.parseInt(OpPacientes.getgenero()) == generos.getKey()) {
                            Pacientes.jcGenero.setEnabled(true);
                            Pacientes.jcGenero.setSelectedItem(generos.getValue());
                        }
                    }
                    
                    TreeMap<Integer, String> ec = OpPacientes.obtenerEstadoCivil();
                    for (Map.Entry<Integer, String> estCivil : ec.entrySet()){
                        if (Integer.parseInt(OpPacientes.getestadoCivil()) == estCivil.getKey()) {
                            Pacientes.jcestadoCivil.setEnabled(true);
                            Pacientes.jcestadoCivil.setSelectedItem(estCivil.getValue());
                        }
                    }
                    
                    TreeMap<Integer, String> d = OpPacientes.obtenerDepartamentos();
                    for (Map.Entry<Integer, String> dep : d.entrySet()){
                        if (Integer.parseInt(OpPacientes.getDepartamento()) == dep.getKey()) {
                            Pacientes.jcDepartamento.setEnabled(true);
                            Pacientes.jcDepartamento.setSelectedItem(dep.getValue());
                        }
                    }
                    
                    TreeMap<Integer, String> m = OpPacientes.obtenerMunicipios(OpPacientes.getDepartamento());
                    
                    for (Map.Entry<Integer, String> mun : m.entrySet()){
                        if (Integer.parseInt(OpPacientes.getmunicipio()) == mun.getKey()) {
                            Pacientes.jcMunicipio.setEnabled(true);
                            Pacientes.jcMunicipio.setSelectedItem(mun.getValue());
                        }
                    }
                    
                    Pacientes.txtBarrio.setEnabled(true);
                    Pacientes.txtBarrio.setText(OpPacientes.getbarrio());
                    Pacientes.txtDRes.setEnabled(true);
                    Pacientes.txtDRes.setText(OpPacientes.getdireccion());
                    Pacientes.txtTelefono.setEnabled(true);
                    Pacientes.txtTelefono.setText(OpPacientes.gettelefono());
                    Pacientes.txtCelular.setEnabled(true);
                    Pacientes.txtCelular.setText(OpPacientes.getcelular());
                    Pacientes.txtOcupacion.setEnabled(true);
                    Pacientes.txtOcupacion.setText(OpPacientes.getocupacion());
                    
                    TreeMap<Integer, String> e = OpPacientes.obtenerEps();
                    for (Map.Entry<Integer, String> eps : e.entrySet()){
                        if (Integer.parseInt(OpPacientes.getEps()) == eps.getKey()) {
                            Pacientes.jcEPS.setEnabled(true);
                            Pacientes.jcEPS.setSelectedItem(eps.getValue());
                        }
                    }
                    TreeMap<Integer, String> tr = OpPacientes.obtenerTipoRemision();
                    for (Map.Entry<Integer, String> tipoRemision : tr.entrySet()){
                        if (Integer.parseInt(OpPacientes.getTipoRemision()) == tipoRemision.getKey()) {
                            Pacientes.jcTipoRemision.setEnabled(false);
                            Pacientes.jcTipoRemision.setSelectedItem(tipoRemision.getValue());
                        }
                    }
                    Pacientes.txtRemitidoPor.setEnabled(false);
                    Pacientes.txtRemitidoPor.setText(OpPacientes.getRemitidoPor());
                    Pacientes.jcFamiliar.setEnabled(true);
                    Pacientes.txtDocFam.setEnabled(true);
                    Pacientes.btnBusqueda.setEnabled(true);
                    
                    Map<Integer, String> gf = OpPacientes.obtenerGrupoFamiliar(identificacion);
                    for (Map.Entry<Integer, String> grupF : gf.entrySet()){
                        Pacientes.jcFamiliar.addItem(grupF.getValue());
                        Pacientes.jcFamiliar.setSelectedItem(grupF.getValue());
                    }
                    Pacientes.txtAntPNatales.setEnabled(true);
                    Pacientes.txtAntPNatales.setText(OpPacientes.getAntPNatales());
                    Pacientes.txtAntMedicos.setEnabled(true);
                    Pacientes.txtAntMedicos.setText(OpPacientes.getAntMedicos());
                    Pacientes.txtAntFamiliares.setEnabled(true);
                    Pacientes.txtAntFamiliares.setText(OpPacientes.getAntFamiliares());
                    Pacientes.txtAntQuirurgicos.setEnabled(true);
                    Pacientes.txtAntQuirurgicos.setText(OpPacientes.getAntQuirurgicos());
                    Pacientes.txtOtrosAnt.setEnabled(true);
                    Pacientes.txtOtrosAnt.setText(OpPacientes.getOtrosAnt());
                    Pacientes.jcDiscapacidad.setEnabled(true);
                    Pacientes.jcDiscapacidad.setSelectedItem(OpPacientes.getReqAcomp());
                    Pacientes.btnModificar.setEnabled(true);
                    Pacientes.btnEliminar.setEnabled(true);
                    Pacientes.btnEliminar.setText("Deshabilitar");
                    Pacientes.btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                }else{
                    TreeMap<Integer, String> t = OpPacientes.obtenerTipoDoc();
                    for (Map.Entry<Integer, String> tipoDocs : t.entrySet()){
                        if (Integer.parseInt(OpPacientes.gettipoId()) == tipoDocs.getKey()) {
                            Pacientes.jcTipoDoc.setEnabled(false);
                            Pacientes.jcTipoDoc.setSelectedItem(tipoDocs.getValue());
                        }
                    }
                    Pacientes.txtLExp.setEnabled(false);
                    Pacientes.txtLExp.setText(OpPacientes.getlugarExpedicion());
                    Pacientes.txtNombre.setEnabled(false);
                    Pacientes.txtNombre.setText(OpPacientes.getnombre());
                    Pacientes.txtApellido1.setEnabled(false);
                    Pacientes.txtApellido1.setText(OpPacientes.getApellido1());
                    Pacientes.txtApellido2.setEnabled(false);
                    Pacientes.txtApellido2.setText(OpPacientes.getApellido2());
                    Pacientes.FechaN.setEnabled(false);
                    Pacientes.FechaN.getDateEditor().setEnabled(false);
                    Pacientes.FechaN.setDate(formatoFecha.parse(OpPacientes.getfechaNacimiento()));
                    
                    TreeMap<Integer, String> g = OpPacientes.obtenerGeneros();
                    for (Map.Entry<Integer, String> generos : g.entrySet()){
                        if (Integer.parseInt(OpPacientes.getgenero()) == generos.getKey()) {
                            Pacientes.jcGenero.setEnabled(false);
                            Pacientes.jcGenero.setSelectedItem(generos.getValue());
                        }
                    }
                    
                    TreeMap<Integer, String> ec = OpPacientes.obtenerEstadoCivil();
                    for (Map.Entry<Integer, String> estCivil : ec.entrySet()){
                        if (Integer.parseInt(OpPacientes.getestadoCivil()) == estCivil.getKey()) {
                            Pacientes.jcestadoCivil.setEnabled(false);
                            Pacientes.jcestadoCivil.setSelectedItem(estCivil.getValue());
                        }
                    }
                    
                    TreeMap<Integer, String> d = OpPacientes.obtenerDepartamentos();
                    for (Map.Entry<Integer, String> dep : d.entrySet()){
                        if (Integer.parseInt(OpPacientes.getDepartamento()) == dep.getKey()) {
                            Pacientes.jcDepartamento.setEnabled(false);
                            Pacientes.jcDepartamento.setSelectedItem(dep.getValue());
                        }
                    }
                    
                    TreeMap<Integer, String> m = OpPacientes.obtenerMunicipios(OpPacientes.getDepartamento());
                    
                    for (Map.Entry<Integer, String> mun : m.entrySet()){
                        if (Integer.parseInt(OpPacientes.getmunicipio()) == mun.getKey()) {
                            Pacientes.jcMunicipio.setEnabled(false);
                            Pacientes.jcMunicipio.setSelectedItem(mun.getValue());
                        }
                    }
                    
                    Pacientes.txtBarrio.setEnabled(false);
                    Pacientes.txtBarrio.setText(OpPacientes.getbarrio());
                    Pacientes.txtDRes.setEnabled(false);
                    Pacientes.txtDRes.setText(OpPacientes.getdireccion());
                    Pacientes.txtTelefono.setEnabled(false);
                    Pacientes.txtTelefono.setText(OpPacientes.gettelefono());
                    Pacientes.txtCelular.setEnabled(false);
                    Pacientes.txtCelular.setText(OpPacientes.getcelular());
                    Pacientes.txtOcupacion.setEnabled(false);
                    Pacientes.txtOcupacion.setText(OpPacientes.getocupacion());
                    
                    TreeMap<Integer, String> e = OpPacientes.obtenerEps();
                    for (Map.Entry<Integer, String> eps : e.entrySet()){
                        if (Integer.parseInt(OpPacientes.getEps()) == eps.getKey()) {
                            Pacientes.jcEPS.setEnabled(false);
                            Pacientes.jcEPS.setSelectedItem(eps.getValue());
                        }
                    }
                    TreeMap<Integer, String> tr = OpPacientes.obtenerTipoRemision();
                    for (Map.Entry<Integer, String> tipoRemision : tr.entrySet()){
                        if (Integer.parseInt(OpPacientes.getTipoRemision()) == tipoRemision.getKey()) {
                            Pacientes.jcTipoRemision.setEnabled(false);
                            Pacientes.jcTipoRemision.setSelectedItem(tipoRemision.getValue());
                        }
                    }
                    Pacientes.txtRemitidoPor.setEnabled(false);
                    Pacientes.txtRemitidoPor.setText(OpPacientes.getRemitidoPor());
                    Pacientes.txtDocFam.setEnabled(false);
                    Pacientes.btnBusqueda.setEnabled(false);
                    Pacientes.jcFamiliar.setEnabled(false);
                    
                    Map<Integer, String> gf = OpPacientes.obtenerGrupoFamiliar(identificacion);
                    for (Map.Entry<Integer, String> grupF : gf.entrySet()){
                        Pacientes.jcFamiliar.addItem(grupF.getValue());
                        Pacientes.jcFamiliar.setSelectedItem(grupF.getValue());
                    }
                    Pacientes.txtAntPNatales.setEnabled(false);
                    Pacientes.txtAntPNatales.setText(OpPacientes.getAntPNatales());
                    Pacientes.txtAntMedicos.setEnabled(false);
                    Pacientes.txtAntMedicos.setText(OpPacientes.getAntMedicos());
                    Pacientes.txtAntFamiliares.setEnabled(false);
                    Pacientes.txtAntFamiliares.setText(OpPacientes.getAntFamiliares());
                    Pacientes.txtAntQuirurgicos.setEnabled(false);
                    Pacientes.txtAntQuirurgicos.setText(OpPacientes.getAntQuirurgicos());
                    Pacientes.txtOtrosAnt.setEnabled(false);
                    Pacientes.txtOtrosAnt.setText(OpPacientes.getOtrosAnt());
                    Pacientes.jcDiscapacidad.setEnabled(false);
                    Pacientes.jcDiscapacidad.setSelectedItem(OpPacientes.getReqAcomp());
                    Pacientes.btnModificar.setEnabled(false);
                    Pacientes.btnEliminar.setEnabled(true);
                    Pacientes.btnEliminar.setText("Habilitar");
                    Pacientes.btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/enable-icon.png")));
                }
            }
            
            OpPacientes.setid("");
            OpPacientes.settipoId("");
            OpPacientes.setlugarExpedicion("");
            OpPacientes.setnombre("");
            OpPacientes.setApellido1("");
            OpPacientes.setApellido2("");
            OpPacientes.setfechaNacimiento("");
            OpPacientes.setgenero("");
            OpPacientes.setestadoCivil("");
            OpPacientes.setmunicipio("");
            OpPacientes.setbarrio("");
            OpPacientes.setdireccion("");
            OpPacientes.settelefono("");
            OpPacientes.setcelular("");
            OpPacientes.setocupacion("");
            OpPacientes.setEps("");
            OpPacientes.setAntPNatales("");
            OpPacientes.setAntMedicos("");
            OpPacientes.setAntFamiliares("");
            OpPacientes.setAntQuirurgicos("");
            OpPacientes.setOtrosAnt("");
            OpPacientes.setTipoRemision("");
            OpPacientes.setRemitidoPor("");
            OpPacientes.setReqAcomp("");
            Pacientes.btnCrear.setEnabled(false);
            
            this.setVisible(false);
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(PacientesRegistros.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDetallesActionPerformed
    /**
     * Llama al método cambiar estado
     * @param evt 
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        cambiarEstado();
    }//GEN-LAST:event_btnEliminarActionPerformed
    /**
     * Limpia los campos del formulario, asignandoles el valor por defecto
     * @param evt 
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        jcPaciente.removeAllItems();
        jcPaciente.addItem("Seleccione");
        txtDocPac.setText("");
        btnDetalles.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
        if(dtm.getRowCount()!=0){
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
                i-=1;
            }
        }
        try{
            ArrayList <Object[]> l = OpPacientes.obtenerRegistros();
            for (int i = 0; i < l.size(); i++) {
                dtm.addRow(l.get(i));
            }
        }catch(Exception e){
            System.out.println("Error: "+e);
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed
    /**
     * Cierra la ventana de registros.
     * @param evt 
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.hide();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PacientesRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PacientesRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PacientesRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PacientesRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PacientesRegistros().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Registros;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBusqueda;
    private javax.swing.JButton btnDetalles;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox jcPaciente;
    private javax.swing.JLabel labelDoc;
    private java.awt.TextField txtDocPac;
    // End of variables declaration//GEN-END:variables
    /**
     * Método que permite buscar un registro de un paciente de acuerdo al número de identificación digitado
     * y muestra la información obtenida en la tabla de registros.
     */
    public void buscar() {
        String id;
        ArrayList <Object[]> l;
        id = null;
        
        if (!"Seleccione".equals(jcPaciente.getSelectedItem().toString())) {
            for (Map.Entry<String, String> pacientes : p.entrySet()){
                String u = pacientes.getKey();
                if (jcPaciente.getSelectedItem().toString().equals(pacientes.getValue())) {
                    id = u;
                }
            }
        }
        
        if(id == null){
            JOptionPane.showMessageDialog(null, "Debe seleccionar un paciente a buscar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            l = OpPacientes.buscarRegistros(id);
            if(l.size()>0){
                btnDetalles.setEnabled(false);
                btnEliminar.setEnabled(false);
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                if(dtm.getRowCount()!=0){
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        dtm.removeRow(i);
                        i-=1;
                    }
                }
                try{
                    for (int i = 0; i < l.size(); i++) {
                        dtm.addRow(l.get(i));
                    }
                }catch(Exception e){
                    System.out.println("Error: "+e);
                }
            }
        }
    }
    
    /**
     * Método que permite cambiar el estado de un registro de paciente
     */
    public void cambiarEstado() {
        String identificacion = Registros.getValueAt(Registros.getSelectedRow(), 0).toString();
        if (identificacion == null || identificacion.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe diligenciar el campo número de documento del paciente a cambiar el estado", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }

        if (!identificacion.trim().isEmpty()) {
            JOptionPane x = new JOptionPane();
            if(x.showConfirmDialog(null,"Está seguro que desea cambiar el estado de este registro?")==0){
                OpPacientes.cambiarEstado(identificacion);
                jcPaciente.removeAllItems();
                jcPaciente.addItem("Seleccione");
                btnDetalles.setEnabled(false);
                btnEliminar.setEnabled(false);
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                if(dtm.getRowCount()!=0){
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        dtm.removeRow(i);
                        i-=1;
                    }
                }
                try{
                    ArrayList <Object[]> l = OpPacientes.obtenerRegistros();
                    for (int i = 0; i < l.size(); i++) {
                        dtm.addRow(l.get(i));
                    }
                }catch(Exception e){
                    System.out.println("Error: "+e);
                }
            }
        }
    }
}
