/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AccesoDatos.OpProfesionales;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Esta clase permite pintar la ventana Profesionales, con sus respectivos componentes, para el manejo de dicha información
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class Profesionales extends javax.swing.JFrame {
    TreeMap<Integer, String> td;
    TreeMap<Integer, String> g;
    TreeMap<Integer, String> d;
    TreeMap<Integer, String> m;
    TreeMap<Integer, String> o;
    TreeMap<Integer, String> h;
    
    public Profesionales() {
        try {
            initComponents();
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DATE, -1);
            Date date = cal.getTime();
            FechaN.setMaxSelectableDate(date);
            FechaN.getDateEditor().setEnabled(false);
            td = OpProfesionales.obtenerTipoDoc();
            Iterator t = td.keySet().iterator();
            while(t.hasNext()){
                jcTipoDoc.addItem(td.get(t.next()));
            }
            
            g = OpProfesionales.obtenerGeneros();
            Iterator l = g.keySet().iterator();
            while(l.hasNext()){
                jcGenero.addItem(g.get(l.next()));
            }
            
            d = OpProfesionales.obtenerDepartamentos();
            Iterator dep = d.keySet().iterator();
            while(dep.hasNext()){
                jcDepartamento.addItem(d.get(dep.next()));
            }
            
            o = OpProfesionales.obtenerCargos();
            Iterator oc = o.keySet().iterator();
            while(oc.hasNext()){
                jcCargo.addItem(o.get(oc.next()));
            }
            
            h = OpProfesionales.obtenerHorarioLaboral();
            Iterator hl = h.keySet().iterator();
            while(hl.hasNext()){
                jcHLaboral.addItem(h.get(hl.next()));
            }
            setIconImage (new ImageIcon(getClass().getResource("/Imagenes/professional-icon.png")).getImage());
            FechaN.setDate(new Date());
        } catch (SQLException ex) {
            Logger.getLogger(Profesionales.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelNombre = new javax.swing.JLabel();
        txtNombre = new java.awt.TextField();
        labelNDoc = new javax.swing.JLabel();
        txtNdoc = new java.awt.TextField();
        labelTDoc = new javax.swing.JLabel();
        jcTipoDoc = new javax.swing.JComboBox();
        labelFechaN = new javax.swing.JLabel();
        FechaN = new com.toedter.calendar.JDateChooser();
        labelTelefono = new javax.swing.JLabel();
        labelCelular = new javax.swing.JLabel();
        txtCelular = new java.awt.TextField();
        labelMunicipio = new javax.swing.JLabel();
        labelBarrio = new javax.swing.JLabel();
        txtTelefono = new java.awt.TextField();
        labelDireccion = new javax.swing.JLabel();
        labelCargo = new javax.swing.JLabel();
        jcCargo = new javax.swing.JComboBox();
        labelHorarioLaboral = new javax.swing.JLabel();
        jcHLaboral = new javax.swing.JComboBox();
        labelTitulo = new javax.swing.JLabel();
        btnCrear = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        labelGenero = new javax.swing.JLabel();
        jcGenero = new javax.swing.JComboBox();
        labelObligatorios = new javax.swing.JLabel();
        labelAp1 = new javax.swing.JLabel();
        txtApellido1 = new java.awt.TextField();
        labelAp2 = new javax.swing.JLabel();
        txtApellido2 = new java.awt.TextField();
        txtDRes = new java.awt.TextField();
        txtBarrio = new java.awt.TextField();
        labelDepartamento = new javax.swing.JLabel();
        labelNreg = new javax.swing.JLabel();
        txtNRegistro = new java.awt.TextField();
        jcDepartamento = new javax.swing.JComboBox();
        jcMunicipio = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Profesionales");
        setMinimumSize(new java.awt.Dimension(1100, 630));
        setResizable(false);
        getContentPane().setLayout(null);

        labelNombre.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNombre.setText("*Nombre:");
        getContentPane().add(labelNombre);
        labelNombre.setBounds(600, 190, 60, 15);
        getContentPane().add(txtNombre);
        txtNombre.setBounds(800, 190, 218, 19);

        labelNDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNDoc.setText("*Número de documento:");
        getContentPane().add(labelNDoc);
        labelNDoc.setBounds(600, 140, 140, 15);
        getContentPane().add(txtNdoc);
        txtNdoc.setBounds(800, 140, 219, 19);

        labelTDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTDoc.setText("*Tipo de documento:");
        getContentPane().add(labelTDoc);
        labelTDoc.setBounds(40, 190, 123, 15);

        jcTipoDoc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcTipoDoc);
        jcTipoDoc.setBounds(210, 190, 140, 27);

        labelFechaN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelFechaN.setText("*Fecha de nacimiento:");
        getContentPane().add(labelFechaN);
        labelFechaN.setBounds(40, 290, 141, 15);

        FechaN.setDateFormatString("dd-MM-yyyy");
        FechaN.setMaxSelectableDate(new Date());
        FechaN.setName("FechaN"); // NOI18N
        getContentPane().add(FechaN);
        FechaN.setBounds(210, 290, 210, 22);

        labelTelefono.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTelefono.setText("Teléfono:");
        getContentPane().add(labelTelefono);
        labelTelefono.setBounds(40, 440, 60, 15);

        labelCelular.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelCelular.setText("Celula:");
        getContentPane().add(labelCelular);
        labelCelular.setBounds(600, 440, 50, 15);

        txtCelular.setBackground(new java.awt.Color(255, 255, 255));
        txtCelular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCelularKeyTyped(evt);
            }
        });
        getContentPane().add(txtCelular);
        txtCelular.setBounds(800, 440, 210, 19);

        labelMunicipio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelMunicipio.setText("*Municipio:");
        getContentPane().add(labelMunicipio);
        labelMunicipio.setBounds(600, 340, 60, 15);

        labelBarrio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelBarrio.setText("*Barrio:");
        getContentPane().add(labelBarrio);
        labelBarrio.setBounds(40, 390, 67, 15);

        txtTelefono.setBackground(new java.awt.Color(255, 255, 255));
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });
        getContentPane().add(txtTelefono);
        txtTelefono.setBounds(210, 440, 210, 19);

        labelDireccion.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDireccion.setText("*Dirección de residencia:");
        getContentPane().add(labelDireccion);
        labelDireccion.setBounds(600, 390, 140, 15);

        labelCargo.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelCargo.setText("*Cargo:");
        getContentPane().add(labelCargo);
        labelCargo.setBounds(40, 490, 50, 15);

        jcCargo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcCargo);
        jcCargo.setBounds(210, 490, 210, 27);

        labelHorarioLaboral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelHorarioLaboral.setText("*Horario laboral:");
        getContentPane().add(labelHorarioLaboral);
        labelHorarioLaboral.setBounds(600, 490, 103, 15);

        jcHLaboral.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcHLaboral);
        jcHLaboral.setBounds(800, 490, 210, 27);

        labelTitulo.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelTitulo.setText("INFORMACIÓN DEL PROFESIONAL");
        getContentPane().add(labelTitulo);
        labelTitulo.setBounds(440, 30, 227, 15);

        btnCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        getContentPane().add(btnCrear);
        btnCrear.setBounds(60, 560, 130, 34);

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/update.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar);
        btnModificar.setBounds(230, 560, 128, 34);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(390, 560, 125, 34);

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disable-icon.png"))); // NOI18N
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar);
        btnEliminar.setBounds(550, 560, 140, 34);

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(710, 560, 129, 34);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir);
        btnSalir.setBounds(870, 560, 129, 34);

        labelGenero.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelGenero.setText("*Género:");
        getContentPane().add(labelGenero);
        labelGenero.setBounds(600, 290, 50, 15);

        jcGenero.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcGenero);
        jcGenero.setBounds(800, 290, 210, 27);

        labelObligatorios.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelObligatorios.setText("Los campos con * son obligatorios");
        getContentPane().add(labelObligatorios);
        labelObligatorios.setBounds(440, 80, 210, 15);

        labelAp1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAp1.setText("*Primer Apellido:");
        getContentPane().add(labelAp1);
        labelAp1.setBounds(40, 240, 90, 15);
        getContentPane().add(txtApellido1);
        txtApellido1.setBounds(210, 240, 218, 19);

        labelAp2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAp2.setText("Segundo Apellido:");
        getContentPane().add(labelAp2);
        labelAp2.setBounds(600, 240, 100, 15);
        getContentPane().add(txtApellido2);
        txtApellido2.setBounds(800, 240, 218, 19);

        txtDRes.setBackground(new java.awt.Color(255, 255, 255));
        txtDRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDResActionPerformed(evt);
            }
        });
        getContentPane().add(txtDRes);
        txtDRes.setBounds(800, 390, 260, 19);

        txtBarrio.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtBarrio);
        txtBarrio.setBounds(210, 390, 210, 19);

        labelDepartamento.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDepartamento.setText("*Departamento:");
        getContentPane().add(labelDepartamento);
        labelDepartamento.setBounds(40, 340, 90, 15);

        labelNreg.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNreg.setText("*Número de registro:");
        getContentPane().add(labelNreg);
        labelNreg.setBounds(40, 140, 140, 15);

        txtNRegistro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNRegistroKeyTyped(evt);
            }
        });
        getContentPane().add(txtNRegistro);
        txtNRegistro.setBounds(210, 140, 219, 19);

        jcDepartamento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jcDepartamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcDepartamentoItemStateChanged(evt);
            }
        });
        getContentPane().add(jcDepartamento);
        jcDepartamento.setBounds(210, 340, 210, 27);

        jcMunicipio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcMunicipio);
        jcMunicipio.setBounds(800, 340, 210, 27);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1100, 630);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCelularKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelularKeyTyped
        try {
            int num = Integer.parseInt("" + evt.getKeyChar());

        } catch (Exception ev) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCelularKeyTyped

    /**
     * Llama al método guardar.
     *
     * @param evt
     */
    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        guardar();
    }//GEN-LAST:event_btnCrearActionPerformed

    /**
     * Llama al método modificar.
     *
     * @param evt
     */
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        modificar();
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * Llama a la interfaz para la visualización de los registros.
     *
     * @param evt
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        new ProfesionalesRegistros().setVisible(true);
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Llama al método cambiarEstado.
     *
     * @param evt
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        cambiarEstado();
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * Limpia todos los campos, asignandoles el valor por defecto.
     *
     * @param evt
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtNRegistro.setEnabled(true);
        txtNRegistro.setText("");
        txtNdoc.setEnabled(true);
        txtNdoc.setText("");
        jcTipoDoc.setEnabled(true);
        jcTipoDoc.setSelectedIndex(0);
        txtNombre.setEnabled(true);
        txtNombre.setText("");
        txtApellido1.setEnabled(true);
        txtApellido1.setText("");
        txtApellido2.setEnabled(true);
        txtApellido2.setText("");
        FechaN.setEnabled(true);
        FechaN.setDate(new Date());
        FechaN.getDateEditor().setEnabled(false);
        jcGenero.setEnabled(true);
        jcGenero.setSelectedIndex(0);
        jcDepartamento.setEnabled(true);
        jcDepartamento.setSelectedIndex(0);
        jcMunicipio.removeAllItems();
        jcMunicipio.addItem("Seleccione"); 
        txtBarrio.setEnabled(true);
        txtBarrio.setText("");
        txtDRes.setEnabled(true);
        txtDRes.setText("");
        txtTelefono.setEnabled(true);
        txtTelefono.setText("");
        txtCelular.setEnabled(true);
        txtCelular.setText("");
        jcCargo.setEnabled(true);
        jcCargo.setSelectedIndex(0);
        jcHLaboral.setEnabled(true);
        jcHLaboral.setSelectedIndex(0);
        btnCrear.setEnabled(true);
        btnModificar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * Cierra la interfaz y permite regresar al menú principal.
     *
     * @param evt
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        new Menu().setVisible(true);
        this.hide();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        try {
            int num = Integer.parseInt("" + evt.getKeyChar());

        } catch (Exception ev) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void txtDResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDResActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDResActionPerformed

    /**
     * Carga los municipios respectivos de acuerdo al departamento seleccionado
     * @param evt 
     */
    private void jcDepartamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcDepartamentoItemStateChanged
        String departamento = "Seleccione";
        jcMunicipio.removeAllItems();
        jcMunicipio.addItem("Seleccione");
        for (Map.Entry<Integer, String> dep : d.entrySet()){
            int d = dep.getKey();
            if (jcDepartamento.getSelectedItem().toString().equals(dep.getValue())) {
                departamento = String.valueOf(d);
            }
        }
        if(!departamento.equals("Seleccione")){
            try {
                m = OpProfesionales.obtenerMunicipios(departamento);
                Iterator mun = m.keySet().iterator();
                while(mun.hasNext()){
                    jcMunicipio.addItem(m.get(mun.next()));
                }
            } catch (SQLException ex) {
                Logger.getLogger(Familiares.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            jcMunicipio.removeAllItems();
            jcMunicipio.addItem("Seleccione");
        }
    }//GEN-LAST:event_jcDepartamentoItemStateChanged

    private void txtNRegistroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNRegistroKeyTyped
        String cadena = Character.toString(evt.getKeyChar()); 
        Pattern p = Pattern.compile("[ \\p{Alnum} \\p{Space}]");
        Matcher m = p.matcher(cadena);   
        if(!m.find()){ 
            evt.consume(); 
        }
    }//GEN-LAST:event_txtNRegistroKeyTyped

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Profesionales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Profesionales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Profesionales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Profesionales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Profesionales().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JDateChooser FechaN;
    private javax.swing.JButton btnBuscar;
    public static javax.swing.JButton btnCrear;
    public static javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    public static javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JComboBox jcCargo;
    public static javax.swing.JComboBox jcDepartamento;
    public static javax.swing.JComboBox jcGenero;
    public static javax.swing.JComboBox jcHLaboral;
    public static javax.swing.JComboBox jcMunicipio;
    public static javax.swing.JComboBox jcTipoDoc;
    private javax.swing.JLabel labelAp1;
    private javax.swing.JLabel labelAp2;
    private javax.swing.JLabel labelBarrio;
    private javax.swing.JLabel labelCargo;
    private javax.swing.JLabel labelCelular;
    private javax.swing.JLabel labelDepartamento;
    private javax.swing.JLabel labelDireccion;
    private javax.swing.JLabel labelFechaN;
    private javax.swing.JLabel labelGenero;
    private javax.swing.JLabel labelHorarioLaboral;
    private javax.swing.JLabel labelMunicipio;
    private javax.swing.JLabel labelNDoc;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelNreg;
    private javax.swing.JLabel labelObligatorios;
    private javax.swing.JLabel labelTDoc;
    private javax.swing.JLabel labelTelefono;
    private javax.swing.JLabel labelTitulo;
    public static java.awt.TextField txtApellido1;
    public static java.awt.TextField txtApellido2;
    public static java.awt.TextField txtBarrio;
    public static java.awt.TextField txtCelular;
    public static java.awt.TextField txtDRes;
    public static java.awt.TextField txtNRegistro;
    public static java.awt.TextField txtNdoc;
    public static java.awt.TextField txtNombre;
    public static java.awt.TextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que permite guardar la información de un profesional
     * con base en los datos ingresados.
     */
    public void guardar() {
        String numRegistro, id, tipoId = "Seleccione", nombre, apellido1, apellido2, diaFechaNacimiento, mesFechaNacimiento, annoFechaNacimiento, fechaNacimiento, genero = "Seleccione", direccion, barrio, departamento = "Seleccione", municipio = "Seleccione", telefono, celular, ocupacion = "Seleccione", horarioLaboral = "Seleccione";

        numRegistro = txtNRegistro.getText();
        id = txtNdoc.getText();
        
        for (Map.Entry<Integer, String> tipoDocs : td.entrySet()){
            int td = tipoDocs.getKey();
            if (jcTipoDoc.getSelectedItem().toString().equals(tipoDocs.getValue())) {
                tipoId = String.valueOf(td);
            }
        }
        nombre = txtNombre.getText();
        apellido1 = txtApellido1.getText();
        apellido2 = txtApellido2.getText();
        
        for (Map.Entry<Integer, String> generos : g.entrySet()){
            int g = generos.getKey();
            if (jcGenero.getSelectedItem().toString().equals(generos.getValue())) {
                genero = String.valueOf(g);
            }
        }
        
        for (Map.Entry<Integer, String> dep : d.entrySet()){
            int d = dep.getKey();
            if (jcDepartamento.getSelectedItem().toString().equals(dep.getValue())) {
                departamento = String.valueOf(d);
            }
        }
        
        if (!"Seleccione".equals(jcMunicipio.getSelectedItem().toString())) {
            for (Map.Entry<Integer, String> mun : m.entrySet()){
                int m = mun.getKey();
                if (jcMunicipio.getSelectedItem().toString().equals(mun.getValue())) {
                    municipio = String.valueOf(m);
                }
            }
        }
        barrio = txtBarrio.getText();
        direccion = txtDRes.getText();
        telefono = txtTelefono.getText();
        celular = txtCelular.getText();
        
        for (Map.Entry<Integer, String> oc : o.entrySet()){
            int o = oc.getKey();
            if (jcCargo.getSelectedItem().toString().equals(oc.getValue())) {
                ocupacion = String.valueOf(o);
            }
        }
        
        for (Map.Entry<Integer, String> hl : h.entrySet()){
            int h = hl.getKey();
            if (jcHLaboral.getSelectedItem().toString().equals(hl.getValue())) {
                horarioLaboral = String.valueOf(h);
            }
        }

        if (FechaN.getDate() != null) {
            diaFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.DAY_OF_MONTH));
            mesFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.MONTH) + 1);
            annoFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.YEAR));
            fechaNacimiento = diaFechaNacimiento + "/" + mesFechaNacimiento + "/" + annoFechaNacimiento;
        } else {
            fechaNacimiento = null;
        }

        if ((numRegistro == null || numRegistro.trim().isEmpty()) || (id == null || id.trim().isEmpty()) || (tipoId.equals("Seleccione")) || (nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (genero.equals("Seleccione")) || (departamento.equals("Seleccione")) || (municipio.equals("Seleccione")) || (barrio == null || barrio.trim().isEmpty()) || (direccion == null || direccion.trim().isEmpty()) || (ocupacion.equals("Seleccione")) || (horarioLaboral.equals("Seleccione"))) {
            JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(numRegistro.length() > 20 || numRegistro.length() < 1){
            numRegistro = null;
            JOptionPane.showMessageDialog(null, "El campo número de registro no debe ser superior a 20 carácteres ni inferior a 1 carácter", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(id.length() > 20 || id.length() < 4){
            id = null;
            JOptionPane.showMessageDialog(null, "El campo identificación no debe ser superior a 20 carácteres ni inferior a 4 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(id.startsWith("0")){
            id = null;
            JOptionPane.showMessageDialog(null, "El número de identificación ingresado es inválido", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(telefono.trim().isEmpty() && celular.trim().isEmpty()){
            telefono = null;
            celular = null;
            JOptionPane.showMessageDialog(null, "Debe ingresar un número de teléfono o un celular", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(!telefono.trim().isEmpty() && (telefono.length() > 7 || telefono.length() < 7)) {
            telefono = null;
            JOptionPane.showMessageDialog(null, "El campo teléfono no debe ser superior ni inferior a 7 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        } else if(!celular.trim().isEmpty() && (celular.length() > 10 || celular.length() < 10)) {
            celular = null;
            JOptionPane.showMessageDialog(null, "El campo celular no debe ser superior ni inferior a 10 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE); 
        }else{
            if (fechaNacimiento != null) {
                Calendar c = Calendar.getInstance();
                c.setTime(new Date());
                int diff_anno = c.get(Calendar.YEAR)-FechaN.getCalendar().get(Calendar.YEAR);
                int diff_mes = (c.get(Calendar.MONTH) + 1) -(FechaN.getCalendar().get(Calendar.MONTH)+ 1);
                int diff_dia = c.get(Calendar.DATE)-FechaN.getCalendar().get(Calendar.DATE);
                if(diff_mes<0 ||(diff_mes==0 && diff_dia<0)){
                    diff_anno =diff_anno-1;
                }
                if (diff_anno < 23) {
                    fechaNacimiento = null;
                    JOptionPane.showMessageDialog(null, "La fecha de nacimiento del profesional debe ser mayor o igual a 23 años", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else {
                    int a = OpProfesionales.guardar(numRegistro, id, tipoId, nombre, apellido1, apellido2, fechaNacimiento, genero, departamento, municipio, barrio, direccion, telefono, celular, ocupacion, horarioLaboral);
                    if (a == 0) {
                        txtNRegistro.enable();
                        txtNRegistro.setText("");
                        txtNdoc.enable();
                        txtNdoc.setText("");
                        jcTipoDoc.setSelectedIndex(0);
                        txtNombre.setText("");
                        txtApellido1.setText("");
                        txtApellido2.setText("");
                        FechaN.setDate(new Date());
                        FechaN.getDateEditor().setEnabled(false);
                        jcGenero.setSelectedIndex(0);
                        jcDepartamento.setSelectedIndex(0);
                        jcMunicipio.removeAllItems();
                        jcMunicipio.addItem("Seleccione");
                        txtBarrio.setText("");
                        txtDRes.setText("");
                        txtTelefono.setText("");
                        txtCelular.setText("");
                        jcCargo.setSelectedIndex(0);
                        jcHLaboral.setSelectedIndex(0);
                    }
                } 
            }else{
                JOptionPane.showMessageDialog(null, "La fecha de nacimiento de profesional no es válida", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Método que permite cambiar el estado de un profesional registrado
     * de acuerdo a la identificación digitada.
     */
    public void cambiarEstado() {
        if (txtNdoc.getText() == null || txtNdoc.getText().trim().isEmpty()) {
            txtNdoc.setText(null);
            JOptionPane.showMessageDialog(null, "Debe diligenciar el campo número de documento del profesional a cambiar el estado", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }

        if (!txtNdoc.getText().trim().isEmpty()) {
            JOptionPane x = new JOptionPane();
            if(x.showConfirmDialog(null,"Está seguro que desea cambiar el estado de este registro?")==0){
                OpProfesionales.cambiarEstado(txtNdoc.getText());
                txtNRegistro.setEnabled(true);
                txtNRegistro.setText("");
                txtNdoc.setEnabled(true);
                txtNdoc.setText("");
                jcTipoDoc.setEnabled(true);
                jcTipoDoc.setSelectedIndex(0);
                txtNombre.setEnabled(true);
                txtNombre.setText("");
                txtApellido1.setEnabled(true);
                txtApellido1.setText("");
                txtApellido2.setEnabled(true);
                txtApellido2.setText("");
                FechaN.setEnabled(true);
                FechaN.setDate(new Date());
                FechaN.getDateEditor().setEnabled(false);
                jcGenero.setEnabled(true);
                jcGenero.setSelectedIndex(0);
                jcDepartamento.setEnabled(true);
                jcDepartamento.setSelectedIndex(0);
                jcMunicipio.setEnabled(true);
                jcMunicipio.removeAllItems();
                jcMunicipio.addItem("Seleccione");
                txtBarrio.setEnabled(true);
                txtBarrio.setText("");
                txtDRes.setEnabled(true);
                txtDRes.setText("");
                txtTelefono.setEnabled(true);
                txtTelefono.setText("");
                txtCelular.setEnabled(true);
                txtCelular.setText("");
                jcCargo.setEnabled(true);
                jcCargo.setSelectedIndex(0);
                jcHLaboral.setEnabled(true);
                jcHLaboral.setSelectedIndex(0);
                btnCrear.setEnabled(true);
                btnModificar.setEnabled(false);
                btnEliminar.setEnabled(false);
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
            }
        }
    }

    /**
     * Método que permite modificar la información de un profesional de acuerdo
     * a la información digitada.
     */
    public void modificar() {
        String numRegistro, id, tipoId = "Seleccione", nombre, apellido1, apellido2, diaFechaNacimiento, mesFechaNacimiento, annoFechaNacimiento, fechaNacimiento, genero = "Seleccione", direccion, barrio, departamento = "Seleccione", municipio = "Seleccione", telefono, celular, ocupacion = "Seleccione", horarioLaboral = "Seleccione";

        numRegistro = txtNRegistro.getText();
        id = txtNdoc.getText();
        
        for (Map.Entry<Integer, String> tipoDocs : td.entrySet()){
            int td = tipoDocs.getKey();
            if (jcTipoDoc.getSelectedItem().toString().equals(tipoDocs.getValue())) {
                tipoId = String.valueOf(td);
            }
        }
        nombre = txtNombre.getText();
        apellido1 = txtApellido1.getText();
        apellido2 = txtApellido2.getText();
        
        for (Map.Entry<Integer, String> generos : g.entrySet()){
            int g = generos.getKey();
            if (jcGenero.getSelectedItem().toString().equals(generos.getValue())) {
                genero = String.valueOf(g);
            }
        }
        
        for (Map.Entry<Integer, String> dep : d.entrySet()){
            int d = dep.getKey();
            if (jcDepartamento.getSelectedItem().toString().equals(dep.getValue())) {
                departamento = String.valueOf(d);
            }
        }
        
        if (!"Seleccione".equals(jcMunicipio.getSelectedItem().toString())) {
            for (Map.Entry<Integer, String> mun : m.entrySet()){
                int m = mun.getKey();
                if (jcMunicipio.getSelectedItem().toString().equals(mun.getValue())) {
                    municipio = String.valueOf(m);
                }
            }
        }
        barrio = txtBarrio.getText();
        direccion = txtDRes.getText();
        telefono = txtTelefono.getText();
        celular = txtCelular.getText();
        
        for (Map.Entry<Integer, String> oc : o.entrySet()){
            int o = oc.getKey();
            if (jcCargo.getSelectedItem().toString().equals(oc.getValue())) {
                ocupacion = String.valueOf(o);
            }
        }
        
        for (Map.Entry<Integer, String> hl : h.entrySet()){
            int h = hl.getKey();
            if (jcHLaboral.getSelectedItem().toString().equals(hl.getValue())) {
                horarioLaboral = String.valueOf(h);
            }
        }

        if (FechaN.getDate() != null) {
            diaFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.DAY_OF_MONTH));
            mesFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.MONTH) + 1);
            annoFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.YEAR));
            fechaNacimiento = diaFechaNacimiento + "/" + mesFechaNacimiento + "/" + annoFechaNacimiento;
        } else {
            fechaNacimiento = null;
        }

        if ((numRegistro == null || numRegistro.trim().isEmpty()) || (id == null || id.trim().isEmpty()) || (tipoId.equals("Seleccione")) || (nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (genero.equals("Seleccione")) || (departamento.equals("Seleccione")) || (municipio.equals("Seleccione")) || (barrio == null || barrio.trim().isEmpty()) || (direccion == null || direccion.trim().isEmpty()) || (ocupacion.equals("Seleccione")) || (horarioLaboral.equals("Seleccione"))) {
            JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(numRegistro.length() > 20 || numRegistro.length() < 1){
            numRegistro = null;
            JOptionPane.showMessageDialog(null, "El campo número de registro no debe ser superior 20 carácteres ni inferior a 1 carácter", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(id.length() > 20 || id.length() < 4){
            id = null;
            JOptionPane.showMessageDialog(null, "El campo identificación no debe ser superior a 20 carácteres ni inferior a 4 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        } else if(telefono.trim().isEmpty() && celular.trim().isEmpty()){
            telefono = null;
            celular = null;
            JOptionPane.showMessageDialog(null, "Debe ingresar un número de teléfono o un celular", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(!telefono.trim().isEmpty() && (telefono.length() > 7 || telefono.length() < 7)) {
            telefono = null;
            JOptionPane.showMessageDialog(null, "El campo teléfono no debe ser superior ni inferior a 7 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        } else if(!celular.trim().isEmpty() && (celular.length() > 10 || celular.length() < 10)) {
            celular = null;
            JOptionPane.showMessageDialog(null, "El campo celular no debe ser superior ni inferior a 10 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            if (fechaNacimiento != null) {
                Calendar c = Calendar.getInstance();
                c.setTime(new Date());
                int diff_anno = c.get(Calendar.YEAR)-FechaN.getCalendar().get(Calendar.YEAR);
                int diff_mes = (c.get(Calendar.MONTH) + 1) -(FechaN.getCalendar().get(Calendar.MONTH)+ 1);
                int diff_dia = c.get(Calendar.DATE)-FechaN.getCalendar().get(Calendar.DATE);
                if(diff_mes<0 ||(diff_mes==0 && diff_dia<0)){
                    diff_anno = diff_anno-1;
                }
                if (diff_anno < 23) {
                    fechaNacimiento = null;
                    JOptionPane.showMessageDialog(null, "La fecha de nacimiento del profesional debe ser mayor o igual a 23 años", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else {
                    OpProfesionales.modificar(numRegistro, id, tipoId, nombre, apellido1, apellido2, fechaNacimiento, genero, departamento, municipio, barrio, direccion, telefono, celular, ocupacion, horarioLaboral);
                    txtNRegistro.enable();
                    txtNRegistro.setText("");
                    txtNdoc.enable();
                    txtNdoc.setText("");
                    jcTipoDoc.setSelectedIndex(0);
                    txtNombre.setText("");
                    txtApellido1.setText("");
                    txtApellido2.setText("");
                    FechaN.setDate(new Date());
                    FechaN.getDateEditor().setEnabled(false);
                    jcGenero.setSelectedIndex(0);
                    jcDepartamento.setSelectedIndex(0);
                    jcMunicipio.removeAllItems();
                    jcMunicipio.addItem("Seleccione");
                    txtBarrio.setText("");
                    txtDRes.setText("");
                    txtTelefono.setText("");
                    txtCelular.setText("");
                    jcCargo.setSelectedIndex(0);
                    jcHLaboral.setSelectedIndex(0);
                    btnCrear.setEnabled(true);
                    btnModificar.setEnabled(false);
                    btnEliminar.setEnabled(false);
                    btnEliminar.setText("Deshabilitar");
                    btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                }
            }else{
                JOptionPane.showMessageDialog(null, "La fecha de nacimiento de profesional no es válida", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
