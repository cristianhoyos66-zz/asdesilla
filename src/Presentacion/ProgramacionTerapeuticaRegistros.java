/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AccesoDatos.OpProgramacionTerapeutica;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Esta clase permite pintar la ventana para la búsqueda de los registros de Programación Terapéutica
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class ProgramacionTerapeuticaRegistros extends javax.swing.JFrame {
    DefaultTableModel dtm;
    Map<String, String> p;
    Map<Integer, String> td;

    public ProgramacionTerapeuticaRegistros() {
        initComponents();
        setIconImage (new ImageIcon(getClass().getResource("/Imagenes/therapeutic programming icon.png")).getImage());

        dtm = (DefaultTableModel) Registros.getModel();
        if(dtm.getRowCount()!=0){
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
                i-=1;
            }
        }
        try{
            ArrayList <Object[]> l = OpProgramacionTerapeutica.obtenerRegistros();
            for (int i = 0; i < l.size(); i++) {
                dtm.addRow(l.get(i));
            }
        }catch(Exception e){
            System.out.println("Error: "+e);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        Registros = new javax.swing.JTable();
        labelMes = new javax.swing.JLabel();
        btnDetalles = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        labelDoc = new javax.swing.JLabel();
        txtDocPac = new java.awt.TextField();
        btnBusqueda = new javax.swing.JButton();
        jcPaciente = new javax.swing.JComboBox();
        labelAnno = new javax.swing.JLabel();
        jchMes = new com.toedter.calendar.JMonthChooser();
        jchAnno = new com.toedter.calendar.JYearChooser();
        jchbAnno = new javax.swing.JCheckBox();
        jchbMes = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1050, 570));
        setResizable(false);
        getContentPane().setLayout(null);

        Registros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Historia Clínica", "Paciente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Registros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RegistrosMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(Registros);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 250, 1020, 280);

        labelMes.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelMes.setText("Mes");
        getContentPane().add(labelMes);
        labelMes.setBounds(670, 90, 40, 15);

        btnDetalles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/more-details-icon.png"))); // NOI18N
        btnDetalles.setText("Ver detalles");
        btnDetalles.setEnabled(false);
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });
        getContentPane().add(btnDetalles);
        btnDetalles.setBounds(310, 170, 140, 34);

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(530, 170, 137, 34);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(110, 170, 125, 34);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir);
        btnSalir.setBounds(760, 170, 137, 34);

        labelDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDoc.setText("Documento Paciente:");
        getContentPane().add(labelDoc);
        labelDoc.setBounds(20, 90, 135, 15);

        txtDocPac.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtDocPac);
        txtDocPac.setBounds(150, 90, 170, 19);

        btnBusqueda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusqueda.setToolTipText("La búsqueda se  puede generar a partir de los primeros números del documento");
        btnBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaActionPerformed(evt);
            }
        });
        getContentPane().add(btnBusqueda);
        btnBusqueda.setBounds(330, 80, 50, 30);

        jcPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcPaciente);
        jcPaciente.setBounds(390, 90, 220, 27);

        labelAnno.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAnno.setText("Año");
        getContentPane().add(labelAnno);
        labelAnno.setBounds(910, 90, 30, 15);

        jchMes.setEnabled(false);
        getContentPane().add(jchMes);
        jchMes.setBounds(710, 90, 120, 27);

        jchAnno.setEnabled(false);
        getContentPane().add(jchAnno);
        jchAnno.setBounds(940, 90, 80, 27);

        jchbAnno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchbAnnoActionPerformed(evt);
            }
        });
        getContentPane().add(jchbAnno);
        jchbAnno.setBounds(890, 90, 20, 21);

        jchbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchbMesActionPerformed(evt);
            }
        });
        getContentPane().add(jchbMes);
        jchbMes.setBounds(650, 90, 20, 21);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1050, 540);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Obtiene la información de la programación terapéutica de acuerdo a los datos de la tabla
     * y los asigna al formulario, además deshabilita el botón Crear
     * @param evt 
     */
    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed
        try {
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String fecha = Registros.getValueAt(Registros.getSelectedRow(), 0).toString();
            String hc = Registros.getValueAt(Registros.getSelectedRow(), 1).toString();
            String paciente = Registros.getValueAt(Registros.getSelectedRow(), 2).toString();
            ProgramacionTerapeutica.txtNHC.setText(hc);
            ProgramacionTerapeutica.jcPaciente.addItem(paciente);
            ProgramacionTerapeutica.jcPaciente.setSelectedItem(paciente);
            OpProgramacionTerapeutica.buscar(fecha, hc);
            ProgramacionTerapeutica.FechaProgTerapeutica.setEnabled(false);
            ProgramacionTerapeutica.FechaProgTerapeutica.setDate(formatoFecha.parse(fecha));
            ProgramacionTerapeutica.txtNHC.setEnabled(false);
            ProgramacionTerapeutica.jcPaciente.setEnabled(false);
            ProgramacionTerapeutica.jcFormaEnsenanza.setEnabled(false);
            Map<Integer, String> fe = OpProgramacionTerapeutica.obtenerFormaEnsenanza();
            for (Map.Entry<Integer, String> formasEnsenanza : fe.entrySet()){
                if (Integer.parseInt(OpProgramacionTerapeutica.getTipoMonta()) == formasEnsenanza.getKey()) {
                    ProgramacionTerapeutica.jcFormaEnsenanza.setSelectedItem(formasEnsenanza.getValue());
                }
            }
            ProgramacionTerapeutica.txtAntecedentes.setEnabled(false);
            ProgramacionTerapeutica.txtAntecedentes.setText(OpProgramacionTerapeutica.getAntecedentes());
            ProgramacionTerapeutica.txtObjGeneral.setEnabled(false);
            ProgramacionTerapeutica.txtObjGeneral.setText(OpProgramacionTerapeutica.getObjetivoGeneral());
            ProgramacionTerapeutica.txtObjEspecificos.setEnabled(false);
            ProgramacionTerapeutica.txtObjEspecificos.setText(OpProgramacionTerapeutica.getObjetivosEspecificos());
            ProgramacionTerapeutica.txtEstrategias.setEnabled(false);
            ProgramacionTerapeutica.txtEstrategias.setText(OpProgramacionTerapeutica.getEstrategias());
            ProgramacionTerapeutica.txtMaterialesDidacticos.setEnabled(false);
            ProgramacionTerapeutica.txtMaterialesDidacticos.setText(OpProgramacionTerapeutica.getMaterialDidactico());
            ProgramacionTerapeutica.txtComentarios.setEnabled(false);
            ProgramacionTerapeutica.txtComentarios.setText(OpProgramacionTerapeutica.getComentarios());
            OpProgramacionTerapeutica.setFecha("");
            OpProgramacionTerapeutica.setIdHistoriaClinica("");
            OpProgramacionTerapeutica.setTipoMonta("");
            OpProgramacionTerapeutica.setAntecedentes("");
            OpProgramacionTerapeutica.setObjetivoGeneral("");
            OpProgramacionTerapeutica.setObjetivosEspecificos("");
            OpProgramacionTerapeutica.setEstrategias("");
            OpProgramacionTerapeutica.setMaterialDidactico("");
            OpProgramacionTerapeutica.setComentarios("");
            ProgramacionTerapeutica.txtDocPac.setEnabled(false);
            ProgramacionTerapeutica.btnBusquedaPac.setEnabled(false);
            ProgramacionTerapeutica.btnCrearProgTerapeutica.setEnabled(false);
            ProgramacionTerapeutica.btnImprimir.setEnabled(true);
            this.setVisible(false);
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ProgramacionTerapeuticaRegistros.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDetallesActionPerformed

    /**
     * Limpia todos los campos y restaura los datos de la tabla en caso de haberse hecho una consulta.
     * @param evt 
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        final Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        jchbAnno.setSelected(false);
        jchbMes.setSelected(false);
        jchAnno.setEnabled(false);
        jchAnno.setYear(c.get(Calendar.YEAR));
        jchMes.setEnabled(false);
        jchMes.setMonth(c.get(Calendar.MONTH));
        jcPaciente.removeAllItems();
        jcPaciente.addItem("Seleccione");
        jcPaciente.setSelectedIndex(0);
        txtDocPac.setText("");
        btnDetalles.setEnabled(false);
        if(dtm.getRowCount()!=0){
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
                i-=1;
            }
        }
        try{
            ArrayList <Object[]> l = OpProgramacionTerapeutica.obtenerRegistros();
            for (int i = 0; i < l.size(); i++) {
                dtm.addRow(l.get(i));
            }
        }catch(Exception e){
            System.out.println("Error: "+e);
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * Habilita el botón Ver detalles en caso de que se seleccione algún registro en la tabla.
     * @param evt 
     */
    private void RegistrosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegistrosMousePressed
        btnDetalles.setEnabled(true);
    }//GEN-LAST:event_RegistrosMousePressed

    /**
     * Llama al método buscar.
     * @param evt 
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscar();
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Cierra la ventana de registros.
     * @param evt 
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.hide();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * Búsqueda de los pacientes coincidentes según un carácter ingresado
     * @param evt 
     */
    private void btnBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaActionPerformed
        if(txtDocPac.getText() == null || txtDocPac.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de identificación del paciente", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcPaciente.removeAllItems();
                p = OpProgramacionTerapeutica.consultarPacientes(txtDocPac.getText());
                Iterator it = p.keySet().iterator();
                if (p.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcPaciente.addItem("Seleccione");
                while(it.hasNext()){
                    jcPaciente.addItem(p.get(it.next()));
                }
                //txtDocPac.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(PacientesRegistros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaActionPerformed

    /**
     * Habilita la búsqueda por un año específico
     * @param evt 
     */
    private void jchbAnnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchbAnnoActionPerformed
        if (jchbAnno.isSelected()) {
            jchAnno.setEnabled(true);
        }else{
            jchAnno.setEnabled(false);
        }
    }//GEN-LAST:event_jchbAnnoActionPerformed

    /**
     * Habilita la búsqueda por un mes específico
     * @param evt 
     */
    private void jchbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchbMesActionPerformed
        if (jchbMes.isSelected()) {
            jchMes.setEnabled(true);
        }else{
            jchMes.setEnabled(false);
        }
    }//GEN-LAST:event_jchbMesActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgramacionTerapeuticaRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgramacionTerapeuticaRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgramacionTerapeuticaRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgramacionTerapeuticaRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProgramacionTerapeuticaRegistros().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Registros;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBusqueda;
    private javax.swing.JButton btnDetalles;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JComboBox jcPaciente;
    private com.toedter.calendar.JYearChooser jchAnno;
    private com.toedter.calendar.JMonthChooser jchMes;
    private javax.swing.JCheckBox jchbAnno;
    private javax.swing.JCheckBox jchbMes;
    private javax.swing.JLabel labelAnno;
    private javax.swing.JLabel labelDoc;
    private javax.swing.JLabel labelMes;
    public static java.awt.TextField txtDocPac;
    // End of variables declaration//GEN-END:variables
    /**
     * Método que permite buscar un registro de una programación terapéutica de acuerdo al mes, al año y/o número de identificación digitada
     * y muestra la información obtenida en la tabla de registros.
     */
    public void buscar() {
        String id;
        int mesFecha, annoFecha;
        id = null;
        mesFecha = jchMes.getMonth()+1;
        annoFecha = jchAnno.getYear();
        if (!jcPaciente.getSelectedItem().toString().equals("Seleccione")) {
            for (Map.Entry<String, String> pacientes : p.entrySet()){
                String p = pacientes.getKey();
                if (jcPaciente.getSelectedItem().toString().equals(pacientes.getValue())) {
                    id = p;
                }
            }
        }
        
        if (!jchMes.isEnabled()) {
            mesFecha = 0;
        }
        
        if (!jchAnno.isEnabled()) {
            annoFecha = 0;
        }
        
        if(id == null && mesFecha == 0 && annoFecha == 0){
            JOptionPane.showMessageDialog(null, "Debe diligenciar un número de identificación, un mes o un año a buscar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            ArrayList <Object[]> l = OpProgramacionTerapeutica.buscarRegistros(id, mesFecha, annoFecha);
            if(l.size()>0){
                btnDetalles.setEnabled(false);
                if(dtm.getRowCount()!=0){
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        dtm.removeRow(i);
                        i-=1;
                    }
                }
                try{
                    for (int i = 0; i < l.size(); i++) {
                        dtm.addRow(l.get(i));
                    }
                }catch(Exception e){
                    System.out.println("Error: "+e);
                }
            }
        }
    }
}
