/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AccesoDatos.OpAreaPsicosocial;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.awt.*;

/**
 * Esta clase permite pintar la ventana Área Psicosocial, con sus respectivos componentes, para el manejo de la información psicológica
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class AreaPsicosocial extends javax.swing.JFrame {
    Map<String, String> pr;
    Map<Integer, String> p;
    TreeMap<Integer, String> a;
    
    public AreaPsicosocial() {
        try {
            initComponents();
            setIconImage (new ImageIcon(getClass().getResource("/Imagenes/psicologia-icon.png")).getImage());
            jxtpEnt.add(jpanelEnt);
            jxtpAmbFam.add(jpanelAmbFam);
            jxtpFunc.add(jpanelFunc);
            jxtpObservaciones.add(jpanelObservaciones);
            FechaAreaPsico.setDate(new Date());
            a = OpAreaPsicosocial.obtenerAutoridad();
            Iterator t = a.keySet().iterator();
            while(t.hasNext()){
                jcAutoridad.addItem(a.get(t.next()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(AreaPsicosocial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelEnt = new javax.swing.JPanel();
        lblEntPadres = new javax.swing.JLabel();
        jcEntPadres = new javax.swing.JComboBox();
        lblEntFamiliares = new javax.swing.JLabel();
        jcEntFamiliares = new javax.swing.JComboBox();
        lblEntCompaneros = new javax.swing.JLabel();
        jcEntCompaneros = new javax.swing.JComboBox();
        lblEntExtranos = new javax.swing.JLabel();
        jcEntExtranos = new javax.swing.JComboBox();
        lblPerMayorT = new javax.swing.JLabel();
        jScrollPane17 = new javax.swing.JScrollPane();
        txtPerMayorT = new javax.swing.JTextArea();
        lblFortalezas = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        txtFortalezas = new javax.swing.JTextArea();
        lblDebilidades = new javax.swing.JLabel();
        jScrollPane19 = new javax.swing.JScrollPane();
        txtDebilidades = new javax.swing.JTextArea();
        jpanelAmbFam = new javax.swing.JPanel();
        lblRespNorma = new javax.swing.JLabel();
        jcResptNorma = new javax.swing.JComboBox();
        lblTransgrNorma = new javax.swing.JLabel();
        jcTransgNorma = new javax.swing.JComboBox();
        lblObdOrdenes = new javax.swing.JLabel();
        jcObdOrdenes = new javax.swing.JComboBox();
        lblPerAutoridad = new javax.swing.JLabel();
        lblActPref = new javax.swing.JLabel();
        txtActPreferida = new java.awt.TextField();
        lblDiaCotidiano = new javax.swing.JLabel();
        jScrollPane20 = new javax.swing.JScrollPane();
        txtDiaCotidiano = new javax.swing.JTextArea();
        lblEscolaridad = new javax.swing.JLabel();
        jcEscolaridad = new javax.swing.JComboBox();
        lblHorario = new javax.swing.JLabel();
        jcHorario = new javax.swing.JComboBox();
        lblLugar = new javax.swing.JLabel();
        txtLugar = new java.awt.TextField();
        jcAutoridad = new javax.swing.JComboBox();
        jpanelFunc = new javax.swing.JPanel();
        lblBanoCorp = new javax.swing.JLabel();
        jcFBanoCorp = new javax.swing.JComboBox();
        lblVisteDesv = new javax.swing.JLabel();
        jcFVestirse = new javax.swing.JComboBox();
        lblLava = new javax.swing.JLabel();
        jcFLavarse = new javax.swing.JComboBox();
        lblAlimentacion = new javax.swing.JLabel();
        jcFAlimentacion = new javax.swing.JComboBox();
        lblPeina = new javax.swing.JLabel();
        jcFPeinarse = new javax.swing.JComboBox();
        lblAbotona = new javax.swing.JLabel();
        jcFAbotonarse = new javax.swing.JComboBox();
        lblDormir = new javax.swing.JLabel();
        jcFDormir = new javax.swing.JComboBox();
        lblAmarra = new javax.swing.JLabel();
        jcFAmarrarse = new javax.swing.JComboBox();
        jpanelObservaciones = new javax.swing.JPanel();
        lblObservaciones = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        txtObservaciones = new javax.swing.JTextArea();
        lblFecha = new javax.swing.JLabel();
        FechaAreaPsico = new com.toedter.calendar.JDateChooser();
        lblTitulo = new javax.swing.JLabel();
        btnCrearAreaPsico = new javax.swing.JButton();
        btnBuscarFisioterapia = new javax.swing.JButton();
        btnLimpiarFisioterapia = new javax.swing.JButton();
        btnSalirFisioterapia = new javax.swing.JButton();
        lblProfesional = new javax.swing.JLabel();
        txtDocProf = new java.awt.TextField();
        btnBusquedaProf = new javax.swing.JButton();
        jcProfesional = new javax.swing.JComboBox();
        lblObligatorios = new javax.swing.JLabel();
        jXTaskPaneContainer1 = new org.jdesktop.swingx.JXTaskPaneContainer();
        jxtpEnt = new org.jdesktop.swingx.JXTaskPane();
        jxtpAmbFam = new org.jdesktop.swingx.JXTaskPane();
        jxtpFunc = new org.jdesktop.swingx.JXTaskPane();
        jxtpObservaciones = new org.jdesktop.swingx.JXTaskPane();
        lblDocPac = new javax.swing.JLabel();
        txtDocPac = new java.awt.TextField();
        btnBusquedaPac = new javax.swing.JButton();
        jcPaciente = new javax.swing.JComboBox();
        lblNHistoriaClinica = new javax.swing.JLabel();
        txtNHC = new java.awt.TextField();
        jLabel1 = new javax.swing.JLabel();

        jpanelEnt.setMinimumSize(new java.awt.Dimension(1121, 334));
        jpanelEnt.setPreferredSize(new java.awt.Dimension(1121, 334));
        jpanelEnt.setLayout(null);

        lblEntPadres.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblEntPadres.setText("Padres*");
        jpanelEnt.add(lblEntPadres);
        lblEntPadres.setBounds(20, 40, 60, 15);

        jcEntPadres.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        jpanelEnt.add(jcEntPadres);
        jcEntPadres.setBounds(120, 40, 140, 27);

        lblEntFamiliares.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblEntFamiliares.setText("Familiares*");
        jpanelEnt.add(lblEntFamiliares);
        lblEntFamiliares.setBounds(520, 40, 80, 15);

        jcEntFamiliares.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        jpanelEnt.add(jcEntFamiliares);
        jcEntFamiliares.setBounds(710, 40, 140, 27);

        lblEntCompaneros.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblEntCompaneros.setText("Compañeros*");
        jpanelEnt.add(lblEntCompaneros);
        lblEntCompaneros.setBounds(900, 40, 90, 15);

        jcEntCompaneros.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        jpanelEnt.add(jcEntCompaneros);
        jcEntCompaneros.setBounds(1050, 40, 140, 27);

        lblEntExtranos.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblEntExtranos.setText("Extraños*");
        jpanelEnt.add(lblEntExtranos);
        lblEntExtranos.setBounds(20, 90, 60, 15);

        jcEntExtranos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        jpanelEnt.add(jcEntExtranos);
        jcEntExtranos.setBounds(120, 90, 140, 27);

        lblPerMayorT.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblPerMayorT.setText("Comparte mayor tiempo con* ");
        jpanelEnt.add(lblPerMayorT);
        lblPerMayorT.setBounds(520, 90, 170, 15);

        txtPerMayorT.setColumns(20);
        txtPerMayorT.setRows(5);
        jScrollPane17.setViewportView(txtPerMayorT);

        jpanelEnt.add(jScrollPane17);
        jScrollPane17.setBounds(710, 90, 480, 40);

        lblFortalezas.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblFortalezas.setText("Fortalezas* ");
        jpanelEnt.add(lblFortalezas);
        lblFortalezas.setBounds(20, 160, 70, 15);

        txtFortalezas.setColumns(20);
        txtFortalezas.setRows(5);
        jScrollPane18.setViewportView(txtFortalezas);

        jpanelEnt.add(jScrollPane18);
        jScrollPane18.setBounds(120, 160, 340, 60);

        lblDebilidades.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblDebilidades.setText("Debilidades* ");
        jpanelEnt.add(lblDebilidades);
        lblDebilidades.setBounds(20, 240, 80, 15);

        txtDebilidades.setColumns(20);
        txtDebilidades.setRows(5);
        jScrollPane19.setViewportView(txtDebilidades);

        jpanelEnt.add(jScrollPane19);
        jScrollPane19.setBounds(120, 240, 340, 60);

        jpanelAmbFam.setMinimumSize(new java.awt.Dimension(1121, 300));
        jpanelAmbFam.setPreferredSize(new java.awt.Dimension(1121, 300));
        jpanelAmbFam.setLayout(null);

        lblRespNorma.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblRespNorma.setText("Respeta la norma*");
        jpanelAmbFam.add(lblRespNorma);
        lblRespNorma.setBounds(20, 30, 110, 15);

        jcResptNorma.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        jcResptNorma.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcResptNormaItemStateChanged(evt);
            }
        });
        jpanelAmbFam.add(jcResptNorma);
        jcResptNorma.setBounds(200, 30, 140, 27);

        lblTransgrNorma.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblTransgrNorma.setText("La transgede*");
        jpanelAmbFam.add(lblTransgrNorma);
        lblTransgrNorma.setBounds(430, 30, 90, 15);

        jcTransgNorma.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        jcTransgNorma.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcTransgNormaItemStateChanged(evt);
            }
        });
        jpanelAmbFam.add(jcTransgNorma);
        jcTransgNorma.setBounds(600, 30, 140, 27);

        lblObdOrdenes.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblObdOrdenes.setText("Obedece ordenes*");
        jpanelAmbFam.add(lblObdOrdenes);
        lblObdOrdenes.setBounds(790, 30, 110, 15);

        jcObdOrdenes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        jpanelAmbFam.add(jcObdOrdenes);
        jcObdOrdenes.setBounds(940, 30, 140, 27);

        lblPerAutoridad.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblPerAutoridad.setText("Quien ejerce la autoridad*");
        jpanelAmbFam.add(lblPerAutoridad);
        lblPerAutoridad.setBounds(20, 70, 150, 15);

        lblActPref.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblActPref.setText("Actividad preferida*");
        jpanelAmbFam.add(lblActPref);
        lblActPref.setBounds(430, 70, 110, 15);
        jpanelAmbFam.add(txtActPreferida);
        txtActPreferida.setBounds(600, 70, 480, 19);

        lblDiaCotidiano.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblDiaCotidiano.setText("Día cotidiano* ");
        jpanelAmbFam.add(lblDiaCotidiano);
        lblDiaCotidiano.setBounds(20, 110, 80, 15);

        txtDiaCotidiano.setColumns(20);
        txtDiaCotidiano.setRows(5);
        jScrollPane20.setViewportView(txtDiaCotidiano);

        jpanelAmbFam.add(jScrollPane20);
        jScrollPane20.setBounds(200, 110, 880, 70);

        lblEscolaridad.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblEscolaridad.setText("Escolaridad*");
        jpanelAmbFam.add(lblEscolaridad);
        lblEscolaridad.setBounds(20, 210, 80, 15);

        jcEscolaridad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        jcEscolaridad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcEscolaridadItemStateChanged(evt);
            }
        });
        jpanelAmbFam.add(jcEscolaridad);
        jcEscolaridad.setBounds(200, 210, 140, 27);

        lblHorario.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblHorario.setText("Horario");
        jpanelAmbFam.add(lblHorario);
        lblHorario.setBounds(20, 250, 50, 15);

        jcHorario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "AM", "PM" }));
        jcHorario.setEnabled(false);
        jpanelAmbFam.add(jcHorario);
        jcHorario.setBounds(200, 250, 140, 27);

        lblLugar.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblLugar.setText("Lugar");
        jpanelAmbFam.add(lblLugar);
        lblLugar.setBounds(440, 210, 40, 15);

        txtLugar.setEnabled(false);
        jpanelAmbFam.add(txtLugar);
        txtLugar.setBounds(600, 210, 480, 19);

        jcAutoridad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jpanelAmbFam.add(jcAutoridad);
        jcAutoridad.setBounds(200, 70, 140, 27);

        jpanelFunc.setMinimumSize(new java.awt.Dimension(1121, 252));
        jpanelFunc.setPreferredSize(new java.awt.Dimension(1121, 252));
        jpanelFunc.setLayout(null);

        lblBanoCorp.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblBanoCorp.setText("Baño corporal*");
        jpanelFunc.add(lblBanoCorp);
        lblBanoCorp.setBounds(20, 20, 90, 15);

        jcFBanoCorp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Dependiente", "Semidependiente", "Independiente" }));
        jpanelFunc.add(jcFBanoCorp);
        jcFBanoCorp.setBounds(160, 20, 140, 27);

        lblVisteDesv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblVisteDesv.setText("Se viste/desviste*");
        jpanelFunc.add(lblVisteDesv);
        lblVisteDesv.setBounds(390, 20, 120, 15);

        jcFVestirse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Dependiente", "Semidependiente", "Independiente" }));
        jpanelFunc.add(jcFVestirse);
        jcFVestirse.setBounds(570, 20, 140, 27);

        lblLava.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblLava.setText("Se lava los dientes/manos*");
        jpanelFunc.add(lblLava);
        lblLava.setBounds(780, 20, 160, 15);

        jcFLavarse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Dependiente", "Semidependiente", "Independiente" }));
        jpanelFunc.add(jcFLavarse);
        jcFLavarse.setBounds(960, 20, 140, 27);

        lblAlimentacion.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblAlimentacion.setText("Alimentación*");
        jpanelFunc.add(lblAlimentacion);
        lblAlimentacion.setBounds(20, 60, 90, 15);

        jcFAlimentacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Dependiente", "Semidependiente", "Independiente" }));
        jpanelFunc.add(jcFAlimentacion);
        jcFAlimentacion.setBounds(160, 60, 140, 27);

        lblPeina.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblPeina.setText("Se peina*");
        jpanelFunc.add(lblPeina);
        lblPeina.setBounds(390, 60, 90, 15);

        jcFPeinarse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Dependiente", "Semidependiente", "Independiente" }));
        jpanelFunc.add(jcFPeinarse);
        jcFPeinarse.setBounds(570, 60, 140, 27);

        lblAbotona.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblAbotona.setText("Se abotona/desabotona*");
        jpanelFunc.add(lblAbotona);
        lblAbotona.setBounds(780, 60, 140, 15);

        jcFAbotonarse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Dependiente", "Semidependiente", "Independiente" }));
        jpanelFunc.add(jcFAbotonarse);
        jcFAbotonarse.setBounds(960, 60, 140, 27);

        lblDormir.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblDormir.setText("Dormir*");
        jpanelFunc.add(lblDormir);
        lblDormir.setBounds(20, 100, 50, 15);

        jcFDormir.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Dependiente", "Semidependiente", "Independiente" }));
        jpanelFunc.add(jcFDormir);
        jcFDormir.setBounds(160, 100, 140, 27);

        lblAmarra.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblAmarra.setText("Se amarra/desamarra*");
        jpanelFunc.add(lblAmarra);
        lblAmarra.setBounds(390, 100, 130, 15);

        jcFAmarrarse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Dependiente", "Semidependiente", "Independiente" }));
        jpanelFunc.add(jcFAmarrarse);
        jcFAmarrarse.setBounds(570, 100, 140, 27);

        jpanelObservaciones.setMinimumSize(new java.awt.Dimension(1121, 125));
        jpanelObservaciones.setPreferredSize(new java.awt.Dimension(1121, 125));
        jpanelObservaciones.setLayout(null);

        lblObservaciones.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblObservaciones.setText("Observaciones*");
        jpanelObservaciones.add(lblObservaciones);
        lblObservaciones.setBounds(20, 30, 120, 15);

        txtObservaciones.setColumns(20);
        txtObservaciones.setRows(5);
        jScrollPane13.setViewportView(txtObservaciones);

        jpanelObservaciones.add(jScrollPane13);
        jScrollPane13.setBounds(160, 30, 940, 60);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Área Psicosocial");
        setMinimumSize(new java.awt.Dimension(1330, 700));
        setResizable(false);
        getContentPane().setLayout(null);

        lblFecha.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblFecha.setText("*Fecha:");
        getContentPane().add(lblFecha);
        lblFecha.setBounds(30, 120, 120, 15);

        FechaAreaPsico.setDateFormatString("dd-MM-yyyy");
        FechaAreaPsico.setEnabled(false);
        FechaAreaPsico.setName("FechaN"); // NOI18N
        getContentPane().add(FechaAreaPsico);
        FechaAreaPsico.setBounds(200, 120, 181, 22);

        lblTitulo.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lblTitulo.setText("ÁREA PSICOSOCIAL");
        getContentPane().add(lblTitulo);
        lblTitulo.setBounds(610, 30, 131, 15);

        btnCrearAreaPsico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnCrearAreaPsico.setText("Crear");
        btnCrearAreaPsico.setToolTipText("Crear");
        btnCrearAreaPsico.setName(""); // NOI18N
        btnCrearAreaPsico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearAreaPsicoActionPerformed(evt);
            }
        });
        getContentPane().add(btnCrearAreaPsico);
        btnCrearAreaPsico.setBounds(220, 620, 130, 34);

        btnBuscarFisioterapia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscarFisioterapia.setText("Buscar");
        btnBuscarFisioterapia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFisioterapiaActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscarFisioterapia);
        btnBuscarFisioterapia.setBounds(450, 620, 125, 34);

        btnLimpiarFisioterapia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiarFisioterapia.setText("Limpiar");
        btnLimpiarFisioterapia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarFisioterapiaActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiarFisioterapia);
        btnLimpiarFisioterapia.setBounds(680, 620, 137, 34);

        btnSalirFisioterapia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalirFisioterapia.setText("Salir");
        btnSalirFisioterapia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirFisioterapiaActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalirFisioterapia);
        btnSalirFisioterapia.setBounds(910, 620, 137, 34);

        lblProfesional.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblProfesional.setText("*Registro del Profesional:");
        getContentPane().add(lblProfesional);
        lblProfesional.setBounds(730, 170, 159, 13);

        txtDocProf.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtDocProf);
        txtDocProf.setBounds(900, 170, 130, 19);

        btnBusquedaProf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusquedaProf.setToolTipText("La búsqueda se  puede generar a partir de los primeros números del documento");
        btnBusquedaProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaProfActionPerformed(evt);
            }
        });
        getContentPane().add(btnBusquedaProf);
        btnBusquedaProf.setBounds(1040, 160, 50, 30);

        jcProfesional.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcProfesional);
        jcProfesional.setBounds(1100, 160, 210, 30);

        lblObligatorios.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lblObligatorios.setText("Los campos con * son obligatorios");
        getContentPane().add(lblObligatorios);
        lblObligatorios.setBounds(570, 60, 210, 15);

        jXTaskPaneContainer1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        org.jdesktop.swingx.VerticalLayout verticalLayout1 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout1.setGap(14);
        jXTaskPaneContainer1.setLayout(verticalLayout1);

        jxtpEnt.setCollapsed(true);
        jxtpEnt.setTitle("SE HACE ENTENDER POR");
        jXTaskPaneContainer1.add(jxtpEnt);
        jxtpEnt.getAccessibleContext().setAccessibleParent(jXTaskPaneContainer1);

        jxtpAmbFam.setCollapsed(true);
        jxtpAmbFam.setTitle("AMBIENTE FAMILIAR");
        jXTaskPaneContainer1.add(jxtpAmbFam);
        jxtpAmbFam.getAccessibleContext().setAccessibleParent(jXTaskPaneContainer1);

        jxtpFunc.setCollapsed(true);
        jxtpFunc.setTitle("FUNCIONALIDAD");
        jXTaskPaneContainer1.add(jxtpFunc);
        jxtpFunc.getAccessibleContext().setAccessibleParent(jXTaskPaneContainer1);

        jxtpObservaciones.setCollapsed(true);
        jxtpObservaciones.setTitle("OBSERVACIONES");
        jXTaskPaneContainer1.add(jxtpObservaciones);
        jxtpObservaciones.getAccessibleContext().setAccessibleParent(jXTaskPaneContainer1);

        getContentPane().add(jXTaskPaneContainer1);
        jXTaskPaneContainer1.setBounds(10, 210, 1300, 390);

        lblDocPac.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblDocPac.setText("*Documento Paciente:");
        getContentPane().add(lblDocPac);
        lblDocPac.setBounds(30, 170, 141, 15);

        txtDocPac.setBackground(new java.awt.Color(255, 255, 255));
        txtDocPac.setName(""); // NOI18N
        txtDocPac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocPacActionPerformed(evt);
            }
        });
        getContentPane().add(txtDocPac);
        txtDocPac.setBounds(200, 170, 130, 19);

        btnBusquedaPac.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusquedaPac.setToolTipText("La búsqueda se  puede generar a partir de los primeros números del documento");
        btnBusquedaPac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaPacActionPerformed(evt);
            }
        });
        getContentPane().add(btnBusquedaPac);
        btnBusquedaPac.setBounds(340, 160, 50, 30);

        jcPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jcPaciente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcPacienteItemStateChanged(evt);
            }
        });
        getContentPane().add(jcPaciente);
        jcPaciente.setBounds(400, 160, 220, 30);

        lblNHistoriaClinica.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblNHistoriaClinica.setText("*Número Historia Clínica:");
        getContentPane().add(lblNHistoriaClinica);
        lblNHistoriaClinica.setBounds(730, 120, 160, 15);

        txtNHC.setEnabled(false);
        getContentPane().add(txtNHC);
        txtNHC.setBounds(900, 120, 130, 19);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setName("documento paciente"); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1320, 680);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Llama al método guardar
     * @param evt 
     */
    private void btnCrearAreaPsicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearAreaPsicoActionPerformed
        guardarAreaPsicosocial();
    }//GEN-LAST:event_btnCrearAreaPsicoActionPerformed

    /**
     * Llama a la interfaz para la visualización de los registros
     * @param evt 
     */
    private void btnBuscarFisioterapiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFisioterapiaActionPerformed
        new AreaPsicosocialRegistros().setVisible(true);
    }//GEN-LAST:event_btnBuscarFisioterapiaActionPerformed

    /**
     * Limpia todos los campos del formulario, asignandoles el valor por defecto
     * @param evt 
     */
    private void btnLimpiarFisioterapiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarFisioterapiaActionPerformed
        FechaAreaPsico.setDate(new Date());
        jcPaciente.setEnabled(true);
        jcPaciente.removeAllItems();
        jcPaciente.addItem("Seleccione");
        txtNHC.setText("");
        txtDocPac.setEnabled(true);
        txtDocPac.setText("");
        btnBusquedaPac.setEnabled(true);
        jcEntPadres.setEnabled(true);
        jcEntPadres.setSelectedIndex(0);
        jcEntFamiliares.setEnabled(true);
        jcEntFamiliares.setSelectedIndex(0);
        jcEntCompaneros.setEnabled(true);
        jcEntCompaneros.setSelectedIndex(0);
        jcEntExtranos.setEnabled(true);
        jcEntExtranos.setSelectedIndex(0);
        txtPerMayorT.setEnabled(true);
        txtPerMayorT.setText("");
        txtFortalezas.setEnabled(true);
        txtFortalezas.setText("");
        txtDebilidades.setEnabled(true);
        txtDebilidades.setText("");
        jcResptNorma.setEnabled(true);
        jcResptNorma.setSelectedIndex(0);
        jcTransgNorma.setEnabled(true);
        jcTransgNorma.setSelectedIndex(0);
        jcObdOrdenes.setEnabled(true);
        jcObdOrdenes.setSelectedIndex(0);
        jcAutoridad.setEnabled(true);
        jcAutoridad.setSelectedIndex(0);
        txtActPreferida.setEnabled(true);
        txtActPreferida.setText("");
        txtDiaCotidiano.setEnabled(true);
        txtDiaCotidiano.setText("");
        jcEscolaridad.setEnabled(true);
        jcEscolaridad.setSelectedIndex(0);
        jcHorario.setSelectedIndex(0);
        jcHorario.setEnabled(false);
        txtLugar.setText("");
        txtLugar.setEnabled(false);
        jcFBanoCorp.setEnabled(true);
        jcFBanoCorp.setSelectedIndex(0);
        jcFVestirse.setEnabled(true);
        jcFVestirse.setSelectedIndex(0);
        jcFLavarse.setEnabled(true);
        jcFLavarse.setSelectedIndex(0);
        jcFAlimentacion.setEnabled(true);
        jcFAlimentacion.setSelectedIndex(0);
        jcFPeinarse.setEnabled(true);
        jcFPeinarse.setSelectedIndex(0);
        jcFAbotonarse.setEnabled(true);
        jcFAbotonarse.setSelectedIndex(0);
        jcFDormir.setEnabled(true);
        jcFDormir.setSelectedIndex(0);
        jcFAmarrarse.setEnabled(true);
        jcFAmarrarse.setSelectedIndex(0);
        txtObservaciones.setEnabled(true);
        txtObservaciones.setText("");
        jcProfesional.setEnabled(true);
        jcProfesional.removeAllItems();
        jcProfesional.addItem("Seleccione");
        txtDocProf.setEnabled(true);
        txtDocProf.setText("");
        btnBusquedaProf.setEnabled(true);
        jxtpEnt.setCollapsed(true);
        jxtpAmbFam.setCollapsed(true);
        jxtpFunc.setCollapsed(true);
        jxtpObservaciones.setCollapsed(true);
        btnCrearAreaPsico.setEnabled(true);
        /*if (Evaluaciones.pacienteEvaluacion != null) {
            ArrayList terapias = OpEvaluaciones.obtenerTerapiasRegistros(Evaluaciones.pacienteEvaluacion);
            while(i < terapias.size() && b == false){
                if (terapias.get(i).equals("3")) {
                    btnCrearAreaPsico.setEnabled(true);
                    b = true;
                }else{
                    btnCrearAreaPsico.setEnabled(false);
                }
                i = i + 1;
            }
        }else{
            btnCrearAreaPsico.setEnabled(false);
        }*/
    }//GEN-LAST:event_btnLimpiarFisioterapiaActionPerformed

    /**
     * Regresar al menú principal
     * @param evt 
     */
    private void btnSalirFisioterapiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirFisioterapiaActionPerformed
        new Menu().setVisible(true);
        this.hide();
    }//GEN-LAST:event_btnSalirFisioterapiaActionPerformed

    /**
     * Búsqueda de los profesionales coincidentes según un carácter ingresado
     * @param evt 
     */
    private void btnBusquedaProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaProfActionPerformed
        if(txtDocProf.getText() == null || txtDocProf.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de registro del profesional");
        }else{
            try {
                jcProfesional.removeAllItems();
                pr = OpAreaPsicosocial.obtenerProfesionales(txtDocProf.getText());
                Iterator it = pr.keySet().iterator();
                if (pr.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcProfesional.addItem("Seleccione");
                while(it.hasNext()){
                    jcProfesional.addItem(pr.get(it.next()));
                }
                //txtDocProf.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(AreaPsicosocial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaProfActionPerformed

    /**
     * Habilita o deshabilita los campos horario y lugar dependiendo de la escolaridad
     * @param evt 
     */
    private void jcEscolaridadItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcEscolaridadItemStateChanged
        String escolaridad = jcEscolaridad.getSelectedItem().toString();
        if(!escolaridad.equals("Seleccione") && escolaridad.equals("Sí")){
            jcHorario.setEnabled(true);
            txtLugar.setEnabled(true);
        }else{
            jcHorario.setEnabled(false);
            txtLugar.setEnabled(false);
        }
    }//GEN-LAST:event_jcEscolaridadItemStateChanged

    /**
     * Búsqueda de pacientes por carácteres coincidentes
     * @param evt 
     */
    private void btnBusquedaPacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaPacActionPerformed
        if(txtDocPac.getText() == null || txtDocPac.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de identificación del paciente");
        }else{
            String diaFecha = String.valueOf(FechaAreaPsico.getCalendar().get(Calendar.DAY_OF_MONTH));
            String mesFecha = String.valueOf(FechaAreaPsico.getCalendar().get(Calendar.MONTH) + 1);
            String annoFecha = String.valueOf(FechaAreaPsico.getCalendar().get(Calendar.YEAR));
            String fecha = diaFecha + "/" + mesFecha + "/" + annoFecha;
            try {
                jcPaciente.removeAllItems();
                p = OpAreaPsicosocial.obtenerPacientes(txtDocPac.getText(), fecha);
                Iterator it = p.keySet().iterator();
                if (p.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcPaciente.addItem("Seleccione");
                while(it.hasNext()){
                    jcPaciente.addItem(p.get(it.next()));
                }
                //txtDocPac.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(Evaluaciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaPacActionPerformed

    /**
     * Carga del campo número de la historia clinica dependiendo del paciente seleccionado
     * @param evt 
     */
    private void jcPacienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcPacienteItemStateChanged
        if(jcPaciente.getItemCount() > 0){
            if (!jcPaciente.getSelectedItem().equals("Seleccione")) {
                try {
                    p = OpAreaPsicosocial.obtenerPacientes();
                    for (Map.Entry<Integer, String> historiaClinica : p.entrySet()){
                        if (jcPaciente.getSelectedItem().toString().equals(historiaClinica.getValue())) {
                            txtNHC.setText(String.valueOf(historiaClinica.getKey()));
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Evaluaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                txtNHC.setText("");
            }
        }
    }//GEN-LAST:event_jcPacienteItemStateChanged

    private void jcResptNormaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcResptNormaItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            if (jcResptNorma.getSelectedItem().equals("Sí")) {
                jcTransgNorma.setSelectedItem("No");
            }else{ 
                if(jcResptNorma.getSelectedItem().equals("No")){
                    jcTransgNorma.setSelectedItem("Sí");
                }else{ 
                    jcTransgNorma.setSelectedIndex(0);
                }
            }
        }
    }//GEN-LAST:event_jcResptNormaItemStateChanged

    private void jcTransgNormaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcTransgNormaItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            if (jcTransgNorma.getSelectedItem().equals("Sí")) {
                jcResptNorma.setSelectedItem("No");
            }else{ 
                if(jcTransgNorma.getSelectedItem().equals("No")){
                    jcResptNorma.setSelectedItem("Sí");
                }else{
                    jcResptNorma.setSelectedIndex(0);
                }
            }
        }
    }//GEN-LAST:event_jcTransgNormaItemStateChanged

    private void txtDocPacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocPacActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocPacActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AreaPsicosocial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AreaPsicosocial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AreaPsicosocial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AreaPsicosocial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AreaPsicosocial().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JDateChooser FechaAreaPsico;
    private javax.swing.JButton btnBuscarFisioterapia;
    public static javax.swing.JButton btnBusquedaPac;
    public static javax.swing.JButton btnBusquedaProf;
    public static javax.swing.JButton btnCrearAreaPsico;
    private javax.swing.JButton btnLimpiarFisioterapia;
    private javax.swing.JButton btnSalirFisioterapia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane20;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer1;
    public static javax.swing.JComboBox jcAutoridad;
    public static javax.swing.JComboBox jcEntCompaneros;
    public static javax.swing.JComboBox jcEntExtranos;
    public static javax.swing.JComboBox jcEntFamiliares;
    public static javax.swing.JComboBox jcEntPadres;
    public static javax.swing.JComboBox jcEscolaridad;
    public static javax.swing.JComboBox jcFAbotonarse;
    public static javax.swing.JComboBox jcFAlimentacion;
    public static javax.swing.JComboBox jcFAmarrarse;
    public static javax.swing.JComboBox jcFBanoCorp;
    public static javax.swing.JComboBox jcFDormir;
    public static javax.swing.JComboBox jcFLavarse;
    public static javax.swing.JComboBox jcFPeinarse;
    public static javax.swing.JComboBox jcFVestirse;
    public static javax.swing.JComboBox jcHorario;
    public static javax.swing.JComboBox jcObdOrdenes;
    public static javax.swing.JComboBox jcPaciente;
    public static javax.swing.JComboBox jcProfesional;
    public static javax.swing.JComboBox jcResptNorma;
    public static javax.swing.JComboBox jcTransgNorma;
    private javax.swing.JPanel jpanelAmbFam;
    private javax.swing.JPanel jpanelEnt;
    private javax.swing.JPanel jpanelFunc;
    private javax.swing.JPanel jpanelObservaciones;
    private org.jdesktop.swingx.JXTaskPane jxtpAmbFam;
    private org.jdesktop.swingx.JXTaskPane jxtpEnt;
    private org.jdesktop.swingx.JXTaskPane jxtpFunc;
    private org.jdesktop.swingx.JXTaskPane jxtpObservaciones;
    private javax.swing.JLabel lblAbotona;
    private javax.swing.JLabel lblActPref;
    private javax.swing.JLabel lblAlimentacion;
    private javax.swing.JLabel lblAmarra;
    private javax.swing.JLabel lblBanoCorp;
    private javax.swing.JLabel lblDebilidades;
    private javax.swing.JLabel lblDiaCotidiano;
    private javax.swing.JLabel lblDocPac;
    private javax.swing.JLabel lblDormir;
    private javax.swing.JLabel lblEntCompaneros;
    private javax.swing.JLabel lblEntExtranos;
    private javax.swing.JLabel lblEntFamiliares;
    private javax.swing.JLabel lblEntPadres;
    private javax.swing.JLabel lblEscolaridad;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFortalezas;
    private javax.swing.JLabel lblHorario;
    private javax.swing.JLabel lblLava;
    private javax.swing.JLabel lblLugar;
    private javax.swing.JLabel lblNHistoriaClinica;
    private javax.swing.JLabel lblObdOrdenes;
    private javax.swing.JLabel lblObligatorios;
    private javax.swing.JLabel lblObservaciones;
    private javax.swing.JLabel lblPeina;
    private javax.swing.JLabel lblPerAutoridad;
    private javax.swing.JLabel lblPerMayorT;
    private javax.swing.JLabel lblProfesional;
    private javax.swing.JLabel lblRespNorma;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTransgrNorma;
    private javax.swing.JLabel lblVisteDesv;
    public static java.awt.TextField txtActPreferida;
    public static javax.swing.JTextArea txtDebilidades;
    public static javax.swing.JTextArea txtDiaCotidiano;
    public static java.awt.TextField txtDocPac;
    public static java.awt.TextField txtDocProf;
    public static javax.swing.JTextArea txtFortalezas;
    public static java.awt.TextField txtLugar;
    public static java.awt.TextField txtNHC;
    public static javax.swing.JTextArea txtObservaciones;
    public static javax.swing.JTextArea txtPerMayorT;
    // End of variables declaration//GEN-END:variables
    /**
     * Método que permite guardar la información del área psicosocial de un paciente
     * de acuerdo a los datos ingresados.
     */
    public void guardarAreaPsicosocial(){
        String diaFecha, mesFecha, annoFecha, fecha, hc, entPadres, entFamiliares, entCompaneros, entExtranos, perMayorT, fortalezas, debilidades, resptNorma, transgNorma, obdOrdenes, autoridad = "Seleccione", actPreferida, diaCotidiano, escolaridad, horario, lugar, fBanoCorporal, fVestirse, fLavarse, fAlimentacion, fPeinarse, fAbotonarse, fDormir, fAmarrarse, Observaciones, profesional;
        profesional = "Seleccione";
        diaFecha = String.valueOf(FechaAreaPsico.getCalendar().get(Calendar.DAY_OF_MONTH));
        mesFecha = String.valueOf(FechaAreaPsico.getCalendar().get(Calendar.MONTH) + 1);
        annoFecha = String.valueOf(FechaAreaPsico.getCalendar().get(Calendar.YEAR));
        fecha = diaFecha + "/" + mesFecha + "/" + annoFecha;
        
        hc = txtNHC.getText();
        entPadres = jcEntPadres.getSelectedItem().toString();
        entFamiliares = jcEntFamiliares.getSelectedItem().toString();
        entCompaneros = jcEntCompaneros.getSelectedItem().toString();
        entExtranos = jcEntExtranos.getSelectedItem().toString();
        perMayorT = txtPerMayorT.getText();
        fortalezas = txtFortalezas.getText();
        debilidades = txtDebilidades.getText();
        resptNorma = jcResptNorma.getSelectedItem().toString();
        transgNorma = jcTransgNorma.getSelectedItem().toString();
        obdOrdenes = jcObdOrdenes.getSelectedItem().toString();
        
        for (Map.Entry<Integer, String> pAutoridad : a.entrySet()){
            int td = pAutoridad.getKey();
            if (jcAutoridad.getSelectedItem().toString().equals(pAutoridad.getValue())) {
                autoridad = String.valueOf(td);
            }
        }
        actPreferida = txtActPreferida.getText();
        diaCotidiano = txtDiaCotidiano.getText();
        escolaridad = jcEscolaridad.getSelectedItem().toString();
        horario = jcHorario.getSelectedItem().toString();
        lugar = txtLugar.getText();
        fBanoCorporal = jcFBanoCorp.getSelectedItem().toString();
        fVestirse = jcFVestirse.getSelectedItem().toString();
        fLavarse = jcFLavarse.getSelectedItem().toString();
        fAlimentacion = jcFAlimentacion.getSelectedItem().toString();
        fPeinarse = jcFPeinarse.getSelectedItem().toString();
        fAbotonarse = jcFAbotonarse.getSelectedItem().toString();
        fDormir = jcFDormir.getSelectedItem().toString();
        fAmarrarse = jcFAmarrarse.getSelectedItem().toString();
        Observaciones = txtObservaciones.getText();
        
        if (!"Seleccione".equals(jcProfesional.getSelectedItem().toString())) {
            for (Map.Entry<String, String> profesionales : pr.entrySet()){
                String u = profesionales.getKey();
                if (jcProfesional.getSelectedItem().toString().equals(profesionales.getValue())) {
                    profesional = u;
                }
            }
        }
        
        if (!escolaridad.equals("Seleccione")) {
            if (escolaridad.equals("Sí")) {
                if((fecha == null || fecha.trim().isEmpty()) || (hc == null || hc.trim().isEmpty()) || (entPadres.equals("Seleccione")) || (entFamiliares.equals("Seleccione")) || (entCompaneros.equals("Seleccione")) || (entExtranos.equals("Seleccione")) || (perMayorT == null || perMayorT.trim().isEmpty()) || (fortalezas == null || fortalezas.trim().isEmpty()) || (debilidades == null || debilidades.trim().isEmpty()) || 
                        (resptNorma.equals("Seleccione")) || (transgNorma.equals("Seleccione")) ||(obdOrdenes.equals("Seleccione")) || (autoridad.equals("Seleccione")) || (actPreferida == null || actPreferida.trim().isEmpty()) || (diaCotidiano == null || diaCotidiano.trim().isEmpty()) || (horario.equals("Seleccione")) || (lugar == null || lugar.trim().isEmpty()) || (fBanoCorporal.equals("Seleccione")) || 
                        (fVestirse.equals("Seleccione")) || (fLavarse.equals("Seleccione")) || (fAlimentacion.equals("Seleccione")) || (fPeinarse.equals("Seleccione")) || (fAbotonarse.equals("Seleccione")) || (fDormir.equals("Seleccione")) || (fAmarrarse.equals("Seleccione")) || (profesional.equals("Seleccione")) || (Observaciones == null || Observaciones.trim().isEmpty())){
                    JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else{
                    if (OpAreaPsicosocial.validarTerapias(hc)) {
                        int a = OpAreaPsicosocial.guardar(fecha, hc, entPadres, entFamiliares, entCompaneros, entExtranos, perMayorT, fortalezas, debilidades, 
             resptNorma, transgNorma, obdOrdenes, autoridad, actPreferida, diaCotidiano, escolaridad, horario, lugar, fBanoCorporal, fVestirse, 
             fLavarse, fAlimentacion, fPeinarse, fAbotonarse, fDormir, fAmarrarse, Observaciones, profesional);
                        if (a == 0) {
                            FechaAreaPsico.setDate(new Date());
                            jcPaciente.removeAllItems();
                            jcPaciente.addItem("Seleccione");
                            txtNHC.setText("");
                            jcEntPadres.setSelectedIndex(0);
                            jcEntFamiliares.setSelectedIndex(0);
                            jcEntCompaneros.setSelectedIndex(0);
                            jcEntExtranos.setSelectedIndex(0);
                            txtPerMayorT.setText("");
                            txtFortalezas.setText("");
                            txtDebilidades.setText("");
                            jcResptNorma.setSelectedIndex(0);
                            jcTransgNorma.setSelectedIndex(0);
                            jcObdOrdenes.enable(false);
                            jcAutoridad.setSelectedIndex(0);
                            txtActPreferida.setText("");
                            txtDiaCotidiano.setText("");
                            jcEscolaridad.setSelectedIndex(0);
                            jcHorario.setSelectedIndex(0);
                            jcHorario.setEnabled(false);
                            txtLugar.setText("");
                            txtLugar.setEnabled(false);
                            jcFBanoCorp.setSelectedIndex(0);
                            jcFVestirse.setSelectedIndex(0);
                            jcFLavarse.setSelectedIndex(0);
                            jcFAlimentacion.setSelectedIndex(0);
                            jcFPeinarse.setSelectedIndex(0);
                            jcFAbotonarse.setSelectedIndex(0);
                            jcFDormir.setSelectedIndex(0);
                            jcFAmarrarse.setSelectedIndex(0);
                            txtObservaciones.enable(true);
                            txtObservaciones.setText("");
                            jcProfesional.enable(true);
                            jcProfesional.removeAllItems();
                            jcProfesional.addItem("Seleccione");
                            txtDocProf.setEnabled(true);
                            btnCrearAreaPsico.setEnabled(true);
                            jxtpEnt.setCollapsed(true);
                            jxtpAmbFam.setCollapsed(true);
                            jxtpFunc.setCollapsed(true);
                            jxtpObservaciones.setCollapsed(true);
                            txtDocPac.setText("");
                            txtDocProf.setText("");
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "El paciente ingresado no tiene asignada dicha terapia", "Gestión Asdesilla", JOptionPane.WARNING_MESSAGE);
                        jxtpEnt.setCollapsed(true);
                        jxtpAmbFam.setCollapsed(true);
                        jxtpFunc.setCollapsed(true);
                        jxtpObservaciones.setCollapsed(true);
                    }
                }
            }else{
                if((fecha == null || fecha.trim().isEmpty()) || (hc == null || hc.trim().isEmpty()) || (entPadres.equals("Seleccione")) || (entFamiliares.equals("Seleccione")) || (entCompaneros.equals("Seleccione")) || (entExtranos.equals("Seleccione")) || (perMayorT == null || perMayorT.trim().isEmpty()) || (fortalezas == null || fortalezas.trim().isEmpty()) || (debilidades == null || debilidades.trim().isEmpty()) || 
                        (resptNorma.equals("Seleccione")) || (transgNorma.equals("Seleccione")) ||(obdOrdenes.equals("Seleccione")) || (autoridad.equals("Seleccione")) || (actPreferida == null || actPreferida.trim().isEmpty()) || (diaCotidiano == null || diaCotidiano.trim().isEmpty()) || (fBanoCorporal.equals("Seleccione")) || (fVestirse.equals("Seleccione")) || (fLavarse.equals("Seleccione")) || 
                        (fAlimentacion.equals("Seleccione")) || (fPeinarse.equals("Seleccione")) || (fAbotonarse.equals("Seleccione")) || (fDormir.equals("Seleccione")) || (fAmarrarse.equals("Seleccione")) || (profesional.equals("Seleccione")) || (Observaciones == null || Observaciones.trim().isEmpty())){
                    JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios");
                }else{
                    if (OpAreaPsicosocial.validarTerapias(hc)) {
                        int a = OpAreaPsicosocial.guardar(fecha, hc, entPadres, entFamiliares, entCompaneros, entExtranos, perMayorT, fortalezas, debilidades, 
             resptNorma, transgNorma, obdOrdenes, autoridad, actPreferida, diaCotidiano, escolaridad, horario, lugar, fBanoCorporal, fVestirse, 
             fLavarse, fAlimentacion, fPeinarse, fAbotonarse, fDormir, fAmarrarse, Observaciones, profesional);
                        if (a == 0) {
                            FechaAreaPsico.setDate(new Date());
                            jcPaciente.removeAllItems();
                            jcPaciente.addItem("Seleccione");
                            txtNHC.setText("");
                            jcEntPadres.setSelectedIndex(0);
                            jcEntFamiliares.setSelectedIndex(0);
                            jcEntCompaneros.setSelectedIndex(0);
                            jcEntExtranos.setSelectedIndex(0);
                            txtPerMayorT.setText("");
                            txtFortalezas.setText("");
                            txtDebilidades.setText("");
                            jcResptNorma.setSelectedIndex(0);
                            jcTransgNorma.setSelectedIndex(0);
                            jcObdOrdenes.enable(false);
                            jcAutoridad.setSelectedIndex(0);
                            txtActPreferida.setText("");
                            txtDiaCotidiano.setText("");
                            jcEscolaridad.setSelectedIndex(0);
                            jcHorario.setSelectedIndex(0);
                            jcHorario.setEnabled(false);
                            txtLugar.setText("");
                            txtLugar.setEnabled(false);
                            jcFBanoCorp.setSelectedIndex(0);
                            jcFVestirse.setSelectedIndex(0);
                            jcFLavarse.setSelectedIndex(0);
                            jcFAlimentacion.setSelectedIndex(0);
                            jcFPeinarse.setSelectedIndex(0);
                            jcFAbotonarse.setSelectedIndex(0);
                            jcFDormir.setSelectedIndex(0);
                            jcFAmarrarse.setSelectedIndex(0);
                            txtObservaciones.enable(true);
                            txtObservaciones.setText("");
                            jcProfesional.enable(true);
                            jcProfesional.removeAllItems();
                            jcProfesional.addItem("Seleccione");
                            txtDocProf.setEnabled(true);
                            btnCrearAreaPsico.setEnabled(true);
                            jxtpEnt.setCollapsed(true);
                            jxtpAmbFam.setCollapsed(true);
                            jxtpFunc.setCollapsed(true);
                            jxtpObservaciones.setCollapsed(true);
                            txtDocPac.setText("");
                            txtDocProf.setText("");
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "El paciente ingresado no tiene asignada dicha terapia", "Gestión Asdesilla", JOptionPane.WARNING_MESSAGE);
                        jxtpEnt.setCollapsed(true);
                        jxtpAmbFam.setCollapsed(true);
                        jxtpFunc.setCollapsed(true);
                        jxtpObservaciones.setCollapsed(true);
                    }
                }
            }
        }else{
            if((fecha == null || fecha.trim().isEmpty()) || (hc == null || hc.trim().isEmpty()) || (entPadres.equals("Seleccione")) || (entFamiliares.equals("Seleccione")) || (entCompaneros.equals("Seleccione")) || (entExtranos.equals("Seleccione")) || (perMayorT == null || perMayorT.trim().isEmpty()) || (fortalezas == null || fortalezas.trim().isEmpty()) || (debilidades == null || debilidades.trim().isEmpty()) || 
                        (resptNorma.equals("Seleccione")) || (transgNorma.equals("Seleccione")) ||(obdOrdenes.equals("Seleccione")) || (autoridad.equals("Seleccione")) || (actPreferida == null || actPreferida.trim().isEmpty()) || (diaCotidiano == null || diaCotidiano.trim().isEmpty()) || (fBanoCorporal.equals("Seleccione")) || 
                        (fVestirse.equals("Seleccione")) || (fLavarse.equals("Seleccione")) || (fAlimentacion.equals("Seleccione")) || (fPeinarse.equals("Seleccione")) || (fAbotonarse.equals("Seleccione")) || (fDormir.equals("Seleccione")) || (fAmarrarse.equals("Seleccione")) || (profesional.equals("Seleccione")) || (Observaciones == null || Observaciones.trim().isEmpty())){
                    JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios");
            }else{
                JOptionPane.showMessageDialog(null, "Debe diligenciar el campo escolaridad", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
