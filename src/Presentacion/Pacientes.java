/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AccesoDatos.OpPacientes;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Esta clase permite pintar la ventana Pacientes, con sus respectivos componentes, para el manejo de dicha información
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class Pacientes extends javax.swing.JFrame {
    Map<String, String> p;
    TreeMap<Integer, String> e;
    TreeMap<Integer, String> td;
    TreeMap<Integer, String> g;
    TreeMap<Integer, String> ec;
    TreeMap<Integer, String> d;
    TreeMap<Integer, String> m;
    TreeMap<Integer, String> tr;
    Date date;
    
    public Pacientes() {
        try {
            initComponents();
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DATE, -1);
            date = cal.getTime();
            FechaN.setMaxSelectableDate(date);
            FechaN.getDateEditor().setEnabled(false);
            if (InicioSesion.r.equals("2")) {
                btnCrear.setEnabled(false);
            }
            jxtpAntecedentes.add(jpanelAntecedentes);
            jxtpAcompFamiliar.add(jPanelAcompFamiliar);
            jxtpRemision.add(jPanelRemision);
            
            e = OpPacientes.obtenerEps();
            Iterator l = e.keySet().iterator();
            while(l.hasNext()){
                jcEPS.addItem(e.get(l.next()));
            }
            
            td = OpPacientes.obtenerTipoDoc();
            Iterator t = td.keySet().iterator();
            while(t.hasNext()){
                jcTipoDoc.addItem(td.get(t.next()));
            }
            
            g = OpPacientes.obtenerGeneros();
            Iterator r = g.keySet().iterator();
            while(r.hasNext()){
                jcGenero.addItem(g.get(r.next()));
            }
            
            ec = OpPacientes.obtenerEstadoCivil();
            Iterator c = ec.keySet().iterator();
            while(c.hasNext()){
                jcestadoCivil.addItem(ec.get(c.next()));
            }
            
            d = OpPacientes.obtenerDepartamentos();
            Iterator dep = d.keySet().iterator();
            while(dep.hasNext()){
                jcDepartamento.addItem(d.get(dep.next()));
            }
            
            tr = OpPacientes.obtenerTipoRemision();
            Iterator e = tr.keySet().iterator();
            while(e.hasNext()){
                jcTipoRemision.addItem(tr.get(e.next()));
            }
            FechaN.setDate(new Date());
            setIconImage(new ImageIcon(getClass().getResource("/Imagenes/Patients-icon.png")).getImage());
        } catch (SQLException ex) {
            Logger.getLogger(Pacientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelAntecedentes = new javax.swing.JPanel();
        labelAntPNatales = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtAntPNatales = new javax.swing.JTextArea();
        labelAntMedicos = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtAntMedicos = new javax.swing.JTextArea();
        labelAntFamiliares = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtAntFamiliares = new javax.swing.JTextArea();
        labelAntQuirurgicos = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtAntQuirurgicos = new javax.swing.JTextArea();
        labelOtrosAnt = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        txtOtrosAnt = new javax.swing.JTextArea();
        jPanelAcompFamiliar = new javax.swing.JPanel();
        labelDocFam = new javax.swing.JLabel();
        txtDocFam = new java.awt.TextField();
        btnBusqueda = new javax.swing.JButton();
        jcFamiliar = new javax.swing.JComboBox();
        jPanelRemision = new javax.swing.JPanel();
        labelTipoRemision = new javax.swing.JLabel();
        jcTipoRemision = new javax.swing.JComboBox();
        labelRemitido = new javax.swing.JLabel();
        txtRemitidoPor = new java.awt.TextField();
        txtNombre = new java.awt.TextField();
        jcestadoCivil = new javax.swing.JComboBox();
        txtNdoc = new java.awt.TextField();
        jcTipoDoc = new javax.swing.JComboBox();
        labelLExp = new javax.swing.JLabel();
        labelDireccion = new javax.swing.JLabel();
        labelBarrio = new javax.swing.JLabel();
        labelTelefono = new javax.swing.JLabel();
        labelMunicipio = new javax.swing.JLabel();
        labelCelular = new javax.swing.JLabel();
        labelOcupacion = new javax.swing.JLabel();
        labelEps = new javax.swing.JLabel();
        txtCelular = new java.awt.TextField();
        txtBarrio = new java.awt.TextField();
        btnCrear = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        FechaN = new com.toedter.calendar.JDateChooser();
        labelNombre = new javax.swing.JLabel();
        labelNDoc = new javax.swing.JLabel();
        labelFechaN = new javax.swing.JLabel();
        labelEstCivil = new javax.swing.JLabel();
        labelGenero = new javax.swing.JLabel();
        labelTipoDoc = new javax.swing.JLabel();
        labelObligatorios = new javax.swing.JLabel();
        labelTitulo = new javax.swing.JLabel();
        jcEPS = new javax.swing.JComboBox();
        txtApellido1 = new java.awt.TextField();
        labelAp1 = new javax.swing.JLabel();
        labelAp2 = new javax.swing.JLabel();
        txtApellido2 = new java.awt.TextField();
        jcGenero = new javax.swing.JComboBox();
        jXTaskPaneContainer1 = new org.jdesktop.swingx.JXTaskPaneContainer();
        jxtpAcompFamiliar = new org.jdesktop.swingx.JXTaskPane();
        jxtpRemision = new org.jdesktop.swingx.JXTaskPane();
        jxtpAntecedentes = new org.jdesktop.swingx.JXTaskPane();
        labelDepartamento = new javax.swing.JLabel();
        txtDRes = new java.awt.TextField();
        txtOcupacion = new java.awt.TextField();
        txtLExp = new java.awt.TextField();
        txtTelefono = new java.awt.TextField();
        jcDepartamento = new javax.swing.JComboBox();
        jcMunicipio = new javax.swing.JComboBox();
        labelAcompanamiento = new javax.swing.JLabel();
        jcDiscapacidad = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();

        jpanelAntecedentes.setMinimumSize(new java.awt.Dimension(1193, 225));
        jpanelAntecedentes.setPreferredSize(new java.awt.Dimension(1193, 225));
        jpanelAntecedentes.setLayout(null);

        labelAntPNatales.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAntPNatales.setText("*Peri - Pre - Posnatales:");
        jpanelAntecedentes.add(labelAntPNatales);
        labelAntPNatales.setBounds(40, 10, 160, 15);

        txtAntPNatales.setColumns(20);
        txtAntPNatales.setRows(5);
        jScrollPane5.setViewportView(txtAntPNatales);

        jpanelAntecedentes.add(jScrollPane5);
        jScrollPane5.setBounds(180, 10, 400, 50);

        labelAntMedicos.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAntMedicos.setText("*Médicos:");
        jpanelAntecedentes.add(labelAntMedicos);
        labelAntMedicos.setBounds(640, 10, 60, 15);

        txtAntMedicos.setColumns(20);
        txtAntMedicos.setRows(5);
        jScrollPane6.setViewportView(txtAntMedicos);

        jpanelAntecedentes.add(jScrollPane6);
        jScrollPane6.setBounds(780, 10, 390, 50);

        labelAntFamiliares.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAntFamiliares.setText("*Familiares:");
        jpanelAntecedentes.add(labelAntFamiliares);
        labelAntFamiliares.setBounds(40, 80, 70, 15);

        txtAntFamiliares.setColumns(20);
        txtAntFamiliares.setRows(5);
        jScrollPane7.setViewportView(txtAntFamiliares);

        jpanelAntecedentes.add(jScrollPane7);
        jScrollPane7.setBounds(180, 80, 400, 50);

        labelAntQuirurgicos.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAntQuirurgicos.setText("*Quirúrgicos:");
        jpanelAntecedentes.add(labelAntQuirurgicos);
        labelAntQuirurgicos.setBounds(640, 80, 70, 15);

        txtAntQuirurgicos.setColumns(20);
        txtAntQuirurgicos.setRows(5);
        jScrollPane8.setViewportView(txtAntQuirurgicos);

        jpanelAntecedentes.add(jScrollPane8);
        jScrollPane8.setBounds(780, 80, 390, 50);

        labelOtrosAnt.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelOtrosAnt.setText("*Otros antecedentes:");
        jpanelAntecedentes.add(labelOtrosAnt);
        labelOtrosAnt.setBounds(40, 150, 132, 30);

        txtOtrosAnt.setColumns(20);
        txtOtrosAnt.setRows(5);
        jScrollPane9.setViewportView(txtOtrosAnt);

        jpanelAntecedentes.add(jScrollPane9);
        jScrollPane9.setBounds(180, 150, 400, 50);

        jPanelAcompFamiliar.setMinimumSize(new java.awt.Dimension(1193, 105));
        jPanelAcompFamiliar.setPreferredSize(new java.awt.Dimension(1193, 105));
        jPanelAcompFamiliar.setLayout(null);

        labelDocFam.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDocFam.setText("*Documento Familiar:");
        jPanelAcompFamiliar.add(labelDocFam);
        labelDocFam.setBounds(40, 50, 120, 15);

        txtDocFam.setBackground(new java.awt.Color(255, 255, 255));
        jPanelAcompFamiliar.add(txtDocFam);
        txtDocFam.setBounds(180, 50, 170, 19);

        btnBusqueda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaActionPerformed(evt);
            }
        });
        jPanelAcompFamiliar.add(btnBusqueda);
        btnBusqueda.setBounds(360, 40, 50, 30);

        jcFamiliar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jPanelAcompFamiliar.add(jcFamiliar);
        jcFamiliar.setBounds(420, 50, 240, 27);

        jPanelRemision.setMinimumSize(new java.awt.Dimension(1193, 95));
        jPanelRemision.setPreferredSize(new java.awt.Dimension(1193, 95));
        jPanelRemision.setLayout(null);

        labelTipoRemision.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTipoRemision.setText("*Tipo de remisión:");
        jPanelRemision.add(labelTipoRemision);
        labelTipoRemision.setBounds(70, 40, 120, 15);

        jcTipoRemision.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jPanelRemision.add(jcTipoRemision);
        jcTipoRemision.setBounds(210, 40, 140, 27);

        labelRemitido.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelRemitido.setText("*Remitido por:");
        jPanelRemision.add(labelRemitido);
        labelRemitido.setBounds(590, 40, 80, 15);
        jPanelRemision.add(txtRemitidoPor);
        txtRemitidoPor.setBounds(770, 40, 250, 19);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pacientes");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1290, 735));
        setResizable(false);
        getContentPane().setLayout(null);
        getContentPane().add(txtNombre);
        txtNombre.setBounds(600, 130, 218, 19);

        jcestadoCivil.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcestadoCivil);
        jcestadoCivil.setBounds(1030, 170, 140, 27);
        getContentPane().add(txtNdoc);
        txtNdoc.setBounds(160, 90, 220, 19);

        jcTipoDoc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcTipoDoc);
        jcTipoDoc.setBounds(600, 90, 140, 27);

        labelLExp.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelLExp.setText("*Lugar de expedición:");
        getContentPane().add(labelLExp);
        labelLExp.setBounds(870, 90, 120, 15);

        labelDireccion.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDireccion.setText("*Dirección de residencia:");
        getContentPane().add(labelDireccion);
        labelDireccion.setBounds(460, 290, 140, 15);

        labelBarrio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelBarrio.setText("*Barrio:");
        getContentPane().add(labelBarrio);
        labelBarrio.setBounds(20, 290, 67, 15);

        labelTelefono.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTelefono.setText("Teléfono:");
        getContentPane().add(labelTelefono);
        labelTelefono.setBounds(20, 210, 60, 15);

        labelMunicipio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelMunicipio.setText("*Municipio:");
        getContentPane().add(labelMunicipio);
        labelMunicipio.setBounds(870, 250, 60, 15);

        labelCelular.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelCelular.setText("*Celular:");
        getContentPane().add(labelCelular);
        labelCelular.setBounds(460, 210, 50, 15);

        labelOcupacion.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelOcupacion.setText("*Ocupación:");
        getContentPane().add(labelOcupacion);
        labelOcupacion.setBounds(20, 250, 70, 15);

        labelEps.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelEps.setText("*EPS:");
        getContentPane().add(labelEps);
        labelEps.setBounds(870, 210, 40, 15);

        txtCelular.setBackground(new java.awt.Color(255, 255, 255));
        txtCelular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCelularKeyTyped(evt);
            }
        });
        getContentPane().add(txtCelular);
        txtCelular.setBounds(600, 210, 140, 19);

        txtBarrio.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtBarrio);
        txtBarrio.setBounds(160, 290, 210, 19);

        btnCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        getContentPane().add(btnCrear);
        btnCrear.setBounds(120, 670, 140, 34);

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/update.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar);
        btnModificar.setBounds(290, 670, 140, 34);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(470, 670, 140, 34);

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disable-icon.png"))); // NOI18N
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar);
        btnEliminar.setBounds(640, 670, 140, 34);

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(810, 670, 140, 34);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir);
        btnSalir.setBounds(990, 670, 130, 34);

        FechaN.setDate(date);
        FechaN.setDateFormatString("dd-MM-yyyy");
        FechaN.setMaxSelectableDate(date);
        FechaN.setMinSelectableDate(new java.util.Date(-62135747894000L));
        FechaN.setName("FechaN"); // NOI18N
        getContentPane().add(FechaN);
        FechaN.setBounds(160, 130, 220, 22);

        labelNombre.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNombre.setText("*Nombre:");
        getContentPane().add(labelNombre);
        labelNombre.setBounds(460, 130, 60, 15);

        labelNDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNDoc.setText("*Número de documento:");
        getContentPane().add(labelNDoc);
        labelNDoc.setBounds(20, 90, 140, 15);

        labelFechaN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelFechaN.setText("*Fecha de nacimiento:");
        getContentPane().add(labelFechaN);
        labelFechaN.setBounds(20, 130, 120, 15);

        labelEstCivil.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelEstCivil.setText("*Estado civil:");
        getContentPane().add(labelEstCivil);
        labelEstCivil.setBounds(870, 170, 70, 15);

        labelGenero.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelGenero.setText("*Género:");
        getContentPane().add(labelGenero);
        labelGenero.setBounds(460, 170, 50, 15);

        labelTipoDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTipoDoc.setText("*Tipo de documento:");
        getContentPane().add(labelTipoDoc);
        labelTipoDoc.setBounds(460, 90, 120, 15);

        labelObligatorios.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelObligatorios.setText("Los campos con * son obligatorios");
        getContentPane().add(labelObligatorios);
        labelObligatorios.setBounds(520, 50, 210, 15);

        labelTitulo.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelTitulo.setText("INFORMACIÓN DE PACIENTE");
        getContentPane().add(labelTitulo);
        labelTitulo.setBounds(540, 20, 188, 15);

        jcEPS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcEPS);
        jcEPS.setBounds(1030, 210, 210, 27);
        getContentPane().add(txtApellido1);
        txtApellido1.setBounds(1030, 130, 218, 19);

        labelAp1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAp1.setText("*Primer Apellido:");
        getContentPane().add(labelAp1);
        labelAp1.setBounds(870, 130, 90, 15);

        labelAp2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAp2.setText("Segundo Apellido:");
        getContentPane().add(labelAp2);
        labelAp2.setBounds(20, 170, 113, 15);
        getContentPane().add(txtApellido2);
        txtApellido2.setBounds(160, 170, 218, 19);

        jcGenero.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcGenero);
        jcGenero.setBounds(600, 170, 140, 27);

        jXTaskPaneContainer1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jXTaskPaneContainer1.setMinimumSize(new java.awt.Dimension(240, 88));
        jXTaskPaneContainer1.setPreferredSize(new java.awt.Dimension(240, 88));
        org.jdesktop.swingx.VerticalLayout verticalLayout1 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout1.setGap(14);
        jXTaskPaneContainer1.setLayout(verticalLayout1);

        jxtpAcompFamiliar.setToolTipText("");
        jxtpAcompFamiliar.setCollapsed(true);
        jxtpAcompFamiliar.setTitle("ACOMPAÑAMIENTO FAMILIAR");
        jXTaskPaneContainer1.add(jxtpAcompFamiliar);

        jxtpRemision.setCollapsed(true);
        jxtpRemision.setTitle("REMISIÓN");
        jXTaskPaneContainer1.add(jxtpRemision);

        jxtpAntecedentes.setCollapsed(true);
        jxtpAntecedentes.setTitle("ANTECEDENTES");
        jXTaskPaneContainer1.add(jxtpAntecedentes);

        getContentPane().add(jXTaskPaneContainer1);
        jXTaskPaneContainer1.setBounds(10, 310, 1270, 360);

        labelDepartamento.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDepartamento.setText("*Departamento:");
        getContentPane().add(labelDepartamento);
        labelDepartamento.setBounds(460, 250, 90, 15);
        getContentPane().add(txtDRes);
        txtDRes.setBounds(600, 290, 250, 19);
        getContentPane().add(txtOcupacion);
        txtOcupacion.setBounds(160, 250, 218, 19);
        getContentPane().add(txtLExp);
        txtLExp.setBounds(1030, 90, 218, 19);

        txtTelefono.setBackground(new java.awt.Color(255, 255, 255));
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });
        getContentPane().add(txtTelefono);
        txtTelefono.setBounds(160, 210, 140, 19);

        jcDepartamento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jcDepartamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcDepartamentoItemStateChanged(evt);
            }
        });
        getContentPane().add(jcDepartamento);
        jcDepartamento.setBounds(600, 250, 210, 27);

        jcMunicipio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcMunicipio);
        jcMunicipio.setBounds(1030, 250, 210, 27);

        labelAcompanamiento.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAcompanamiento.setText("*Requiere acompañamiento:");
        getContentPane().add(labelAcompanamiento);
        labelAcompanamiento.setBounds(870, 290, 160, 15);

        jcDiscapacidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Sí", "No" }));
        getContentPane().add(jcDiscapacidad);
        jcDiscapacidad.setBounds(1030, 290, 140, 27);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel10.setText("jLabel10");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(0, 0, 1300, 730);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Llama al método guardar
     * @param evt 
     */
    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        guardar();
    }//GEN-LAST:event_btnCrearActionPerformed
    /**
     * Limpia los campos del formulario, asignandoles el valor por defecto
     * @param evt 
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtNdoc.setEnabled(true);
        txtNdoc.setText("");
        jcTipoDoc.setEnabled(true);
        jcTipoDoc.setSelectedIndex(0);
        txtNombre.setEnabled(true);
        txtNombre.setText("");
        txtApellido1.setEnabled(true);
        txtApellido1.setText("");
        txtApellido2.setEnabled(true);
        txtApellido2.setText("");
        FechaN.setEnabled(true);
        FechaN.setDate(new Date());
        FechaN.getDateEditor().setEnabled(false);
        jcGenero.setEnabled(true);
        jcGenero.setSelectedIndex(0);
        jcestadoCivil.setEnabled(true);
        jcestadoCivil.setSelectedIndex(0);
        txtLExp.setEnabled(true);
        txtLExp.setText("");
        txtDRes.setEnabled(true);
        txtDRes.setText("");
        txtBarrio.setEnabled(true);
        txtBarrio.setText("");
        jcDepartamento.setEnabled(true);
        jcDepartamento.setSelectedIndex(0);
        jcMunicipio.setEnabled(true);
        jcMunicipio.removeAllItems();
        jcMunicipio.addItem("Seleccione");
        txtTelefono.setEnabled(true);
        txtTelefono.setText("");
        txtCelular.setEnabled(true);
        txtCelular.setText("");
        txtOcupacion.setEnabled(true);
        txtOcupacion.setText("");
        jcEPS.setEnabled(true);
        jcEPS.setSelectedIndex(0);
        txtDocFam.setEnabled(true);
        txtDocFam.setText("");
        btnBusqueda.setEnabled(true);
        jcFamiliar.setEnabled(true);
        jcFamiliar.removeAllItems();
        jcFamiliar.addItem("Seleccione");
        txtAntPNatales.setEnabled(true);
        txtAntPNatales.setText("");
        txtAntMedicos.setEnabled(true);
        txtAntMedicos.setText("");
        txtAntFamiliares.setEnabled(true);
        txtAntFamiliares.setText("");
        txtAntQuirurgicos.setEnabled(true);
        txtAntQuirurgicos.setText("");
        txtOtrosAnt.setEnabled(true);
        txtOtrosAnt.setText("");
        jcDiscapacidad.setEnabled(true);
        jcDiscapacidad.setSelectedIndex(0);
        jcTipoRemision.setEnabled(true);
        jcTipoRemision.setSelectedIndex(0);
        txtRemitidoPor.setEnabled(true);
        txtRemitidoPor.setText("");
        if (InicioSesion.r.equals("2")) {
            btnCrear.setEnabled(false);
        }else{
            btnCrear.setEnabled(true);
        }
        btnEliminar.setEnabled(false);
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
        btnModificar.setEnabled(false);
        jxtpAntecedentes.setCollapsed(true);
        jxtpAcompFamiliar.setCollapsed(true);
        jxtpRemision.setCollapsed(true);
    }//GEN-LAST:event_btnLimpiarActionPerformed
    /**
     * Llama la interfaz para la visualización de los registros
     * @param evt 
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        new PacientesRegistros().setVisible(true);
    }//GEN-LAST:event_btnBuscarActionPerformed
    /**
     * Llama al método cambiar estado
     * @param evt 
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        cambiarEstado();
    }//GEN-LAST:event_btnEliminarActionPerformed
    /**
     * Llama al método modificar
     * @param evt 
     */
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        modificar();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txtCelularKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelularKeyTyped
        try {
            int num = Integer.parseInt("" + evt.getKeyChar());

        } catch (Exception ev) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCelularKeyTyped
    /**
     * Regresa al menú principal
     * @param evt 
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        new Menu().setVisible(true);
        this.hide();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        try {
            int num = Integer.parseInt("" + evt.getKeyChar());

        } catch (Exception ev) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    /**
     * Carga los municipios respectivos de acuerdo al departamento seleccionado
     * @param evt 
     */
    private void jcDepartamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcDepartamentoItemStateChanged
        String departamento = "Seleccione";
        jcMunicipio.removeAllItems();
        jcMunicipio.addItem("Seleccione");
        for (Map.Entry<Integer, String> dep : d.entrySet()){
            int d = dep.getKey();
            if (jcDepartamento.getSelectedItem().toString().equals(dep.getValue())) {
                departamento = String.valueOf(d);
            }
        }
        if(!departamento.equals("Seleccione")){
            try {
                m = OpPacientes.obtenerMunicipios(departamento);
                Iterator mun = m.keySet().iterator();
                while(mun.hasNext()){
                    jcMunicipio.addItem(m.get(mun.next()));
                }
            } catch (SQLException ex) {
                Logger.getLogger(Familiares.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            jcMunicipio.removeAllItems();
            jcMunicipio.addItem("Seleccione");
        }
    }//GEN-LAST:event_jcDepartamentoItemStateChanged

    /**
     * Búsqueda del grupo familiar de acuerdo
     * a los familiares coincidentes según un carácter ingresado
     * @param evt 
     */
    private void btnBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaActionPerformed
        if(txtDocFam.getText() == null || txtDocFam.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de identificación \n de uno de los miembros de su grupo familiar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcFamiliar.removeAllItems();
                p = OpPacientes.obtenerFamiliares(txtDocFam.getText());
                Iterator it = p.keySet().iterator();
                if (p.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcFamiliar.addItem("Seleccione");
                while(it.hasNext()){
                    jcFamiliar.addItem(p.get(it.next()));
                }
                //txtDocFam.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(PacientesRegistros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pacientes().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JDateChooser FechaN;
    private javax.swing.JButton btnBuscar;
    public static javax.swing.JButton btnBusqueda;
    public static javax.swing.JButton btnCrear;
    public static javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    public static javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JPanel jPanelAcompFamiliar;
    private javax.swing.JPanel jPanelRemision;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer1;
    public static javax.swing.JComboBox jcDepartamento;
    public static javax.swing.JComboBox jcDiscapacidad;
    public static javax.swing.JComboBox jcEPS;
    public static javax.swing.JComboBox jcFamiliar;
    public static javax.swing.JComboBox jcGenero;
    public static javax.swing.JComboBox jcMunicipio;
    public static javax.swing.JComboBox jcTipoDoc;
    public static javax.swing.JComboBox jcTipoRemision;
    public static javax.swing.JComboBox jcestadoCivil;
    private javax.swing.JPanel jpanelAntecedentes;
    private org.jdesktop.swingx.JXTaskPane jxtpAcompFamiliar;
    private org.jdesktop.swingx.JXTaskPane jxtpAntecedentes;
    private org.jdesktop.swingx.JXTaskPane jxtpRemision;
    private javax.swing.JLabel labelAcompanamiento;
    private javax.swing.JLabel labelAntFamiliares;
    private javax.swing.JLabel labelAntMedicos;
    private javax.swing.JLabel labelAntPNatales;
    private javax.swing.JLabel labelAntQuirurgicos;
    private javax.swing.JLabel labelAp1;
    private javax.swing.JLabel labelAp2;
    private javax.swing.JLabel labelBarrio;
    private javax.swing.JLabel labelCelular;
    private javax.swing.JLabel labelDepartamento;
    private javax.swing.JLabel labelDireccion;
    private javax.swing.JLabel labelDocFam;
    private javax.swing.JLabel labelEps;
    private javax.swing.JLabel labelEstCivil;
    private javax.swing.JLabel labelFechaN;
    private javax.swing.JLabel labelGenero;
    private javax.swing.JLabel labelLExp;
    private javax.swing.JLabel labelMunicipio;
    private javax.swing.JLabel labelNDoc;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelObligatorios;
    private javax.swing.JLabel labelOcupacion;
    private javax.swing.JLabel labelOtrosAnt;
    private javax.swing.JLabel labelRemitido;
    private javax.swing.JLabel labelTelefono;
    private javax.swing.JLabel labelTipoDoc;
    private javax.swing.JLabel labelTipoRemision;
    private javax.swing.JLabel labelTitulo;
    public static javax.swing.JTextArea txtAntFamiliares;
    public static javax.swing.JTextArea txtAntMedicos;
    public static javax.swing.JTextArea txtAntPNatales;
    public static javax.swing.JTextArea txtAntQuirurgicos;
    public static java.awt.TextField txtApellido1;
    public static java.awt.TextField txtApellido2;
    public static java.awt.TextField txtBarrio;
    public static java.awt.TextField txtCelular;
    public static java.awt.TextField txtDRes;
    public static java.awt.TextField txtDocFam;
    public static java.awt.TextField txtLExp;
    public static java.awt.TextField txtNdoc;
    public static java.awt.TextField txtNombre;
    public static java.awt.TextField txtOcupacion;
    public static javax.swing.JTextArea txtOtrosAnt;
    public static java.awt.TextField txtRemitidoPor;
    public static java.awt.TextField txtTelefono;
    // End of variables declaration//GEN-END:variables
    /**
     * Método que permite guardar la información de un paciente 
     * según la información ingresada
     */
    public void guardar() {
        String id, tipoId = "Seleccione", nombre, apellido1, apellido2, familiar = "Seleccione", diaFechaNacimiento, mesFechaNacimiento, annoFechaNacimiento, fechaNacimiento, genero = "Seleccione", estadoCivil = "Seleccione", lugarExpedicion, direccion, barrio, municipio = "Seleccione", departamento = "Seleccione", telefono, celular, ocupacion, salud = "Seleccione", antPNatales, antMedicos, antFamiliares, antQuirurgicos, otrosAnt, tipoRemision = "Seleccione", remitidoPor, discapacidad;

        id = txtNdoc.getText();
        
        for (Map.Entry<Integer, String> tipoDocs : td.entrySet()){
            int td = tipoDocs.getKey();
            if (jcTipoDoc.getSelectedItem().toString().equals(tipoDocs.getValue())) {
                tipoId = String.valueOf(td);
            }
        }
        nombre = txtNombre.getText();
        apellido1 = txtApellido1.getText();
        apellido2 = txtApellido2.getText();
        
        if (!"Seleccione".equals(jcFamiliar.getSelectedItem().toString())) {
            try {
                p = OpPacientes.obtenerFamiliares();
            } catch (SQLException ex) {
                Logger.getLogger(Pacientes.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Map.Entry<String, String> familiares : p.entrySet()){
                String u = familiares.getKey();
                if (jcFamiliar.getSelectedItem().toString().equals(familiares.getValue())) {
                    familiar = u;
                }
            }
        }
        for (Map.Entry<Integer, String> tipoRemisiones : tr.entrySet()){
            int tr = tipoRemisiones.getKey();
            if (jcTipoRemision.getSelectedItem().toString().equals(tipoRemisiones.getValue())) {
                tipoRemision = String.valueOf(tr);
            }
        }
        remitidoPor = txtRemitidoPor.getText();
        
        for (Map.Entry<Integer, String> generos : g.entrySet()){
            int g = generos.getKey();
            if (jcGenero.getSelectedItem().toString().equals(generos.getValue())) {
                genero = String.valueOf(g);
            }
        }
        
        for (Map.Entry<Integer, String> estCivil : ec.entrySet()){
            int ec = estCivil.getKey();
            if (jcestadoCivil.getSelectedItem().toString().equals(estCivil.getValue())) {
                estadoCivil = String.valueOf(ec);
            }
        }
        lugarExpedicion = txtLExp.getText();
        direccion = txtDRes.getText();
        barrio = txtBarrio.getText();
        
        for (Map.Entry<Integer, String> dep : d.entrySet()){
            int d = dep.getKey();
            if (jcDepartamento.getSelectedItem().toString().equals(dep.getValue())) {
                departamento = String.valueOf(d);
            }
        }
        
        if (!"Seleccione".equals(jcMunicipio.getSelectedItem().toString())) {
            for (Map.Entry<Integer, String> mun : m.entrySet()){
                int m = mun.getKey();
                if (jcMunicipio.getSelectedItem().toString().equals(mun.getValue())) {
                    municipio = String.valueOf(m);
                }
            }
        }
        
        telefono = txtTelefono.getText();
        celular = txtCelular.getText();
        ocupacion = txtOcupacion.getText();
        
        for (Map.Entry<Integer, String> eps : e.entrySet()){
            int e = eps.getKey();
            if (jcEPS.getSelectedItem().toString().equals(eps.getValue())) {
                salud = String.valueOf(e);
            }
        }
        antPNatales = txtAntPNatales.getText();
        antMedicos = txtAntMedicos.getText();
        antFamiliares = txtAntFamiliares.getText();
        antQuirurgicos = txtAntQuirurgicos.getText();
        otrosAnt = txtOtrosAnt.getText();
        discapacidad = jcDiscapacidad.getSelectedItem().toString();

        if (FechaN.getDate() != null) {
            diaFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.DAY_OF_MONTH));
            mesFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.MONTH) + 1);
            annoFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.YEAR));
            fechaNacimiento = diaFechaNacimiento + "/" + mesFechaNacimiento + "/" + annoFechaNacimiento;
        } else {
            fechaNacimiento = null;
        }

        if (!discapacidad.equals("Seleccione")) {
            if (discapacidad.equals("Sí")) {
                if ((nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (genero.equals("Seleccione")) || (estadoCivil.equals("Seleccione")) || (tipoId.equals("Seleccione")) || (id == null || id.trim().isEmpty()) || (lugarExpedicion == null || lugarExpedicion.trim().isEmpty()) || (direccion == null || direccion.trim().isEmpty()) || (barrio == null || barrio.trim().isEmpty()) || (municipio.equals("Seleccione")) || (departamento.equals("Seleccione")) || (ocupacion == null || ocupacion.trim().isEmpty()) || (salud.equals("Seleccione")) || (antPNatales == null || antPNatales.trim().isEmpty()) || (antMedicos == null || antMedicos.trim().isEmpty()) || (antFamiliares == null || antFamiliares.trim().isEmpty()) || (antQuirurgicos == null || antQuirurgicos.trim().isEmpty()) || (otrosAnt == null || otrosAnt.trim().isEmpty()) || (familiar.equals("Seleccione")) || (tipoRemision.equals("Seleccione"))||(remitidoPor == null || remitidoPor.trim().isEmpty())) {
                    JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(id.length() > 20 || id.length() < 4){
                    id = null;
                    JOptionPane.showMessageDialog(null, "El campo identificación no debe ser superior a 20 carácteres ni inferior a 4 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(id.startsWith("0")){
                    id = null;
                    JOptionPane.showMessageDialog(null, "El número de identificación ingresado es inválido", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else if(telefono.trim().isEmpty() && celular.trim().isEmpty()){
                    telefono = null;
                    celular = null;
                    JOptionPane.showMessageDialog(null, "Debe ingresar un número de teléfono o un celular", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(!telefono.trim().isEmpty() && (telefono.length() > 7 || telefono.length() < 7)) {
                    telefono = null;
                    JOptionPane.showMessageDialog(null, "El campo teléfono no debe ser superior ni inferior a 7 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else if(!celular.trim().isEmpty() && (celular.length() > 10 || celular.length() < 10)) {
                    celular = null;
                    JOptionPane.showMessageDialog(null, "El campo celular no debe ser superior ni inferior a 10 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else{
                    if (fechaNacimiento != null) {
                        Calendar c = Calendar.getInstance();
                        c.setTime(new Date());
                        int diff_anno = c.get(Calendar.YEAR)-FechaN.getCalendar().get(Calendar.YEAR);
                        int diff_mes = (c.get(Calendar.MONTH) + 1) -(FechaN.getCalendar().get(Calendar.MONTH)+ 1);
                        int diff_dia = c.get(Calendar.DATE)-FechaN.getCalendar().get(Calendar.DATE);
                        if(diff_mes<0 ||(diff_mes==0 && diff_dia<0)){
                            diff_anno = diff_anno-1;
                        }
                        if (diff_anno < 1) {
                            fechaNacimiento = null;
                            JOptionPane.showMessageDialog(null, "La fecha de nacimiento del paciente debe ser mayor o igual a 1 año", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                        } else {
                            int a = OpPacientes.guardar(id, tipoId, nombre, apellido1, apellido2, fechaNacimiento, genero, estadoCivil, lugarExpedicion, departamento, municipio, barrio, direccion, telefono, celular, ocupacion, salud, antPNatales, antMedicos, antFamiliares, antQuirurgicos, otrosAnt, tipoRemision, remitidoPor, familiar, discapacidad);
                            if (a == 0) {
                                txtNdoc.enable();
                                txtNdoc.setText("");
                                jcTipoDoc.setSelectedIndex(0);
                                txtNombre.setText("");
                                txtApellido1.setText("");
                                txtApellido2.setText("");
                                FechaN.setDate(new Date());
                                FechaN.getDateEditor().setEnabled(false);
                                jcGenero.setSelectedIndex(0);
                                jcestadoCivil.setSelectedIndex(0);
                                txtLExp.setText("");
                                txtDRes.setText("");
                                txtBarrio.setText("");
                                jcDepartamento.setSelectedIndex(0);
                                jcMunicipio.removeAllItems();
                                jcMunicipio.addItem("Seleccione");
                                txtTelefono.setText("");
                                txtCelular.setText("");
                                txtOcupacion.setText("");
                                jcEPS.setSelectedIndex(0);
                                jcTipoRemision.setSelectedIndex(0);
                                txtRemitidoPor.setText("");
                                jcFamiliar.removeAllItems();
                                jcFamiliar.addItem("Seleccione");
                                txtDocFam.setText("");
                                txtAntPNatales.setText("");
                                txtAntMedicos.setText("");
                                txtAntFamiliares.setText("");
                                txtAntQuirurgicos.setText("");
                                txtOtrosAnt.setText("");
                                jcDiscapacidad.setSelectedIndex(0);
                                jxtpAntecedentes.setCollapsed(true);
                                jxtpAcompFamiliar.setCollapsed(true);
                                jxtpRemision.setCollapsed(true);
                            }
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "La fecha de nacimiento de paciente no es válida", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }else{
                if ((nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (genero.equals("Seleccione")) || (estadoCivil.equals("Seleccione")) || (tipoId.equals("Seleccione")) || (id == null || id.trim().isEmpty()) || (lugarExpedicion == null || lugarExpedicion.trim().isEmpty()) || (direccion == null || direccion.trim().isEmpty()) || (barrio == null || barrio.trim().isEmpty()) || (municipio.equals("Seleccione")) || (departamento.equals("Seleccione")) || (ocupacion == null || ocupacion.trim().isEmpty()) || (salud.equals("Seleccione")) || (antPNatales == null || antPNatales.trim().isEmpty()) || (antMedicos == null || antMedicos.trim().isEmpty()) || (antFamiliares == null || antFamiliares.trim().isEmpty()) || (antQuirurgicos == null || antQuirurgicos.trim().isEmpty()) || (otrosAnt == null || otrosAnt.trim().isEmpty()) || (tipoRemision.equals("Seleccione"))||(remitidoPor == null || remitidoPor.trim().isEmpty())) {
                    JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(id.length() > 20 || id.length() < 4){
                    id = null;
                    JOptionPane.showMessageDialog(null, "El campo identificación no debe ser superior a 20 carácteres ni inferior a 4 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(id.startsWith("0")){
                    id = null;
                    JOptionPane.showMessageDialog(null, "El número de identificación ingresado es inválido", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(telefono.trim().isEmpty() && celular.trim().isEmpty()){
                    telefono = null;
                    celular = null;
                    JOptionPane.showMessageDialog(null, "Debe ingresar un número de teléfono o un celular", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(!telefono.trim().isEmpty() && (telefono.length() > 7 || telefono.length() < 7)) {
                    telefono = null;
                    JOptionPane.showMessageDialog(null, "El campo teléfono no debe ser superior ni inferior a 7 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else if(!celular.trim().isEmpty() && (celular.length() > 10 || celular.length() < 10)) {
                    celular = null;
                    JOptionPane.showMessageDialog(null, "El campo celular no debe ser superior ni inferior a 10 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else{
                    if (fechaNacimiento != null) {
                        Calendar c = Calendar.getInstance();
                        c.setTime(new Date());
                        int diff_anno = c.get(Calendar.YEAR)-FechaN.getCalendar().get(Calendar.YEAR);
                        int diff_mes = (c.get(Calendar.MONTH) + 1) -(FechaN.getCalendar().get(Calendar.MONTH)+ 1);
                        int diff_dia = c.get(Calendar.DATE)-FechaN.getCalendar().get(Calendar.DATE);
                        if(diff_mes<0 ||(diff_mes==0 && diff_dia<0)){
                            diff_anno = diff_anno-1;
                        }
                        if (diff_anno < 1) {
                            fechaNacimiento = null;
                            JOptionPane.showMessageDialog(null, "La fecha de nacimiento del paciente debe ser mayor o igual a 1 año", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                        } else {
                            int a = OpPacientes.guardar(id, tipoId, nombre, apellido1, apellido2, fechaNacimiento, genero, estadoCivil, lugarExpedicion, departamento, municipio, barrio, direccion, telefono, celular, ocupacion, salud, antPNatales, antMedicos, antFamiliares, antQuirurgicos, otrosAnt, tipoRemision, remitidoPor, familiar, discapacidad);
                            if (a == 0) {
                                txtNdoc.enable();
                                txtNdoc.setText("");
                                jcTipoDoc.setSelectedIndex(0);
                                txtNombre.setText("");
                                txtApellido1.setText("");
                                txtApellido2.setText("");
                                FechaN.setDate(new Date());
                                FechaN.getDateEditor().setEnabled(false);
                                jcGenero.setSelectedIndex(0);
                                jcestadoCivil.setSelectedIndex(0);
                                txtLExp.setText("");
                                txtDRes.setText("");
                                txtBarrio.setText("");
                                jcDepartamento.setSelectedIndex(0);
                                jcMunicipio.removeAllItems();
                                jcMunicipio.addItem("Seleccione");
                                txtTelefono.setText("");
                                txtCelular.setText("");
                                txtOcupacion.setText("");
                                jcEPS.setSelectedIndex(0);
                                jcTipoRemision.setSelectedIndex(0);
                                txtRemitidoPor.setText("");
                                jcFamiliar.removeAllItems();
                                jcFamiliar.addItem("Seleccione");
                                txtDocFam.setText("");
                                txtAntPNatales.setText("");
                                txtAntMedicos.setText("");
                                txtAntFamiliares.setText("");
                                txtAntQuirurgicos.setText("");
                                txtOtrosAnt.setText("");
                                jcDiscapacidad.setSelectedIndex(0);
                                jxtpAntecedentes.setCollapsed(true);
                                jxtpAcompFamiliar.setCollapsed(true);
                                jxtpRemision.setCollapsed(true);
                            }
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "La fecha de nacimiento de paciente no es válida", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }else{
            if ((nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (genero.equals("Seleccione")) || (estadoCivil.equals("Seleccione")) || (tipoId.equals("Seleccione")) || (id == null || id.trim().isEmpty()) || (lugarExpedicion == null || lugarExpedicion.trim().isEmpty()) || (direccion == null || direccion.trim().isEmpty()) || (barrio == null || barrio.trim().isEmpty()) || (municipio.equals("Seleccione")) || (departamento.equals("Seleccione")) || (telefono == null || telefono.trim().isEmpty()) || (celular == null || celular.trim().isEmpty()) || (ocupacion == null || ocupacion.trim().isEmpty()) || (salud.equals("Seleccione")) || (antPNatales == null || antPNatales.trim().isEmpty()) || (antMedicos == null || antMedicos.trim().isEmpty()) || (antFamiliares == null || antFamiliares.trim().isEmpty()) || (antQuirurgicos == null || antQuirurgicos.trim().isEmpty()) || (otrosAnt == null || otrosAnt.trim().isEmpty()) || (familiar.equals("Seleccione")) || (tipoRemision.equals("Seleccione"))||(remitidoPor == null || remitidoPor.trim().isEmpty())) {
                JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Debe seleccionar si el paciente presenta discapacidad", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Método que permite cambiar el estado de un registro de paciente, 
     * dependiendo del número de identificación ingresado
     */
    public void cambiarEstado() {
        if (txtNdoc.getText() == null || txtNdoc.getText().trim().isEmpty()) {
            txtNdoc.setText(null);
            JOptionPane.showMessageDialog(null, "Debe diligenciar el campo número de documento del paciente a cambiar el estado", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }

        if (!txtNdoc.getText().trim().isEmpty()) {
            JOptionPane x = new JOptionPane();
            if(x.showConfirmDialog(null,"Está seguro que desea cambiar el estado de este registro?")==0){
                OpPacientes.cambiarEstado(txtNdoc.getText());
                txtNdoc.enable();
                txtNdoc.setText("");
                jcTipoDoc.setEnabled(true);
                jcTipoDoc.setSelectedIndex(0);
                txtNombre.setEnabled(true);
                txtNombre.setText("");
                txtApellido1.setEnabled(true);
                txtApellido1.setText("");
                txtApellido2.setEnabled(true);
                txtApellido2.setText("");
                FechaN.setEnabled(true);
                FechaN.setDate(new Date());
                FechaN.getDateEditor().setEnabled(false);
                jcGenero.setEnabled(true);
                jcGenero.setSelectedIndex(0);
                jcestadoCivil.setEnabled(true);
                jcestadoCivil.setSelectedIndex(0);
                txtLExp.setEnabled(true);
                txtLExp.setText("");
                txtDRes.setEnabled(true);
                txtDRes.setText("");
                txtBarrio.setEnabled(true);
                txtBarrio.setText("");
                jcDepartamento.setEnabled(true);
                jcDepartamento.setSelectedIndex(0);
                jcMunicipio.setEnabled(true);
                jcMunicipio.removeAllItems();
                jcMunicipio.addItem("Seleccione");
                txtTelefono.setEnabled(true);
                txtTelefono.setText("");
                txtCelular.setEnabled(true);
                txtCelular.setText("");
                txtOcupacion.setEnabled(true);
                txtOcupacion.setText("");
                jcEPS.setEnabled(true);
                jcEPS.setSelectedIndex(0);
                jcTipoRemision.setEnabled(true);
                jcTipoRemision.setSelectedIndex(0);
                txtRemitidoPor.setEnabled(true);
                txtRemitidoPor.setText("");
                jcFamiliar.setEnabled(true);
                jcFamiliar.removeAllItems();
                jcFamiliar.addItem("Seleccione");
                txtDocFam.setEnabled(true);
                txtDocFam.setText("");
                btnBusqueda.setEnabled(true);
                txtAntPNatales.setEnabled(true);
                txtAntPNatales.setText("");
                txtAntMedicos.setEnabled(true);
                txtAntMedicos.setText("");
                txtAntFamiliares.setEnabled(true);
                txtAntFamiliares.setText("");
                txtAntQuirurgicos.setEnabled(true);
                txtAntQuirurgicos.setText("");
                txtOtrosAnt.setEnabled(true);
                txtOtrosAnt.setText("");
                jcDiscapacidad.setEnabled(true);
                jcDiscapacidad.setSelectedIndex(0);
                btnCrear.setEnabled(true);
                btnModificar.setEnabled(false);
                btnEliminar.setEnabled(false);
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                jxtpAntecedentes.setCollapsed(true);
                jxtpAcompFamiliar.setCollapsed(true);
                jxtpRemision.setCollapsed(true);
            }
        }
    }
    /**
     * Método que permite actualizar la información de un registro de paciente existente
     */
    public void modificar() {
        String id, tipoId = "Seleccione", nombre, apellido1, apellido2, familiar = "Seleccione", diaFechaNacimiento, mesFechaNacimiento, annoFechaNacimiento, fechaNacimiento, genero = "Seleccione", estadoCivil = "Seleccione", lugarExpedicion, direccion, barrio, municipio = "Seleccione", departamento = "Seleccione", telefono, celular, ocupacion, salud = "Seleccione", antPNatales, antMedicos, antFamiliares, antQuirurgicos, otrosAnt, discapacidad;

        id = txtNdoc.getText();
        
        for (Map.Entry<Integer, String> tipoDocs : td.entrySet()){
            int td = tipoDocs.getKey();
            if (jcTipoDoc.getSelectedItem().toString().equals(tipoDocs.getValue())) {
                tipoId = String.valueOf(td);
            }
        }
        nombre = txtNombre.getText();
        apellido1 = txtApellido1.getText();
        apellido2 = txtApellido2.getText();
        
        if (!"Seleccione".equals(jcFamiliar.getSelectedItem().toString())) {
            try {
                p = OpPacientes.obtenerFamiliares();
            } catch (SQLException ex) {
                Logger.getLogger(Pacientes.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Map.Entry<String, String> familiares : p.entrySet()){
                String u = familiares.getKey();
                if (jcFamiliar.getSelectedItem().toString().equals(familiares.getValue())) {
                    familiar = u;
                }
            }
        }
        
        for (Map.Entry<Integer, String> generos : g.entrySet()){
            int g = generos.getKey();
            if (jcGenero.getSelectedItem().toString().equals(generos.getValue())) {
                genero = String.valueOf(g);
            }
        }
        
        for (Map.Entry<Integer, String> estCivil : ec.entrySet()){
            int ec = estCivil.getKey();
            if (jcestadoCivil.getSelectedItem().toString().equals(estCivil.getValue())) {
                estadoCivil = String.valueOf(ec);
            }
        }
        lugarExpedicion = txtLExp.getText();
        direccion = txtDRes.getText();
        barrio = txtBarrio.getText();
        
        for (Map.Entry<Integer, String> dep : d.entrySet()){
            int d = dep.getKey();
            if (jcDepartamento.getSelectedItem().toString().equals(dep.getValue())) {
                departamento = String.valueOf(d);
            }
        }
        
        if (!"Seleccione".equals(jcMunicipio.getSelectedItem().toString())) {
            for (Map.Entry<Integer, String> mun : m.entrySet()){
                int m = mun.getKey();
                if (jcMunicipio.getSelectedItem().toString().equals(mun.getValue())) {
                    municipio = String.valueOf(m);
                }
            }
        }
        
        telefono = txtTelefono.getText();
        celular = txtCelular.getText();
        ocupacion = txtOcupacion.getText();
        
        for (Map.Entry<Integer, String> eps : e.entrySet()){
            int e = eps.getKey();
            if (jcEPS.getSelectedItem().toString().equals(eps.getValue())) {
                salud = String.valueOf(e);
            }
        }
        antPNatales = txtAntPNatales.getText();
        antMedicos = txtAntMedicos.getText();
        antFamiliares = txtAntFamiliares.getText();
        antQuirurgicos = txtAntQuirurgicos.getText();
        otrosAnt = txtOtrosAnt.getText();
        discapacidad = jcDiscapacidad.getSelectedItem().toString();

        if (FechaN.getDate() != null) {
            diaFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.DAY_OF_MONTH));
            mesFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.MONTH) + 1);
            annoFechaNacimiento = String.valueOf(FechaN.getCalendar().get(Calendar.YEAR));
            fechaNacimiento = diaFechaNacimiento + "/" + mesFechaNacimiento + "/" + annoFechaNacimiento;
        } else {
            fechaNacimiento = null;
        }

        if (!discapacidad.equals("Seleccione")) {
            if (discapacidad.equals("Sí")) {
                if ((nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (genero.equals("Seleccione")) || (estadoCivil.equals("Seleccione")) || (tipoId.equals("Seleccione")) || (id == null || id.trim().isEmpty()) || (lugarExpedicion == null || lugarExpedicion.trim().isEmpty()) || (direccion == null || direccion.trim().isEmpty()) || (barrio == null || barrio.trim().isEmpty()) || (municipio.equals("Seleccione")) || (departamento.equals("Seleccione")) || (ocupacion == null || ocupacion.trim().isEmpty()) || (salud.equals("Seleccione")) || (antPNatales == null || antPNatales.trim().isEmpty()) || (antMedicos == null || antMedicos.trim().isEmpty()) || (antFamiliares == null || antFamiliares.trim().isEmpty()) || (antQuirurgicos == null || antQuirurgicos.trim().isEmpty()) || (otrosAnt == null || otrosAnt.trim().isEmpty()) || (familiar.equals("Seleccione"))) {
                    JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(id.length() > 20 || id.length() < 4){
                    id = null;
                    JOptionPane.showMessageDialog(null, "El campo identificación no debe ser superior a 20 carácteres ni inferior a 4 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else if(telefono.trim().isEmpty() && celular.trim().isEmpty()){
                    telefono = null;
                    celular = null;
                    JOptionPane.showMessageDialog(null, "Debe ingresar un número de teléfono o un celular", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(!telefono.trim().isEmpty() && (telefono.length() > 7 || telefono.length() < 7)) {
                    telefono = null;
                    JOptionPane.showMessageDialog(null, "El campo teléfono no debe ser superior ni inferior a 7 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else if(!celular.trim().isEmpty() && (celular.length() > 10 || celular.length() < 10)) {
                    celular = null;
                    JOptionPane.showMessageDialog(null, "El campo celular no debe ser superior ni inferior a 10 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else{
                    if (fechaNacimiento != null) {
                        Calendar c = Calendar.getInstance();
                        c.setTime(new Date());
                        int diff_anno = c.get(Calendar.YEAR)-FechaN.getCalendar().get(Calendar.YEAR);
                        int diff_mes = (c.get(Calendar.MONTH) + 1) -(FechaN.getCalendar().get(Calendar.MONTH)+ 1);
                        int diff_dia = c.get(Calendar.DATE)-FechaN.getCalendar().get(Calendar.DATE);
                        if(diff_mes<0 ||(diff_mes==0 && diff_dia<0)){
                            diff_anno = diff_anno-1;
                        }
                        if (diff_anno < 1) {
                            fechaNacimiento = null;
                            JOptionPane.showMessageDialog(null, "La fecha de nacimiento del paciente debe ser mayor o igual a 1 año", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                        } else {
                            OpPacientes.modificar(id, tipoId, nombre, apellido1, apellido2, fechaNacimiento, genero, estadoCivil, lugarExpedicion, departamento, municipio, barrio, direccion, telefono, celular, ocupacion, salud, antPNatales, antMedicos, antFamiliares, antQuirurgicos, otrosAnt, familiar, discapacidad);
                            txtNdoc.enable();
                            txtNdoc.setText("");
                            jcTipoDoc.setSelectedIndex(0);
                            txtNombre.setText("");
                            txtApellido1.setText("");
                            txtApellido2.setText("");
                            FechaN.setDate(new Date());
                            FechaN.getDateEditor().setEnabled(false);
                            jcGenero.setSelectedIndex(0);
                            jcestadoCivil.setSelectedIndex(0);
                            txtLExp.setText("");
                            txtDRes.setText("");
                            txtBarrio.setText("");
                            jcDepartamento.setSelectedIndex(0);
                            jcMunicipio.removeAllItems();
                            jcMunicipio.addItem("Seleccione"); 
                            txtTelefono.setText("");
                            txtCelular.setText("");
                            txtOcupacion.setText("");
                            jcEPS.setSelectedIndex(0);
                            jcTipoRemision.setSelectedIndex(0);
                            txtRemitidoPor.setText("");
                            jcFamiliar.setEnabled(true);
                            jcFamiliar.removeAllItems();
                            jcFamiliar.addItem("Seleccione");
                            btnBusqueda.setEnabled(true);
                            txtDocFam.setEnabled(true);
                            txtDocFam.setText("");
                            txtAntPNatales.setText("");
                            txtAntMedicos.setText("");
                            txtAntFamiliares.setText("");
                            txtAntQuirurgicos.setText("");
                            txtOtrosAnt.setText("");
                            jcDiscapacidad.setEnabled(true);
                            jcDiscapacidad.setSelectedIndex(0);
                            btnCrear.setEnabled(true);
                            btnModificar.setEnabled(false);
                            btnEliminar.setEnabled(false);
                            btnEliminar.setText("Deshabilitar");
                            btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                            jxtpAntecedentes.setCollapsed(true);
                            jxtpAcompFamiliar.setCollapsed(true);
                            jxtpRemision.setCollapsed(true);
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "La fecha de nacimiento de paciente no es válida", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }else{
                if ((nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (genero.equals("Seleccione")) || (estadoCivil.equals("Seleccione")) || (tipoId.equals("Seleccione")) || (id == null || id.trim().isEmpty()) || (lugarExpedicion == null || lugarExpedicion.trim().isEmpty()) || (direccion == null || direccion.trim().isEmpty()) || (barrio == null || barrio.trim().isEmpty()) || (municipio.equals("Seleccione")) || (departamento.equals("Seleccione")) || (ocupacion == null || ocupacion.trim().isEmpty()) || (salud.equals("Seleccione")) || (antPNatales == null || antPNatales.trim().isEmpty()) || (antMedicos == null || antMedicos.trim().isEmpty()) || (antFamiliares == null || antFamiliares.trim().isEmpty()) || (antQuirurgicos == null || antQuirurgicos.trim().isEmpty()) || (otrosAnt == null || otrosAnt.trim().isEmpty())) {
                    JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(id.length() > 20 || id.length() < 4){
                    id = null;
                    JOptionPane.showMessageDialog(null, "El campo identificación no debe ser superior a 20 carácteres ni inferior a 4 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else if(telefono.trim().isEmpty() && celular.trim().isEmpty()){
                    telefono = null;
                    celular = null;
                    JOptionPane.showMessageDialog(null, "Debe ingresar un número de teléfono o un celular", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else if(!telefono.trim().isEmpty() && (telefono.length() > 7 || telefono.length() < 7)) {
                    telefono = null;
                    JOptionPane.showMessageDialog(null, "El campo teléfono no debe ser superior ni inferior a 7 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                } else if(!celular.trim().isEmpty() && (celular.length() > 10 || celular.length() < 10)) {
                    celular = null;
                    JOptionPane.showMessageDialog(null, "El campo celular no debe ser superior ni inferior a 10 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }else{
                    if (fechaNacimiento != null) {
                        Calendar c = Calendar.getInstance();
                        c.setTime(new Date());
                        int diff_anno = c.get(Calendar.YEAR)-FechaN.getCalendar().get(Calendar.YEAR);
                        int diff_mes = (c.get(Calendar.MONTH) + 1) -(FechaN.getCalendar().get(Calendar.MONTH)+ 1);
                        int diff_dia = c.get(Calendar.DATE)-FechaN.getCalendar().get(Calendar.DATE);
                        if(diff_mes<0 ||(diff_mes==0 && diff_dia<0)){
                            diff_anno = diff_anno-1;
                        }
                        if (diff_anno < 1) {
                            fechaNacimiento = null;
                            JOptionPane.showMessageDialog(null, "La fecha de nacimiento del paciente debe ser mayor o igual a 1 año", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                        } else {
                            OpPacientes.modificar(id, tipoId, nombre, apellido1, apellido2, fechaNacimiento, genero, estadoCivil, lugarExpedicion, departamento, municipio, barrio, direccion, telefono, celular, ocupacion, salud, antPNatales, antMedicos, antFamiliares, antQuirurgicos, otrosAnt, familiar, discapacidad);
                            txtNdoc.enable();
                            txtNdoc.setText("");
                            jcTipoDoc.setSelectedIndex(0);
                            txtNombre.setText("");
                            txtApellido1.setText("");
                            txtApellido2.setText("");
                            FechaN.setDate(new Date());
                            FechaN.getDateEditor().setEnabled(false);
                            jcGenero.setSelectedIndex(0);
                            jcestadoCivil.setSelectedIndex(0);
                            txtLExp.setText("");
                            txtDRes.setText("");
                            txtBarrio.setText("");
                            jcDepartamento.setSelectedIndex(0);
                            jcMunicipio.removeAllItems();
                            jcMunicipio.addItem("Seleccione"); 
                            txtTelefono.setText("");
                            txtCelular.setText("");
                            txtOcupacion.setText("");
                            jcEPS.setSelectedIndex(0);
                            jcTipoRemision.setSelectedIndex(0);
                            txtRemitidoPor.setText("");
                            jcFamiliar.setEnabled(true);
                            jcFamiliar.removeAllItems();
                            jcFamiliar.addItem("Seleccione");
                            btnBusqueda.setEnabled(true);
                            txtDocFam.setEnabled(true);
                            txtDocFam.setText("");
                            txtAntPNatales.setText("");
                            txtAntMedicos.setText("");
                            txtAntFamiliares.setText("");
                            txtAntQuirurgicos.setText("");
                            txtOtrosAnt.setText("");
                            jcDiscapacidad.setEnabled(true);
                            jcDiscapacidad.setSelectedIndex(0);
                            btnCrear.setEnabled(true);
                            btnModificar.setEnabled(false);
                            btnEliminar.setEnabled(false);
                            btnEliminar.setText("Deshabilitar");
                            btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
                            jxtpAntecedentes.setCollapsed(true);
                            jxtpAcompFamiliar.setCollapsed(true);
                            jxtpRemision.setCollapsed(true);
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "La fecha de nacimiento de paciente no es válida", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar si el paciente presenta discapacidad", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }
    }
}
