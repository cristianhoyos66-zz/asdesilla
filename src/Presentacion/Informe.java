/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AccesoDatos.OpInforme;
import AccesoDatos.OpPacientes;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Esta clase permite pintar la ventana Informe, con sus respectivos componentes, 
 * para la generación del informe de la historia clínica de un paciente
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class Informe extends javax.swing.JFrame {
    DefaultTableModel dtm;
    Map<String, String> p;
    TreeMap<Integer, String> t;

    public Informe() {
        try{
            initComponents();
            FechaInicial.setDate(new Date());
            FechaFinal.setDate(new Date());
            setIconImage (new ImageIcon(getClass().getResource("/Imagenes/medical-report-icon.png")).getImage());
            t = OpInforme.obtenerTerapias();
            Iterator j = t.keySet().iterator();
            while(j.hasNext()){
                jcTerapia.addItem(t.get(j.next()));
            }
            dtm = (DefaultTableModel) Registros.getModel();
            if(dtm.getRowCount()!=0){
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    dtm.removeRow(i);
                    i-=1;
                }
            }
            try{
                ArrayList <Object[]> l = OpInforme.obtenerRegistros();
                for (int i = 0; i < l.size(); i++) {
                    dtm.addRow(l.get(i));
                }
            }catch(Exception e){
                System.out.println("Error: "+e);
            }
        }catch(SQLException ex){
            Logger.getLogger(Informe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        Registros = new javax.swing.JTable();
        labelDoc = new javax.swing.JLabel();
        btnImprimir = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        txtDocPac = new java.awt.TextField();
        btnBusqueda = new javax.swing.JButton();
        jcPaciente = new javax.swing.JComboBox();
        labelTitulo = new javax.swing.JLabel();
        jcTipoInforme = new javax.swing.JComboBox();
        jcTerapia = new javax.swing.JComboBox();
        labelTipoInforme = new javax.swing.JLabel();
        labelTerapia = new javax.swing.JLabel();
        jchbRango = new javax.swing.JCheckBox();
        labelTerapia1 = new javax.swing.JLabel();
        labelTerapia2 = new javax.swing.JLabel();
        FechaInicial = new com.toedter.calendar.JDateChooser();
        FechaFinal = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1271, 600));
        setResizable(false);
        getContentPane().setLayout(null);

        Registros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Historia Clínica", "Identificación", "Paciente", "Estado Historia Clínica"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Registros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RegistrosMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(Registros);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 290, 1250, 280);

        labelDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelDoc.setText("Documento Paciente:");
        getContentPane().add(labelDoc);
        labelDoc.setBounds(10, 100, 135, 15);

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/print.png"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.setEnabled(false);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        getContentPane().add(btnImprimir);
        btnImprimir.setBounds(440, 220, 140, 34);

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(650, 220, 137, 34);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(230, 220, 125, 34);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir);
        btnSalir.setBounds(870, 220, 137, 34);

        txtDocPac.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtDocPac);
        txtDocPac.setBounds(150, 100, 170, 19);

        btnBusqueda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBusqueda.setToolTipText("La búsqueda se  puede generar a partir de los primeros números del documento");
        btnBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaActionPerformed(evt);
            }
        });
        getContentPane().add(btnBusqueda);
        btnBusqueda.setBounds(330, 90, 50, 30);

        jcPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcPaciente);
        jcPaciente.setBounds(390, 100, 230, 27);

        labelTitulo.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelTitulo.setText("INFORME HISTORIA CLÍNICA");
        getContentPane().add(labelTitulo);
        labelTitulo.setBounds(560, 30, 160, 15);

        jcTipoInforme.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Año actual", "Por rango", "Terapia", "Completo" }));
        jcTipoInforme.setEnabled(false);
        jcTipoInforme.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcTipoInformeItemStateChanged(evt);
            }
        });
        getContentPane().add(jcTipoInforme);
        jcTipoInforme.setBounds(760, 100, 180, 27);

        jcTerapia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jcTerapia.setEnabled(false);
        getContentPane().add(jcTerapia);
        jcTerapia.setBounds(1080, 100, 170, 27);

        labelTipoInforme.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTipoInforme.setText("Tipo de Informe:");
        getContentPane().add(labelTipoInforme);
        labelTipoInforme.setBounds(660, 100, 100, 15);

        labelTerapia.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTerapia.setText("Fecha Final:");
        getContentPane().add(labelTerapia);
        labelTerapia.setBounds(660, 150, 80, 15);

        jchbRango.setEnabled(false);
        jchbRango.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchbRangoActionPerformed(evt);
            }
        });
        getContentPane().add(jchbRango);
        jchbRango.setBounds(20, 150, 20, 21);

        labelTerapia1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTerapia1.setText("Terapia:");
        getContentPane().add(labelTerapia1);
        labelTerapia1.setBounds(1000, 100, 60, 15);

        labelTerapia2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTerapia2.setText("Fecha Inicial:");
        getContentPane().add(labelTerapia2);
        labelTerapia2.setBounds(40, 150, 80, 15);

        FechaInicial.setDateFormatString("dd-MM-yyyy");
        FechaInicial.setEnabled(false);
        FechaInicial.setName("FechaN"); // NOI18N
        getContentPane().add(FechaInicial);
        FechaInicial.setBounds(150, 150, 181, 22);

        FechaFinal.setDateFormatString("dd-MM-yyyy");
        FechaFinal.setEnabled(false);
        FechaFinal.setName("FechaN"); // NOI18N
        getContentPane().add(FechaFinal);
        FechaFinal.setBounds(760, 150, 181, 22);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1280, 590);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que permite generar el informe de la evolución de la historia clinica
     * con base en el filtro seleccionado, el rango de fechas indicado dependiendo del caso, y la terapia dependiendo del caso
     * @param evt 
     */
    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        String tipoInforme = jcTipoInforme.getSelectedItem().toString();
        final Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        int anno = c.get(Calendar.YEAR);
        String diaFechaI, mesFechaI, annoFechaI, fechaI, diaFechaF, mesFechaF, annoFechaF, fechaF;
        
        if (!tipoInforme.equals("Seleccione")) {
            String id = Registros.getValueAt(Registros.getSelectedRow(), 1).toString();
            OpInforme.buscar(id);
            if (tipoInforme.equals("Año actual")) {
                int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                Map parametro = new HashMap();
                parametro.put("IdPaciente", id);
                parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                parametro.put("AMedicos", OpPacientes.getAntMedicos());
                parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                parametro.put("AOtros", OpPacientes.getOtrosAnt());
                parametro.put("IdHistoriaClinica", hc);
                parametro.put("Anno", anno);
                InputStream isHC = getClass().getResourceAsStream("/reportes/reporteHCAnnoActual.jasper");
                InputStream isEquino = getClass().getResourceAsStream("/reportes/reporteHCEquinoterapiaAnnoActual.jasper");
                InputStream isEduEsp = getClass().getResourceAsStream("/reportes/reporteHCEducacionEspecialAnnoActual.jasper");
                OpInforme.imprimir(isHC, isEquino, isEduEsp, parametro, String.valueOf(anno));
            }else if(tipoInforme.equals("Por rango")){
                if(FechaInicial.getDate() != null && FechaFinal.getDate() != null){
                    diaFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.DAY_OF_MONTH));
                    mesFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.MONTH) + 1);
                    annoFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.YEAR));
                    fechaI = diaFechaI + "/" + mesFechaI + "/" + annoFechaI;
                    
                    diaFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.DAY_OF_MONTH));
                    mesFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.MONTH) + 1);
                    annoFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.YEAR));
                    fechaF = diaFechaF + "/" + mesFechaF + "/" + annoFechaF;
                    int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                    Map parametro = new HashMap();
                    parametro.put("IdPaciente", id);
                    parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                    parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                    parametro.put("AMedicos", OpPacientes.getAntMedicos());
                    parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                    parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                    parametro.put("AOtros", OpPacientes.getOtrosAnt());
                    parametro.put("IdHistoriaClinica", hc);
                    parametro.put("FechaInicial", fechaI);
                    parametro.put("FechaFinal", fechaF);
                    InputStream isHC = getClass().getResourceAsStream("/reportes/reporteHC.jasper");
                    InputStream isEquino = getClass().getResourceAsStream("/reportes/reporteHCEquinoterapia.jasper");
                    InputStream isEduEsp = getClass().getResourceAsStream("/reportes/reporteHCEducacionEspecial.jasper");
                    OpInforme.imprimir(isHC, isEquino, isEduEsp, parametro, fechaI, fechaF);
                }else{
                    JOptionPane.showMessageDialog(null, "Debe seleccionar una fecha incial y una fecha final", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }
            }else if(tipoInforme.equals("Completo")){
                int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                Map parametro = new HashMap();
                parametro.put("IdPaciente", id);
                parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                parametro.put("AMedicos", OpPacientes.getAntMedicos());
                parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                parametro.put("AOtros", OpPacientes.getOtrosAnt());
                parametro.put("IdHistoriaClinica", hc);
                InputStream isHC = getClass().getResourceAsStream("/reportes/reporteHCFull.jasper");
                InputStream isEquino = getClass().getResourceAsStream("/reportes/reporteHCEquinoterapiaFull.jasper");
                InputStream isEduEsp = getClass().getResourceAsStream("/reportes/reporteHCEducacionEspecialFull.jasper");
                OpInforme.imprimir(isHC, isEquino, isEduEsp, parametro, "Completo");
            }else if(tipoInforme.equals("Terapia")){
                String terapia = jcTerapia.getSelectedItem().toString();
                if (!terapia.equals("Seleccione")) {
                    if (terapia.equals("Fisioterapia")) {
                        if (jchbRango.isSelected()) {
                            if(FechaInicial.getDate() != null && FechaFinal.getDate() != null){
                                diaFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.YEAR));
                                fechaI = diaFechaI + "/" + mesFechaI + "/" + annoFechaI;

                                diaFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.YEAR));
                                fechaF = diaFechaF + "/" + mesFechaF + "/" + annoFechaF;
                                int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                                Map parametro = new HashMap();
                                parametro.put("IdPaciente", id);
                                parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                                parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                                parametro.put("AMedicos", OpPacientes.getAntMedicos());
                                parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                                parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                                parametro.put("AOtros", OpPacientes.getOtrosAnt());
                                parametro.put("IdHistoriaClinica", hc);
                                parametro.put("FechaInicial", fechaI);
                                parametro.put("FechaFinal", fechaF);
                                InputStream is = getClass().getResourceAsStream("/reportes/reporteFisioterapia.jasper");
                                OpInforme.imprimir(is, parametro, "Fisioterapia", fechaI, fechaF);
                            }else{
                                JOptionPane.showMessageDialog(null, "Debe seleccionar una fecha incial y una fecha final", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                            Map parametro = new HashMap();
                            parametro.put("IdPaciente", id);
                            parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                            parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                            parametro.put("AMedicos", OpPacientes.getAntMedicos());
                            parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                            parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                            parametro.put("AOtros", OpPacientes.getOtrosAnt());
                            parametro.put("IdHistoriaClinica", hc);
                            InputStream is = getClass().getResourceAsStream("/reportes/reporteFisioterapiaFull.jasper");
                            OpInforme.imprimir(is, parametro, "Fisioterapia");
                        }
                    }else if(terapia.equals("Fonoaudiología")){
                        if (jchbRango.isSelected()) {
                            if(FechaInicial.getDate() != null && FechaFinal.getDate() != null){
                                diaFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.YEAR));
                                fechaI = diaFechaI + "/" + mesFechaI + "/" + annoFechaI;

                                diaFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.YEAR));
                                fechaF = diaFechaF + "/" + mesFechaF + "/" + annoFechaF;
                                int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                                Map parametro = new HashMap();
                                parametro.put("IdPaciente", id);
                                parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                                parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                                parametro.put("AMedicos", OpPacientes.getAntMedicos());
                                parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                                parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                                parametro.put("AOtros", OpPacientes.getOtrosAnt());
                                parametro.put("IdHistoriaClinica", hc);
                                parametro.put("FechaInicial", fechaI);
                                parametro.put("FechaFinal", fechaF);
                                InputStream is = getClass().getResourceAsStream("/reportes/reporteFonoaudiologia.jasper");
                                OpInforme.imprimir(is, parametro, "Fonoaudiologia", fechaI, fechaF);
                            }else{
                                JOptionPane.showMessageDialog(null, "Debe seleccionar una fecha incial y una fecha final", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                            Map parametro = new HashMap();
                            parametro.put("IdPaciente", id);
                            parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                            parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                            parametro.put("AMedicos", OpPacientes.getAntMedicos());
                            parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                            parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                            parametro.put("AOtros", OpPacientes.getOtrosAnt());
                            parametro.put("IdHistoriaClinica", hc);
                            InputStream is = getClass().getResourceAsStream("/reportes/reporteFonoaudiologiaFull.jasper");
                            OpInforme.imprimir(is, parametro, "Fonoaudiologia");
                        }
                    }else if(terapia.equals("Psicología")){
                        if (jchbRango.isSelected()) {
                            if(FechaInicial.getDate() != null && FechaFinal.getDate() != null){
                                diaFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.YEAR));
                                fechaI = diaFechaI + "/" + mesFechaI + "/" + annoFechaI;

                                diaFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.YEAR));
                                fechaF = diaFechaF + "/" + mesFechaF + "/" + annoFechaF;
                                int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                                Map parametro = new HashMap();
                                parametro.put("IdPaciente", id);
                                parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                                parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                                parametro.put("AMedicos", OpPacientes.getAntMedicos());
                                parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                                parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                                parametro.put("AOtros", OpPacientes.getOtrosAnt());
                                parametro.put("IdHistoriaClinica", hc);
                                parametro.put("FechaInicial", fechaI);
                                parametro.put("FechaFinal", fechaF);
                                InputStream is = getClass().getResourceAsStream("/reportes/reportePsicologia.jasper");
                                OpInforme.imprimir(is, parametro, "Psicología", fechaI, fechaF);
                            }else{
                                JOptionPane.showMessageDialog(null, "Debe seleccionar una fecha incial y una fecha final", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                            Map parametro = new HashMap();
                            parametro.put("IdPaciente", id);
                            parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                            parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                            parametro.put("AMedicos", OpPacientes.getAntMedicos());
                            parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                            parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                            parametro.put("AOtros", OpPacientes.getOtrosAnt());
                            parametro.put("IdHistoriaClinica", hc);
                            InputStream is = getClass().getResourceAsStream("/reportes/reportePsicologiaFull.jasper");
                            OpInforme.imprimir(is, parametro, "Psicología");
                        }
                    }else if(terapia.equals("Equinoterapia")){
                        if (jchbRango.isSelected()) {
                            if(FechaInicial.getDate() != null && FechaFinal.getDate() != null){
                                diaFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.YEAR));
                                fechaI = diaFechaI + "/" + mesFechaI + "/" + annoFechaI;

                                diaFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.YEAR));
                                fechaF = diaFechaF + "/" + mesFechaF + "/" + annoFechaF;
                                int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                                Map parametro = new HashMap();
                                parametro.put("IdPaciente", id);
                                parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                                parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                                parametro.put("AMedicos", OpPacientes.getAntMedicos());
                                parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                                parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                                parametro.put("AOtros", OpPacientes.getOtrosAnt());
                                parametro.put("IdHistoriaClinica", hc);
                                parametro.put("FechaInicial", fechaI);
                                parametro.put("FechaFinal", fechaF);
                                InputStream is = getClass().getResourceAsStream("/reportes/reporteHCEquinoterapia.jasper");
                                OpInforme.imprimir(is, parametro, "Equinoterapia", fechaI, fechaF);
                            }else{
                                JOptionPane.showMessageDialog(null, "Debe seleccionar una fecha incial y una fecha final", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                            Map parametro = new HashMap();
                            parametro.put("IdPaciente", id);
                            parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                            parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                            parametro.put("AMedicos", OpPacientes.getAntMedicos());
                            parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                            parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                            parametro.put("AOtros", OpPacientes.getOtrosAnt());
                            parametro.put("IdHistoriaClinica", hc);
                            InputStream is = getClass().getResourceAsStream("/reportes/reporteHCEquinoterapiaFull.jasper");
                            OpInforme.imprimir(is, parametro, "Equinoterapia");
                        }
                    }else if(terapia.equals("Educación Especial")){
                        if (jchbRango.isSelected()) {
                            if(FechaInicial.getDate() != null && FechaFinal.getDate() != null){
                                diaFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaI = String.valueOf(FechaInicial.getCalendar().get(Calendar.YEAR));
                                fechaI = diaFechaI + "/" + mesFechaI + "/" + annoFechaI;

                                diaFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.DAY_OF_MONTH));
                                mesFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.MONTH) + 1);
                                annoFechaF = String.valueOf(FechaFinal.getCalendar().get(Calendar.YEAR));
                                fechaF = diaFechaF + "/" + mesFechaF + "/" + annoFechaF;
                                int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                                Map parametro = new HashMap();
                                parametro.put("IdPaciente", id);
                                parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                                parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                                parametro.put("AMedicos", OpPacientes.getAntMedicos());
                                parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                                parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                                parametro.put("AOtros", OpPacientes.getOtrosAnt());
                                parametro.put("IdHistoriaClinica", hc);
                                parametro.put("FechaInicial", fechaI);
                                parametro.put("FechaFinal", fechaF);
                                InputStream is = getClass().getResourceAsStream("/reportes/reporteHCEducacionEspecial.jasper");
                                OpInforme.imprimir(is, parametro, "Educación Especial", fechaI, fechaF);
                            }else{
                                JOptionPane.showMessageDialog(null, "Debe seleccionar una fecha incial y una fecha final", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            int hc = Integer.parseInt(Registros.getValueAt(Registros.getSelectedRow(), 0).toString());
                            Map parametro = new HashMap();
                            parametro.put("IdPaciente", id);
                            parametro.put("NombrePaciente", Registros.getValueAt(Registros.getSelectedRow(), 2).toString());
                            parametro.put("ANacimiento", OpPacientes.getAntPNatales());
                            parametro.put("AMedicos", OpPacientes.getAntMedicos());
                            parametro.put("AFamiliares", OpPacientes.getAntFamiliares());
                            parametro.put("AQuirurgicos", OpPacientes.getAntQuirurgicos());
                            parametro.put("AOtros", OpPacientes.getOtrosAnt());
                            parametro.put("IdHistoriaClinica", hc);
                            InputStream is = getClass().getResourceAsStream("/reportes/reporteHCEducacionEspecialFull.jasper");
                            OpInforme.imprimir(is, parametro, "Educación Especial");
                        }
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Debe seleccionar una terapia", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
                }
            }
            OpPacientes.setAntPNatales("");
            OpPacientes.setAntMedicos("");
            OpPacientes.setAntFamiliares("");
            OpPacientes.setAntQuirurgicos("");
            OpPacientes.setOtrosAnt("");
        }else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar el tipo de informe a generar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    /**
     * Limpia todos los campos y restaura los datos de la tabla en caso de haberse hecho una consulta.
     * @param evt 
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        final Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        jcPaciente.removeAllItems();
        jcPaciente.addItem("Seleccione");
        jcTipoInforme.setEnabled(false);
        jcTipoInforme.setSelectedIndex(0);
        jcTerapia.setEnabled(false);
        jcTerapia.setSelectedIndex(0);
        jchbRango.setEnabled(false);
        btnImprimir.setEnabled(false);
        jchbRango.setSelected(false);
        txtDocPac.setText("");
        if(dtm.getRowCount()!=0){
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
                i-=1;
            }
        }
        try{
            ArrayList <Object[]> l = OpInforme.obtenerRegistros();
            for (int i = 0; i < l.size(); i++) {
                dtm.addRow(l.get(i));
            }
        }catch(Exception e){
            System.out.println("Error: "+e);
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * Habilita el botón Imprimir y el tipo de informe a generar en caso de que se seleccione algún registro en la tabla.
     * @param evt 
     */
    private void RegistrosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegistrosMousePressed
        btnImprimir.setEnabled(true);
        jcTipoInforme.setEnabled(true);
    }//GEN-LAST:event_RegistrosMousePressed

    /**
     * Llama al método buscar.
     * @param evt 
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscar();
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Cierra la ventana de registros.
     * @param evt 
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        new Menu().setVisible(true);
        this.hide();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * Búsqueda de los pacientes coincidentes según un carácter ingresado
     * @param evt 
     */
    private void btnBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaActionPerformed
        if(txtDocPac.getText() == null || txtDocPac.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe ingresar por lo menos un carácter del número de identificación del paciente", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                jcPaciente.removeAllItems();
                p = OpInforme.consultarPacientes(txtDocPac.getText());
                Iterator it = p.keySet().iterator();
                if (p.size()>0) {
                    //JOptionPane.showMessageDialog(null, "Se han encontrado coincidencias");
                }else{
                    //JOptionPane.showMessageDialog(null, "No se han encontrado coincidencias");
                }
                jcPaciente.addItem("Seleccione");
                while(it.hasNext()){
                    jcPaciente.addItem(p.get(it.next()));
                }
                //txtDocPac.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(PacientesRegistros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBusquedaActionPerformed

    /**
     * Habilita las opciones respectivas, dependiendo del tipo de informe seleccionado
     * @param evt 
     */
    private void jcTipoInformeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcTipoInformeItemStateChanged
        final Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        if(jcTipoInforme.getSelectedItem().equals("Terapia")){
            jcTerapia.setEnabled(true);
            jcTerapia.setSelectedIndex(0);
            jchbRango.setEnabled(true);
            jchbRango.setSelected(false);
            FechaInicial.setEnabled(false);
            FechaFinal.setEnabled(false);
            FechaInicial.setDate(new Date());
            FechaInicial.getDateEditor().setEnabled(false);
            FechaFinal.setDate(new Date());
            FechaFinal.getDateEditor().setEnabled(false);
        }else if(jcTipoInforme.getSelectedItem().equals("Por rango")){
            FechaInicial.setEnabled(true);
            FechaFinal.setEnabled(true);
            FechaInicial.setDate(new Date());
            FechaInicial.getDateEditor().setEnabled(false);
            FechaFinal.setDate(new Date());
            FechaFinal.getDateEditor().setEnabled(false);
            jcTerapia.setEnabled(false);
            jcTerapia.setSelectedIndex(0);
            jchbRango.setEnabled(false);
            jchbRango.setSelected(false);
        }else{
            jchbRango.setEnabled(false);
            jchbRango.setSelected(false);
            jcTerapia.setEnabled(false);
            jcTerapia.setSelectedIndex(0);
            FechaInicial.setEnabled(false);
            FechaFinal.setEnabled(false);
            FechaInicial.setDate(new Date());
            FechaInicial.getDateEditor().setEnabled(false);
            FechaFinal.setDate(new Date());
            FechaFinal.getDateEditor().setEnabled(false);
        }
    }//GEN-LAST:event_jcTipoInformeItemStateChanged

    /**
     * Habilta o deshabilita los campos Fecha Inicial y Fecha Finala fin de restringir el informe a un rango de fechas
     * @param evt 
     */
    private void jchbRangoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchbRangoActionPerformed
        if (jchbRango.isSelected()) {
            FechaInicial.setEnabled(true);
            FechaFinal.setEnabled(true);
            FechaInicial.setDate(new Date());
            FechaInicial.getDateEditor().setEnabled(false);
            FechaFinal.setDate(new Date());
            FechaFinal.getDateEditor().setEnabled(false);
        }else{
            FechaInicial.setEnabled(false);
            FechaFinal.setEnabled(false);
        }
    }//GEN-LAST:event_jchbRangoActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Informe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Informe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Informe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Informe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Informe().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JDateChooser FechaFinal;
    public static com.toedter.calendar.JDateChooser FechaInicial;
    private javax.swing.JTable Registros;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBusqueda;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JComboBox jcPaciente;
    public static javax.swing.JComboBox jcTerapia;
    public static javax.swing.JComboBox jcTipoInforme;
    private javax.swing.JCheckBox jchbRango;
    private javax.swing.JLabel labelDoc;
    private javax.swing.JLabel labelTerapia;
    private javax.swing.JLabel labelTerapia1;
    private javax.swing.JLabel labelTerapia2;
    private javax.swing.JLabel labelTipoInforme;
    private javax.swing.JLabel labelTitulo;
    public static java.awt.TextField txtDocPac;
    // End of variables declaration//GEN-END:variables
    /**
     * Método que permite buscar un registro de un paciente de acuerdo al número de identificación digitada
     * y muestra la información obtenida en la tabla de registros.
     */
    public void buscar() {
        String id = null;
        ArrayList <Object[]> l;
        final Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        if (!jcPaciente.getSelectedItem().equals("Seleccione")) {
            for (Map.Entry<String, String> pacientes : p.entrySet()){
                String u = pacientes.getKey();
                if (jcPaciente.getSelectedItem().toString().equals(pacientes.getValue())) {
                    id = u;
                }
            }
        }
        
        if(id == null){
            JOptionPane.showMessageDialog(null, "Debe diligenciar un número de identificación a buscar", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            l = OpInforme.buscarRegistros(id);
            if(l.size()>0){
                btnImprimir.setEnabled(false);
                jcTipoInforme.setSelectedIndex(0);
                jcTipoInforme.setEnabled(false);
                jcTerapia.setSelectedIndex(0);
                jcTerapia.setEnabled(false);
                jchbRango.setEnabled(false);
                if(dtm.getRowCount()!=0){
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        dtm.removeRow(i);
                        i-=1;
                    }
                }
                try{
                    for (int i = 0; i < l.size(); i++) {
                        dtm.addRow(l.get(i));
                    }
                }catch(Exception e){
                    System.out.println("Error: "+e);
                }
            }
        }
    }
}
