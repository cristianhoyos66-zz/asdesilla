/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Presentacion;

import AccesoDatos.OpUsuarios;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Esta clase permite pintar la ventana Usuarios, con sus respectivos componentes, para el manejo de dicha información
 * @author Cristian A. Hoyos Jaramillo
 * @author Daniela Estrada Monsalve
 * @author Yeisson A. Ochoa Villa
 */
public class Usuarios extends javax.swing.JFrame {
    TreeMap<Integer, String> p;
    TreeMap<Integer, String> td;
    TreeMap<Integer, String> o;
    
    public Usuarios() {
        initComponents();
        setIconImage (new ImageIcon(getClass().getResource("/Imagenes/user-icon.png")).getImage());
        try {
            p = OpUsuarios.obtenerPerfiles();
            Iterator it = p.keySet().iterator();
            while(it.hasNext()){
                jcPerfil.addItem(p.get(it.next()));
            }
            
            td = OpUsuarios.obtenerTipoDoc();
            Iterator t = td.keySet().iterator();
            while(t.hasNext()){
                jcTipoDoc.addItem(td.get(t.next()));
            }
            
            o = OpUsuarios.obtenerCargos();
            Iterator oc = o.keySet().iterator();
            while(oc.hasNext()){
                jcCargo.addItem(o.get(oc.next()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        labelAp1 = new javax.swing.JLabel();
        labelNDoc = new javax.swing.JLabel();
        labelCargo = new javax.swing.JLabel();
        labelNUsuario = new javax.swing.JLabel();
        txtApellido1 = new java.awt.TextField();
        txtNdoc = new java.awt.TextField();
        txtUsuario = new java.awt.TextField();
        txtClave = new javax.swing.JPasswordField();
        labelContrasenna = new javax.swing.JLabel();
        labelPerfil = new javax.swing.JLabel();
        labelTDoc = new javax.swing.JLabel();
        jcTipoDoc = new javax.swing.JComboBox();
        jcPerfil = new javax.swing.JComboBox();
        labelTitulo = new javax.swing.JLabel();
        labelObligatorios = new javax.swing.JLabel();
        btnCrear = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        labelNombre = new javax.swing.JLabel();
        txtNombre = new java.awt.TextField();
        labelAp2 = new javax.swing.JLabel();
        txtApellido2 = new java.awt.TextField();
        jcCargo = new javax.swing.JComboBox();
        btnGenerarClave = new javax.swing.JButton();
        labelValidarContrasenna = new javax.swing.JLabel();
        txtValidarClave = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Usuarios");
        setMinimumSize(new java.awt.Dimension(974, 500));
        setPreferredSize(new java.awt.Dimension(974, 500));
        setResizable(false);
        getContentPane().setLayout(null);

        labelAp1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAp1.setText("*Primer Apellido:");
        getContentPane().add(labelAp1);
        labelAp1.setBounds(480, 150, 90, 15);

        labelNDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNDoc.setText("*Número de documento:");
        getContentPane().add(labelNDoc);
        labelNDoc.setBounds(30, 110, 140, 15);

        labelCargo.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelCargo.setText("*Cargo:");
        labelCargo.setToolTipText("");
        getContentPane().add(labelCargo);
        labelCargo.setBounds(480, 190, 50, 15);

        labelNUsuario.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNUsuario.setText("*Usuario:");
        getContentPane().add(labelNUsuario);
        labelNUsuario.setBounds(30, 230, 60, 15);
        getContentPane().add(txtApellido1);
        txtApellido1.setBounds(630, 150, 200, 19);
        getContentPane().add(txtNdoc);
        txtNdoc.setBounds(200, 110, 200, 19);
        getContentPane().add(txtUsuario);
        txtUsuario.setBounds(200, 230, 200, 19);
        getContentPane().add(txtClave);
        txtClave.setBounds(630, 230, 200, 22);

        labelContrasenna.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelContrasenna.setText("*Contraseña:");
        getContentPane().add(labelContrasenna);
        labelContrasenna.setBounds(480, 230, 80, 15);

        labelPerfil.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelPerfil.setText("*Perfil:");
        getContentPane().add(labelPerfil);
        labelPerfil.setBounds(30, 280, 40, 15);

        labelTDoc.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTDoc.setText("*Tipo de documento:");
        getContentPane().add(labelTDoc);
        labelTDoc.setBounds(480, 110, 131, 15);

        jcTipoDoc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcTipoDoc);
        jcTipoDoc.setBounds(630, 110, 130, 27);

        jcPerfil.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcPerfil);
        jcPerfil.setBounds(200, 280, 200, 27);

        labelTitulo.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelTitulo.setText("INFORMACIÓN DEL USUARIO");
        getContentPane().add(labelTitulo);
        labelTitulo.setBounds(370, 20, 180, 15);

        labelObligatorios.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelObligatorios.setText("Los campos con * son obligatorios");
        getContentPane().add(labelObligatorios);
        labelObligatorios.setBounds(360, 60, 242, 15);

        btnCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        getContentPane().add(btnCrear);
        btnCrear.setBounds(80, 390, 100, 34);

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/update.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar);
        btnModificar.setBounds(200, 390, 120, 36);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(350, 390, 100, 34);

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disable-icon.png"))); // NOI18N
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar);
        btnEliminar.setBounds(470, 390, 140, 34);

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actions-edit-clear-icon.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(630, 390, 110, 34);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Log-Out-icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir);
        btnSalir.setBounds(760, 390, 110, 34);

        labelNombre.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelNombre.setText("*Nombre:");
        getContentPane().add(labelNombre);
        labelNombre.setBounds(30, 150, 60, 15);
        getContentPane().add(txtNombre);
        txtNombre.setBounds(200, 150, 200, 19);

        labelAp2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelAp2.setText("Segundo Apellido:");
        getContentPane().add(labelAp2);
        labelAp2.setBounds(30, 190, 110, 15);
        getContentPane().add(txtApellido2);
        txtApellido2.setBounds(200, 190, 200, 19);

        jcCargo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        getContentPane().add(jcCargo);
        jcCargo.setBounds(630, 190, 200, 27);

        btnGenerarClave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/generate-icon.png"))); // NOI18N
        btnGenerarClave.setToolTipText("Genera una contraseña automáticamente para el usuario a registrar");
        btnGenerarClave.setEnabled(false);
        btnGenerarClave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarClaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerarClave);
        btnGenerarClave.setBounds(840, 230, 50, 20);

        labelValidarContrasenna.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelValidarContrasenna.setText("*Confirmar Contraseña:");
        getContentPane().add(labelValidarContrasenna);
        labelValidarContrasenna.setBounds(480, 280, 140, 15);
        getContentPane().add(txtValidarClave);
        txtValidarClave.setBounds(630, 280, 200, 22);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 980, 470);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Llama al método guardar.
     * @param evt 
     */
    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        guardar();
    }//GEN-LAST:event_btnCrearActionPerformed

    /**
     * Llama al método modificar.
     * @param evt 
     */
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        modificar();
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * Llama a la interfaz para la visualización de los registros
     * @param evt 
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        new UsuariosRegistros().setVisible(true);
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Llama al método cambiar estado.
     * @param evt 
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        cambiarEstado();
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * Limpia todos los campos, asignandoles el valor por defecto.
     * @param evt 
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtNdoc.setEnabled(true);
        txtNdoc.setText("");
        jcTipoDoc.setEnabled(true);
        jcTipoDoc.setSelectedIndex(0);
        txtNombre.setEnabled(true);
        txtNombre.setText("");
        txtApellido1.setEnabled(true);
        txtApellido1.setText("");
        txtApellido2.setEnabled(true);
        txtApellido2.setText("");
        jcCargo.setEnabled(true);
        jcCargo.setSelectedIndex(0);
        txtUsuario.setEnabled(true);
        txtUsuario.setText("");
        txtClave.setEnabled(true);
        txtClave.setText("");
        txtValidarClave.setEnabled(true);
        txtValidarClave.setText("");
        jcPerfil.setEnabled(true);
        jcPerfil.setSelectedIndex(0);
        btnCrear.setEnabled(true);
        btnModificar.setEnabled(false);
        btnGenerarClave.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnEliminar.setText("Deshabilitar");
        btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * Cierra la interfaz y permite regresar al menú principal.
     * @param evt 
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        new Menu().setVisible(true);
        this.hide();
    }//GEN-LAST:event_btnSalirActionPerformed
    /**
     * Permite generar una contraseña generica para un usuario,
     * basado en las dos primeras letras del nombre siendo la primera mayúscula
     * las dos primeras letras del primer apellido siendo la primera mayúscula
     * y los dos primeros digitos del número de identificación
     * @param evt 
     */
    private void btnGenerarClaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarClaveActionPerformed
        char[] nombre = txtNombre.getText().substring(0, 2).toCharArray();
        nombre[0] = Character.toUpperCase(nombre[0]);
        
        char[] apellido1 = txtApellido1.getText().substring(0, 2).toCharArray();
        apellido1[0] = Character.toUpperCase(apellido1[0]);
        
        String claveGenerica = new String(nombre) + new String(apellido1) + txtNdoc.getText().substring(0, 2);
        txtClave.setText(claveGenerica);
    }//GEN-LAST:event_btnGenerarClaveActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Usuarios().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    public static javax.swing.JButton btnCrear;
    public static javax.swing.JButton btnEliminar;
    public static javax.swing.JButton btnGenerarClave;
    private javax.swing.JButton btnLimpiar;
    public static javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public static javax.swing.JComboBox jcCargo;
    public static javax.swing.JComboBox jcPerfil;
    public static javax.swing.JComboBox jcTipoDoc;
    private javax.swing.JLabel labelAp1;
    private javax.swing.JLabel labelAp2;
    private javax.swing.JLabel labelCargo;
    private javax.swing.JLabel labelContrasenna;
    private javax.swing.JLabel labelNDoc;
    private javax.swing.JLabel labelNUsuario;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelObligatorios;
    private javax.swing.JLabel labelPerfil;
    private javax.swing.JLabel labelTDoc;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JLabel labelValidarContrasenna;
    public static java.awt.TextField txtApellido1;
    public static java.awt.TextField txtApellido2;
    public static javax.swing.JPasswordField txtClave;
    public static java.awt.TextField txtNdoc;
    public static java.awt.TextField txtNombre;
    public static java.awt.TextField txtUsuario;
    public static javax.swing.JPasswordField txtValidarClave;
    // End of variables declaration//GEN-END:variables
    /**
     * Método que permite guardar la información de un usuario
     * con base en los datos ingresados.
     */
    public void guardar(){
        String id, tipoId = "Seleccione", nombre, apellido1, apellido2, ocupacion = "Seleccione", usuario, clave, validarClave, perfil = "Seleccione";
        id = txtNdoc.getText();
        
        for (Entry<Integer, String> tipoDocs : td.entrySet()){
            int td = tipoDocs.getKey();
            if (jcTipoDoc.getSelectedItem().toString().equals(tipoDocs.getValue())) {
                tipoId = String.valueOf(td);
            }
        }
        nombre = txtNombre.getText();
        apellido1 = txtApellido1.getText();
        apellido2 = txtApellido2.getText();
        
        for (Entry<Integer, String> ocupaciones : o.entrySet()){
            int o = ocupaciones.getKey();
            if (jcCargo.getSelectedItem().toString().equals(ocupaciones.getValue())) {
                ocupacion = String.valueOf(o);
            }
        }
        usuario = txtUsuario.getText();
        clave = txtClave.getText();
        validarClave = txtValidarClave.getText();
        for (Entry<Integer, String> perfiles : p.entrySet()){
            int per = perfiles.getKey();
            if (jcPerfil.getSelectedItem().toString().equals(perfiles.getValue())) {
                perfil = String.valueOf(per);
            }
        }   

        if((id == null || id.trim().isEmpty()) || tipoId.equals("Seleccione") || (nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (ocupacion.equals("Seleccione")) || 
                (usuario == null || usuario.trim().isEmpty()) || (clave == null || clave.trim().isEmpty()) || (validarClave == null || validarClave.trim().isEmpty()) || perfil.equals("Seleccione")){
            JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(id.length() > 20 || id.length() < 4){
            id = null;
            JOptionPane.showMessageDialog(null, "El campo identificación no debe ser superior a 20 carácteres ni inferior a 4 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(id.startsWith("0")){
            id = null;
            JOptionPane.showMessageDialog(null, "El número de identificación ingresado es inválido", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(clave.length()< 6){
            clave = null;
            JOptionPane.showMessageDialog(null, "El campo contraseña debe tener una longitud mínima de seis carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(clave.matches("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{"+clave.length()+"}$") == false){
            clave = null;
            JOptionPane.showMessageDialog(null, "El campo contraseña debe contener letras minúsculas, mayúsculas y números", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(validarClave.length()< 6){
            validarClave = null;
            JOptionPane.showMessageDialog(null, "El campo validar contraseña debe tener una longitud mínima de seis carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(validarClave.matches("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{"+validarClave.length()+"}$") == false){
            validarClave = null;
            JOptionPane.showMessageDialog(null, "El campo validar contraseña debe contener letras minúsculas, mayúsculas y números", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(!clave.equals(validarClave)){
            clave = null;
            JOptionPane.showMessageDialog(null, "El valor ingresado en el campo confirmar contraseña \n no coincide con el valor del campo contraseña", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                clave = OpUsuarios.hashText(clave);
                
                int a = OpUsuarios.guardar(id, tipoId, nombre, apellido1, apellido2, ocupacion, usuario, clave, perfil);
                if (a == 0) {
                    txtNdoc.enable();
                    txtNdoc.setText("");
                    jcTipoDoc.setSelectedIndex(0);
                    txtNombre.setText("");
                    txtApellido1.setText("");
                    txtApellido2.setText("");
                    jcCargo.setSelectedIndex(0);
                    txtUsuario.setText("");
                    txtClave.setText("");
                    txtValidarClave.setText("");
                    jcPerfil.setSelectedIndex(0);
                }
            } catch (Exception ex) {
                Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
        
    /**
    * Método que permite cambiar el estado de un usuario registrado 
    * de acuerdo a la identificación digitada.
    */
    public void cambiarEstado(){
        if(txtNdoc.getText() == null || txtNdoc.getText().trim().isEmpty()){
            txtNdoc.setText(null);
            JOptionPane.showMessageDialog(null, "Se debe diligenciar el campo número de documento del usuario a cambiar el estado", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }

        if(!txtNdoc.getText().trim().isEmpty()){
            JOptionPane x = new JOptionPane();
            if(x.showConfirmDialog(null,"Está seguro que desea cambiar el estado de este registro?")==0){
                OpUsuarios.cambiarEstado(txtNdoc.getText());
                txtNdoc.setEnabled(true);
                txtNdoc.setText("");
                jcTipoDoc.setEnabled(true);
                jcTipoDoc.setSelectedIndex(0);
                txtNombre.setEnabled(true);
                txtNombre.setText("");
                txtApellido1.setEnabled(true);
                txtApellido1.setText("");
                txtApellido2.setEnabled(true);
                txtApellido2.setText("");
                jcCargo.setEnabled(true);
                jcCargo.setSelectedIndex(0);
                txtUsuario.setEnabled(true);
                txtUsuario.setText("");
                txtClave.setEnabled(true);
                txtClave.setText("");
                txtValidarClave.setEnabled(true);
                txtValidarClave.setText("");
                jcPerfil.setEnabled(true);
                jcPerfil.setSelectedIndex(0);
                btnCrear.setEnabled(true);
                btnModificar.setEnabled(false);
                btnEliminar.setEnabled(false);
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
            }
        }
    }
    
    /**
    * Método que permite modificar la información de un usuario de acuerdo 
    * a la información digitada.
    */
    public void modificar(){
        String id, tipoId = "Seleccione", nombre, apellido1, apellido2, ocupacion = "Seleccione", usuario, clave, perfil = "Seleccione";
        
        id = txtNdoc.getText();
        
        for (Entry<Integer, String> tipoDocs : td.entrySet()){
            int td = tipoDocs.getKey();
            if (jcTipoDoc.getSelectedItem().toString().equals(tipoDocs.getValue())) {
                tipoId = String.valueOf(td);
            }
        }
        nombre = txtNombre.getText();
        apellido1 = txtApellido1.getText();
        apellido2 = txtApellido2.getText();
        
        for (Entry<Integer, String> ocupaciones : o.entrySet()){
            int o = ocupaciones.getKey();
            if (jcCargo.getSelectedItem().toString().equals(ocupaciones.getValue())) {
                ocupacion = String.valueOf(o);
            }
        }
        usuario = txtUsuario.getText();
        clave = txtClave.getText();
        for (Entry<Integer, String> perfiles : p.entrySet()){
            int per = perfiles.getKey();
            if (jcPerfil.getSelectedItem().toString().equals(perfiles.getValue())) {
                perfil = String.valueOf(per);
            }
        }   

        if((id == null || id.trim().isEmpty()) || tipoId.equals("Seleccione") || (nombre == null || nombre.trim().isEmpty()) || (apellido1 == null || apellido1.trim().isEmpty()) || (ocupacion.equals("Seleccione")) || (usuario == null || usuario.trim().isEmpty()) || (clave == null || clave.trim().isEmpty()) || perfil.equals("Seleccione")){
            JOptionPane.showMessageDialog(null, "Se deben diligenciar todos los campos obligatorios", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(id.length() > 20 || id.length() < 4){
            id = null;
            JOptionPane.showMessageDialog(null, "El campo identificación no debe ser superior a 20 carácteres ni inferior a 4 carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(clave.length()< 6){
            clave = null;
            JOptionPane.showMessageDialog(null, "El campo contraseña debe tener una longitud mínima de seis carácteres", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else if(clave.matches("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{"+clave.length()+"}$") == false){
            clave = null;
            JOptionPane.showMessageDialog(null, "El campo contraseña debe contener letras minúsculas, mayúsculas y números", "Gestión Asdesilla", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                clave = OpUsuarios.hashText(clave);
                OpUsuarios.modificar(id, tipoId, nombre, apellido1, apellido2, ocupacion, usuario, clave, perfil);
                txtNdoc.enable();
                txtNdoc.setText("");
                jcTipoDoc.setSelectedIndex(0);
                txtNombre.setText("");
                txtApellido1.setText("");
                txtApellido2.setText("");
                jcCargo.setSelectedIndex(0);
                txtUsuario.setEnabled(true);
                txtUsuario.setText("");
                txtClave.setText("");
                jcPerfil.setSelectedIndex(0);
                btnCrear.setEnabled(true);
                btnModificar.setEnabled(false);
                btnGenerarClave.setEnabled(false);
                btnEliminar.setEnabled(false);
                btnEliminar.setText("Deshabilitar");
                btnEliminar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/disable-icon.png")));
            } catch (Exception ex) {
                Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
